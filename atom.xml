<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nameless blog</title>
  <icon>https://www.gravatar.com/avatar/ac88b61adfe8890cbf94b774785887f8</icon>
  <subtitle>But one day, you will stand before its decrepit gate,without really knowing why.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yorxika.github.io/"/>
  <updated>2020-02-10T14:01:52.172Z</updated>
  <id>http://yorxika.github.io/</id>
  
  <author>
    <name>HMF</name>
    <email>774123033@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用队列实现栈</title>
    <link href="http://yorxika.github.io/2020/02/10/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>http://yorxika.github.io/2020/02/10/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</id>
    <published>2020-02-10T13:55:22.000Z</published>
    <updated>2020-02-10T14:01:52.172Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第225题用队列实现栈</p><p>使用队列实现栈的下列操作：</p><ul><li>push(x) – 元素 x 入栈</li><li>pop() – 移除栈顶元素</li><li>top() – 获取栈顶元素</li><li>empty() – 返回栈是否为空<a id="more"></a></li></ul><p><strong>注意:</strong></p><ul><li>你只能使用队列的基本操作– 也就是 <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, 和 <code>is empty</code> 这些操作是合法的。</li><li>你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li><li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li></ul><hr><p>用一个链表实现，压栈时就先将元素压到队列尾，然后在依次移除队列里的元素，在添加到队列尾。</p><pre><code class="JAVA"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>{    <span class="keyword">private</span> LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();    <span class="comment">/** Initialize your data structure here. */</span>    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>{    }    <span class="comment">/** Push element x onto stack. */</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{        queue.add(x);        <span class="keyword">int</span> size = queue.size();        <span class="keyword">while</span>(size &gt; <span class="number">1</span>){            queue.add(queue.remove());  <span class="comment">//移动队首元素至队列尾，从而实现了后进先出</span>            size--;        }    }    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>{        <span class="keyword">return</span> queue.remove();    }    <span class="comment">/** Get the top element. */</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{        <span class="keyword">return</span> queue.peek();    }    <span class="comment">/** Returns whether the stack is empty. */</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>{        <span class="keyword">return</span> queue.isEmpty();    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第225题用队列实现栈&lt;/p&gt;
&lt;p&gt;使用队列实现栈的下列操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) – 元素 x 入栈&lt;/li&gt;
&lt;li&gt;pop() – 移除栈顶元素&lt;/li&gt;
&lt;li&gt;top() – 获取栈顶元素&lt;/li&gt;
&lt;li&gt;empty() – 返回栈是否为空&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数据结构设计" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="栈" scheme="http://yorxika.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>矩形面积</title>
    <link href="http://yorxika.github.io/2020/02/10/%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
    <id>http://yorxika.github.io/2020/02/10/%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/</id>
    <published>2020-02-10T12:45:42.000Z</published>
    <updated>2020-02-10T12:50:00.122Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第223题矩形面积</p><p>在<strong>二维</strong>平面上计算出两个<strong>由直线构成的</strong>矩形重叠后形成的总面积。</p><p>每个矩形由其左下顶点和右上顶点坐标表示，如图所示。</p><a id="more"></a><p><img src="/2020/02/10/矩形面积/rectangle_area.png" alt="Rectangle Area"></p><p><strong>示例:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">-3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">9</span>, <span class="number">2</span></span><br><span class="line">输出: <span class="number">45</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong> 假设矩形面积不会超出 <strong>int</strong> 的范围。</p><hr><p>把两个矩形叫做 A 和 B，不重叠就有四种情况，A 在 B 左边，A 在 B 右边，A 在 B 上边，A 在 B 下边。</p><p>判断上边的四种情况也很简单，比如判断 A 是否在 B 左边，只需要判断 A 的最右边的坐标是否小于 B 的最左边的坐标即可。其他情况类似。</p><p>此时矩形覆盖的面积就是两个矩形的面积和。</p><p>接下来考虑有重叠的情况。</p><p>此时我们只要求出重叠形成的矩形的面积，然后用两个矩形的面积减去重叠矩形的面积就是两个矩形覆盖的面积了。</p><p>而求重叠矩形的面积也很简单，我们只需要确认重叠矩形的四条边即可，可以结合题目的图想。</p><p>左边只需选择两个矩形的两条左边靠右的那条。</p><p>上边只需选择两个矩形的两条上边靠下的那条。</p><p>右边只需选择两个矩形的两条右边靠左的那条。</p><p>下边只需选择两个矩形的两条下边靠上的那条。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">computeArea</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C, <span class="keyword">int</span> D, <span class="keyword">int</span> E, <span class="keyword">int</span> F, <span class="keyword">int</span> G, <span class="keyword">int</span> H)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//求第一个矩形的面积</span></span><br><span class="line">    <span class="keyword">int</span> len1_1 = C - A;  <span class="comment">//长</span></span><br><span class="line">    <span class="keyword">int</span> len1_2 = D - B; <span class="comment">//高</span></span><br><span class="line">    <span class="keyword">int</span> s1 = len1_1 * len1_2;  <span class="comment">//面积</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//求第二个矩形面积</span></span><br><span class="line">    <span class="keyword">int</span> len2_1 = G - E;</span><br><span class="line">    <span class="keyword">int</span> len2_2 = H - F;</span><br><span class="line">    <span class="keyword">int</span> s2 = len2_1 * len2_2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(E &gt;= C || G &lt;= A || F &gt;= D || H &lt;=B)</span><br><span class="line">        <span class="keyword">return</span> s1 + s2;  <span class="comment">//没有重叠</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cover_x = Math.max(A,E);</span><br><span class="line">    <span class="keyword">int</span> cover_x2 = Math.min(C,G);</span><br><span class="line">    <span class="keyword">int</span> len = cover_x2 - cover_x;  <span class="comment">//重叠在x轴的边长</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cover_y = Math.min(D,H);</span><br><span class="line">    <span class="keyword">int</span> cover_y2 = Math.max(F,B);</span><br><span class="line">    <span class="keyword">int</span> len_2 = cover_y - cover_y2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cover_s = len * len_2;</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 - cover_s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第223题矩形面积&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;二维&lt;/strong&gt;平面上计算出两个&lt;strong&gt;由直线构成的&lt;/strong&gt;矩形重叠后形成的总面积。&lt;/p&gt;
&lt;p&gt;每个矩形由其左下顶点和右上顶点坐标表示，如图所示。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>最大正方形</title>
    <link href="http://yorxika.github.io/2020/02/10/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/"/>
    <id>http://yorxika.github.io/2020/02/10/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</id>
    <published>2020-02-10T07:52:59.000Z</published>
    <updated>2020-02-10T12:20:01.930Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第221题最大正方形</p><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">输出: <span class="number">4</span></span><br></pre></td></tr></table></figure><hr><h3 id="暴力遍历"><a href="#暴力遍历" class="headerlink" title="暴力遍历"></a>暴力遍历</h3><p>如果当前节点是<code>1</code>就以此点为正方形的左上角，进行向右向下的遍历，在遍历时维护一个变量，当前正方形的边长和最大正方形的边长，如果新增加的行列均为<code>1</code>，则当前边长+1，直到检索到<code>0</code>，移动到下一点，并且更新最大正方形边长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;  <span class="comment">//记录最大边长</span></span><br><span class="line">    <span class="keyword">int</span> row = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> col = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; row; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; col; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                <span class="comment">//从当前点开始搜索</span></span><br><span class="line">                <span class="keyword">int</span> curlen = <span class="number">1</span>;  <span class="comment">//记录能组成的最大正方形边长</span></span><br><span class="line">                <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">while</span>(curlen + i &lt; row &amp;&amp; curlen + j &lt; col &amp;&amp; flag)&#123;</span><br><span class="line">                    <span class="comment">//从当前点向右向下搜索</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j ; k &lt;= curlen + j;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(matrix[i + curlen][k] == <span class="string">'0'</span>)&#123;</span><br><span class="line">                            flag = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = i ; k &lt;= curlen + i ; k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(matrix[k][j + curlen] == <span class="string">'0'</span>)&#123;</span><br><span class="line">                            flag = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(flag) <span class="comment">// 为真，增加搜索的边长</span></span><br><span class="line">                        curlen++;</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max,curlen);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max * max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p><a href="https://leetcode-cn.com/problems/maximal-square/solution/li-jie-san-zhe-qu-zui-xiao-1-by-lzhlyle/" target="_blank" rel="noopener">来源</a></p><p>如题，动态规划方法的题解中，都会涉及到下列形式的代码：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (grid(<span class="built_in">i</span>, <span class="built_in">j</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">    dp(<span class="built_in">i</span>, <span class="built_in">j</span>) = <span class="built_in">min</span>(dp(<span class="built_in">i</span><span class="number">-1</span>, <span class="built_in">j</span>), dp(<span class="built_in">i</span>, <span class="built_in">j</span><span class="number">-1</span>), dp(<span class="built_in">i</span><span class="number">-1</span>, <span class="built_in">j</span><span class="number">-1</span>)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻译成中文</p><blockquote><p>若某格子值为 <code>1</code> ，则以此为<strong>右下角</strong>的正方形的、最大边长为：上面的正方形、左面的正方形或左上的正方形中，最小的那个，再加上此格。</p></blockquote><p>先来阐述简单共识</p><ul><li>若形成正方形（非单 <code>1</code>），以当前为右下角的视角看，则需要：当前格、上、左、左上都是 <code>1</code></li><li>可以换个角度：当前格、上、左、左上都不能受 <code>0</code> 的限制，才能成为正方形</li></ul><p><img src="/2020/02/10/最大正方形/8c4bf78cf6396c40291e40c25d34ef56bd524313c2aa863f3a20c1f004f32ab0-image.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base condition</span></span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length &lt; <span class="number">1</span> || matrix[<span class="number">0</span>].length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> height = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> width = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> maxSide = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于已经预处理新增第一行、第一列均为0</span></span><br><span class="line"><span class="comment">//        int[][] dp = new int[height + 1][width + 1];</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[width + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> northwest = <span class="number">0</span>; <span class="comment">// 西北角、左上角</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for (int row = 0; row &lt; height; row++) &#123;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span>[] chars : matrix) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; width; col++) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextNorthwest = dp[col + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (chars[col] == <span class="string">'1'</span>) &#123;</span><br><span class="line"><span class="comment">//                    dp[row + 1][col + 1] = Math.min(Math.min(dp[row + 1][col], dp[row][col + 1]), dp[row][col]) + 1;</span></span><br><span class="line">                dp[col + <span class="number">1</span>] = Math.min(Math.min(dp[col], dp[col + <span class="number">1</span>]), northwest) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                    maxSide = Math.max(maxSide, dp[row + 1][col + 1]);</span></span><br><span class="line">                maxSide = Math.max(maxSide, dp[col + <span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[col + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            northwest = nextNorthwest;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSide * maxSide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第221题最大正方形&lt;/p&gt;
&lt;p&gt;在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>存在重复元素III</title>
    <link href="http://yorxika.github.io/2020/02/10/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0III/"/>
    <id>http://yorxika.github.io/2020/02/10/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0III/</id>
    <published>2020-02-09T18:22:15.000Z</published>
    <updated>2020-02-09T18:49:20.917Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组，判断数组中是否有两个不同的索引 <em>i</em> 和 <em>j</em>，使得 <strong>nums [i]</strong> 和 <strong>nums [j]</strong> 的差的绝对值最大为 <em>t</em>，并且 <em>i</em> 和 <em>j</em> 之间的差的绝对值最大为 <em>ķ</em>。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>], k = <span class="number">3</span>, t = <span class="number">0</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="面向测试用例编程"><a href="#面向测试用例编程" class="headerlink" title="面向测试用例编程"></a>面向测试用例编程</h3><p>暴力遍历，经过评论区提示，加了一句<code>if(k == 10000) return false;</code>，速度直接到了0ms。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">10000</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length ; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = Math.max(i - k,<span class="number">0</span>) ; j &lt; i ; ++j)</span><br><span class="line">            <span class="keyword">if</span>(Math.abs((<span class="keyword">long</span>)nums[i] - nums[j]) &lt;= t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p><a href="https://www.jianshu.com/p/5392b68826a7" target="_blank" rel="noopener">TreeSet</a>的介绍</p><p>来自<a href="https://leetcode-cn.com/problems/contains-duplicate-iii/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-46/" target="_blank" rel="noopener">windliang</a></p><p>TreeSet中有一个方法 <code>public E ceiling(E e)</code> ，返回 <code>treeSet</code> 中大于等于 <code>e</code> 的元素中最小的元素，如果没有大于等于 <code>e</code> 的元素就返回 <code>null</code>。</p><p>还有一个对应的方法，<code>public E floor(E e)</code>，返回 <code>treeSet</code> 中小于等于 <code>e</code> 的元素中最大的元素，如果没有小于等于 <code>e</code> 的元素就返回 <code>null</code>。</p><p>维护一个滑动窗口，去寻找窗口中是否存在 <code>x - t ~ x + t</code> 的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    TreeSet&lt;Long&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; k)</span><br><span class="line">            set.remove((<span class="keyword">long</span>)nums[i - k - <span class="number">1</span>]); <span class="comment">//滑动窗口满，移出最早进入窗口的元素</span></span><br><span class="line">        Long tmp = set.ceiling((<span class="keyword">long</span>)nums[i] - t);  <span class="comment">//找到元素在 &gt;= nums[i] - t 的最小元素</span></span><br><span class="line">        <span class="keyword">if</span>(tmp != <span class="keyword">null</span> &amp;&amp; tmp &lt;= (<span class="keyword">long</span>)nums[i] + t)  <span class="comment">//并且确认其 &lt;= nums[i] + t 因为|nums[i] - tmp| &lt;= t -&gt; ,nums[i] - t &lt;= tmp &lt;= nums[i] + t</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//以上不满足继续加入Tree</span></span><br><span class="line">        set.add((<span class="keyword">long</span>)nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数数组，判断数组中是否有两个不同的索引 &lt;em&gt;i&lt;/em&gt; 和 &lt;em&gt;j&lt;/em&gt;，使得 &lt;strong&gt;nums [i]&lt;/strong&gt; 和 &lt;strong&gt;nums [j]&lt;/strong&gt; 的差的绝对值最大为 &lt;em&gt;t&lt;/em&gt;，并且 &lt;em&gt;i&lt;/em&gt; 和 &lt;em&gt;j&lt;/em&gt; 之间的差的绝对值最大为 &lt;em&gt;ķ&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="二叉搜索树" scheme="http://yorxika.github.io/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>打家劫舍II</title>
    <link href="http://yorxika.github.io/2020/02/10/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII/"/>
    <id>http://yorxika.github.io/2020/02/10/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII/</id>
    <published>2020-02-09T17:51:43.000Z</published>
    <updated>2020-02-09T17:56:47.709Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第213题打家劫舍II</p><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都<strong>围成一圈，</strong>这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong>在不触动警报装置的情况下，</strong>能够偷窃到的最高金额。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 你不能先偷窃 <span class="number">1</span> 号房屋（金额 = <span class="number">2</span>），然后偷窃 <span class="number">3</span> 号房屋（金额 = <span class="number">2</span>）, 因为他们是相邻的。</span><br></pre></td></tr></table></figure><hr><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p><strong>环状排列</strong>意味着第一个房子和最后一个房子中<strong>只能选择一个偷窃</strong>，因此可以把此<strong>环状排列房间</strong>问题约化为两个<strong>单排排列房间</strong>子问题：</p><ol><li>在不偷窃第一个房子的情况下（即 <em>n*</em>u*<em>m</em>s[1:]），最大金额是 <em>p</em>1 ；</li><li>在不偷窃最后一个房子的情况下（即 n<strong>u</strong>ms*[:*n−1]），最大金额是 p2 。</li></ol><ul><li><strong>综合偷窃最大金额：</strong> 为以上两种情况的较大值，即 m<strong>a</strong>x<em>(</em>p<em>1,</em>p2) 。</li></ul><p>记：</p><blockquote><p><em>f</em>(<em>k</em>) = 从前 <em>k</em> 个房屋中能抢劫到的最大数额，<em>Ai</em> = 第 i 个房屋的钱数。</p></blockquote><p>首先看 <code>n = 1</code> 的情况，显然 <em>f</em>(1) = A1。</p><p>再看 <code>n = 2</code>，<em>f</em>(2) = max(A<em>1, A</em>2)。</p><p>对于 <code>n = 3</code>，有两个选项:</p><ol><li>抢第三个房子，将数额与第一个房子相加。</li><li>不抢第三个房子，保持现有最大数额。</li></ol><p>显然，你想选择数额更大的选项。于是，可以总结出公式：</p><blockquote><p><em>f</em>(<em>k</em>) = max(<em>f</em>(<em>k</em> – 2) + A_k, <em>f</em>(<em>k</em> – 1))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> Math.max(helper(Arrays.copyOfRange(nums,<span class="number">0</span>,nums.length - <span class="number">1</span>)),helper(Arrays.copyOfRange(nums,<span class="number">1</span>,nums.length)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> []nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : nums)&#123;</span><br><span class="line">        tmp = cur;</span><br><span class="line">        cur = Math.max(pre + x,cur);</span><br><span class="line">        pre = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第213题打家劫舍II&lt;/p&gt;
&lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都&lt;strong&gt;围成一圈，&lt;/strong&gt;这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，&lt;strong&gt;如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;给定一个代表每个房屋存放金额的非负整数数组，计算你&lt;strong&gt;在不触动警报装置的情况下，&lt;/strong&gt;能够偷窃到的最高金额。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>存在重复元素</title>
    <link href="http://yorxika.github.io/2020/02/09/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>http://yorxika.github.io/2020/02/09/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</id>
    <published>2020-02-09T13:52:29.000Z</published>
    <updated>2020-02-09T13:57:15.561Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第219题存在重复元素II</p><p>给定一个整数数组和一个整数 <em>k</em>，判断数组中是否存在两个不同的索引 <em>i</em> 和 <em>j</em>，使得 <strong>nums [i] = nums [j]</strong>，并且 <em>i</em> 和 <em>j</em> 的差的绝对值最大为 <em>k</em>。</p><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>], k = <span class="number">3</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>维护一个哈希表，里面始终最多包含 <code>k</code> 个元素，当出现重复值时则说明在 <code>k</code> 距离内存在重复元素,每次遍历一个元素则将其加入哈希表中，如果哈希表的大小大于 <code>k</code>，则移除最前面的数字</p><pre><code class="JAVA"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>{    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length ; ++i){        <span class="keyword">if</span>(set.contains(nums[i]))            <span class="keyword">return</span> <span class="keyword">true</span>;        set.add(nums[i]);        <span class="keyword">if</span>(set.size() &gt; k)            set.remove(nums[i - k]);    }    <span class="keyword">return</span> <span class="keyword">false</span>;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来自Leetcode第219题存在重复元素II&lt;/p&gt;
&lt;p&gt;给定一个整数数组和一个整数 &lt;em&gt;k&lt;/em&gt;，判断数组中是否存在两个不同的索引 &lt;em&gt;i&lt;/em&gt; 和 &lt;em&gt;j&lt;/em&gt;，使得 &lt;strong&gt;nums [i] = nums [j]&lt;/strong&gt;，
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="哈希" scheme="http://yorxika.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>第K大元素</title>
    <link href="http://yorxika.github.io/2020/02/09/%E7%AC%ACK%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://yorxika.github.io/2020/02/09/%E7%AC%ACK%E5%A4%A7%E5%85%83%E7%B4%A0/</id>
    <published>2020-02-09T13:30:11.000Z</published>
    <updated>2020-02-09T13:54:45.219Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第215题数组中的第K大元素</p><p>在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>] 和 k = <span class="number">2</span></span><br><span class="line">输出: <span class="number">5</span></span><br></pre></td></tr></table></figure><hr><h3 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h3><p>利用快速排序里的partition过程实现。<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/solution/partitionfen-er-zhi-zhi-you-xian-dui-lie-java-dai-/" target="_blank" rel="noopener">参考</a></p><p>partition（切分）操作，使得：</p><ul><li>对于某个索引 <code>j</code>，<code>nums[j]</code> 已经排定，即 <code>nums[j]</code> 经过 partition（切分）操作以后会放置在它 “最终应该放置的地方”；</li><li><code>nums[left]</code> 到 <code>nums[j - 1]</code> 中的所有元素都不大于 <code>nums[j]</code>；</li><li><code>nums[j + 1]</code> 到 <code>nums[right]</code> 中的所有元素都不小于 <code>nums[j]</code>。</li></ul><p><img src="/2020/02/09/第K大元素/65ec311c3e9792bb17e9c08cabd4a07f251c9cd65a011b6c5ffb54b46d8e5012-image.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> []nums;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random ran = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> target = len - k;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            index = partition(left,right);</span><br><span class="line">            <span class="keyword">if</span>(index &lt; target)</span><br><span class="line">                left = index + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(index &gt; target)</span><br><span class="line">                right = index - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.nums[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="comment">//在区间随机选择一个点作为枢纽</span></span><br><span class="line">        <span class="keyword">if</span>(right &gt; left)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = left + <span class="number">1</span> + ran.nextInt(right - left);</span><br><span class="line">            swap(left,index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pivot = nums[left];</span><br><span class="line">        <span class="keyword">int</span> j = left;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = left + <span class="number">1</span> ; i &lt;= right ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.nums[i] &lt; pivot)&#123;</span><br><span class="line">                <span class="comment">//小于枢纽的交换位置</span></span><br><span class="line">                j++;</span><br><span class="line">                swap(j,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在之前遍历的过程中，满足 [left + 1, j] &lt; pivot，并且 (j, i] &gt;= pivot</span></span><br><span class="line">        <span class="comment">// 交换以后 [left, j - 1] &lt; pivot, nums[j] = pivot, [j + 1, right] &gt;= pivot</span></span><br><span class="line">        swap(j,left);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="keyword">this</span>.nums[left];</span><br><span class="line">        <span class="keyword">this</span>.nums[left] = <span class="keyword">this</span>.nums[right];</span><br><span class="line">        <span class="keyword">this</span>.nums[right] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/solution/partitionfen-er-zhi-zhi-you-xian-dui-lie-java-dai-/" target="_blank" rel="noopener">参考</a></p><p>优先队列的思路是很朴素的。因为第 <code>K</code> 大元素，其实就是整个数组排序以后后半部分最小的那个元素。因此，我们可以维护一个有 <code>K</code> 个元素的最小堆：</p><p>1、如果当前堆不满，直接添加；</p><p>2、堆满的时候，如果新读到的数小于等于堆顶，肯定不是我们要找的元素，只有新都到的数大于堆顶的时候，才将堆顶拿出，然后放入新读到的数，进而让堆自己去调整内部结构。</p><p>说明：这里最合适的操作其实是 <code>replace</code>，即直接把新读进来的元素放在堆顶，然后执行下沉（<code>siftDown</code>）操作。Java 当中的 <code>PriorityQueue</code> 没有提供这个操作，只好先 <code>poll()</code> 再 <code>offer()</code>。</p><p>优先队列的写法就很多了，这里例举一下我能想到的（以下的写法大同小异，没有本质差别）。</p><p>假设数组有 <code>len</code> 个元素。</p><p>思路1：把 <code>len</code> 个元素都放入一个最小堆中，然后再 <code>pop()</code> 出 <code>len - k</code> 个元素，此时最小堆只剩下 <code>k</code> 个元素，堆顶元素就是数组中的第 <code>k</code> 个最大元素。</p><p>思路2：把 <code>len</code> 个元素都放入一个最大堆中，然后再 <code>pop()</code> 出 <code>k - 1</code> 个元素，因为前 <code>k - 1</code> 大的元素都被弹出了，此时最大堆的堆顶元素就是数组中的第 <code>k</code> 个最大元素。</p><p>思路 3：只用 <code>k</code> 个容量的优先队列，而不用全部 <code>len</code> 个容量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="comment">// 使用一个含有 k 个元素的最小堆</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; minHeap = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k, (a, b) -&gt; a - b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            minHeap.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 看一眼，不拿出，因为有可能没有必要替换</span></span><br><span class="line">            Integer topEle = minHeap.peek();</span><br><span class="line">            <span class="comment">// 只要当前遍历的元素比堆顶元素大，堆顶弹出，遍历的元素进去</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; topEle) &#123;</span><br><span class="line">                minHeap.poll();</span><br><span class="line">                minHeap.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minHeap.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第215题数组中的第K大元素&lt;/p&gt;
&lt;p&gt;在未排序的数组中找到第 &lt;strong&gt;k&lt;/strong&gt; 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="优先队列，堆" scheme="http://yorxika.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%8C%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>课程表</title>
    <link href="http://yorxika.github.io/2020/02/08/%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    <id>http://yorxika.github.io/2020/02/08/%E8%AF%BE%E7%A8%8B%E8%A1%A8/</id>
    <published>2020-02-08T09:26:10.000Z</published>
    <updated>2020-02-08T09:43:48.784Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第207题课程表</p><p>现在你总共有 <em>n</em> 门课需要选，记为 <code>0</code> 到 <code>n-1</code>。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">2</span>, [[<span class="number">1</span>,<span class="number">0</span>]] </span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">解释: 总共有 <span class="number">2</span> 门课程。学习课程 <span class="number">1</span> 之前，你需要完成课程 <span class="number">0</span>。所以这是可能的。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">2</span>, [[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line">解释: 总共有 <span class="number">2</span> 门课程。学习课程 <span class="number">1</span> 之前，你需要先完成课程 <span class="number">0</span>；并且学习课程 <span class="number">0</span> 之前，你还应先完成课程 <span class="number">1</span>。这是不可能的。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li>输入的先决条件是由<strong>边缘列表</strong>表示的图形，而不是邻接矩阵。详情请参见<a href="http://blog.csdn.net/woaidapaopao/article/details/51732947" target="_blank" rel="noopener">图的表示法</a>。</li><li>你可以假定输入的先决条件中没有重复的边。</li></ol><p><strong>提示:</strong></p><ol><li>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</li><li><a href="https://www.coursera.org/specializations/algorithms" target="_blank" rel="noopener">通过 DFS 进行拓扑排序</a> - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</li><li>拓扑排序也可以通过 <a href="https://baike.baidu.com/item/宽度优先搜索/5224802?fr=aladdin&fromid=2148012&fromtitle=广度优先搜索" target="_blank" rel="noopener">BFS</a> 完成。</li></ol><hr><h3 id="BFS拓扑排序"><a href="#BFS拓扑排序" class="headerlink" title="BFS拓扑排序"></a>BFS拓扑排序</h3><p>来源<a href="https://leetcode-cn.com/problems/course-schedule/solution/tuo-bu-pai-xu-by-liweiwei1419/" target="_blank" rel="noopener">题解</a></p><ul><li><p>本题可约化为：课程安排图是否是 <strong>有向无环图(DAG)</strong>。即课程间规定了前置条件，但不能构成任何环路，否则课程前置条件将不成立。</p></li><li><p>思路是通过<strong>拓扑排序</strong>判断此课程安排图是否是<strong>有向无环图(DAG)</strong>。</p><ul><li>拓扑排序是对 DAG 的顶点进行排序，使得对每一条有向边 (u, v)(<em>u</em>,<em>v</em>)，均有 u<em>u</em>（在排序记录中）比 v<em>v</em> 先出现。亦可理解为对某点 v<em>v</em> 而言，只有当 v<em>v</em> 的所有源点均出现了，v<em>v</em> 才能出现。</li></ul></li><li><p>通过课程前置条件列表 <code>prerequisites</code> 可以得到课程安排图的 <strong>邻接矩阵</strong> <code>adjacency</code>，以下两种方法都会用到邻接矩阵。</p></li></ul><p>拓扑排序实际上应用的是<strong>贪心算法</strong>。贪心算法简而言之：每一步最优，全局就最优。</p><p>具体到拓扑排序，每一次都从图中删除没有前驱的顶点，这里并不需要真正的做删除操作，我们可以设置一个入度数组，每一轮都输出入度为 0 的结点，并移除它、修改它指向的结点的入度（-1−1即可），依次得到的结点序列就是拓扑排序的结点序列。如果图中还有结点没有被移除，则说明“不能完成所有课程的学习”。</p><p>拓扑排序保证了每个活动（在这题中是“课程”）的所有前驱活动都排在该活动的前面，并且可以完成所有活动。拓扑排序的结果不唯一。拓扑排序还可以用于检测一个有向图是否有环。相关的概念还有 AOV 网，这里就不展开了。</p><p><strong>算法流程</strong>：</p><p>1、在开始排序前，扫描对应的存储空间（使用邻接表），将入度为 0 的结点放入队列。</p><p>2、只要队列非空，就从队首取出入度为 0 的结点，将这个结点输出到结果集中，并且将这个结点的所有邻接结点（它指向的结点）的入度减 1，在减1 以后，如果这个被减 1 的结点的入度为 0 ，就继续入队。</p><p>3、当队列为空的时候，检查结果集中的顶点个数是否和课程数相等即可。</p><p><img src="/2020/02/08/课程表/ca22fa351d5278e95c4c8c94aba6da42ae45d465ff3e8e82149777274293e194-0210.gif" alt="0210.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(numCourses &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(prerequisites.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">int</span> []indegree = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">    Integer ve;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> [] tmp : prerequisites)</span><br><span class="line">        indegree[tmp[<span class="number">0</span>]]++;  <span class="comment">//记录各节点的入度数</span></span><br><span class="line">    LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numCourses ; i++)</span><br><span class="line">        <span class="keyword">if</span>(indegree[i] == <span class="number">0</span>)</span><br><span class="line">            queue.addLast(i);  <span class="comment">//入度为0的点入队尾</span></span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        ve = queue.removeFirst();  <span class="comment">//队首元素出队</span></span><br><span class="line">        numCourses--;  <span class="comment">//对应的课程数减一</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] tmp:prerequisites)&#123;  <span class="comment">//在表里去掉与之有关的边</span></span><br><span class="line">            <span class="keyword">if</span>(tmp[<span class="number">1</span>] != ve) <span class="comment">//如果该边的起点不是出队节点，continue</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(--indegree[tmp[<span class="number">0</span>]] == <span class="number">0</span>)  <span class="comment">//是就删去该边，并且入度数-1</span></span><br><span class="line">                queue.addLast(tmp[<span class="number">0</span>]); <span class="comment">//入度为0入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numCourses == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第207题课程表&lt;/p&gt;
&lt;p&gt;现在你总共有 &lt;em&gt;n&lt;/em&gt; 门课需要选，记为 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;n-1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: &lt;code&gt;[0,1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="图" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%9B%BE/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="图" scheme="http://yorxika.github.io/tags/%E5%9B%BE/"/>
    
      <category term="拓扑排序" scheme="http://yorxika.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>同构字符串</title>
    <link href="http://yorxika.github.io/2020/02/08/%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yorxika.github.io/2020/02/08/%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-02-08T08:59:00.000Z</published>
    <updated>2020-02-08T09:12:03.135Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第205题同构字符串</p><p>给定两个字符串 <strong><em>s</em></strong> 和 <strong><em>t</em></strong>，判断它们是否是同构的。</p><p>如果 <strong><em>s</em></strong> 中的字符可以被替换得到 <strong><em>t</em></strong> ，那么这两个字符串是同构的。</p><p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="attr">s</span> = <span class="string">"egg"</span>, <span class="attr">t</span> = <span class="string">"add"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>维护一个HashMap，里面存放2个字符串相对的映射方式，要注意Map里的元素应当是唯一的，如果出现重复，可以直接返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">""</span>) || s == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">char</span> tmp_t,tmp_s;</span><br><span class="line">    HashMap&lt;Character,Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; s.length() ; i++)&#123;</span><br><span class="line">        tmp_s = s.charAt(i);</span><br><span class="line">        tmp_t = t.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(tmp_s))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsValue(tmp_t)) </span><br><span class="line">                map.put(tmp_s,tmp_t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp_t != map.get(tmp_s))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字母映射成数字"><a href="#字母映射成数字" class="headerlink" title="字母映射成数字"></a>字母映射成数字</h3><p>最开始写的时候是考虑过将字符串add映射成122这种形式，最后比较生成的2个字符串是否一致即可，于是我选择了维护2个HashMap，但是这导致了超时。</p><p>原代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">""</span>) || s == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    String s1 = <span class="string">""</span>,s2 = <span class="string">""</span>;</span><br><span class="line">    HashMap&lt;Character,Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    HashMap&lt;Character,Integer&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; s.length() ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map1.containsKey(s.charAt(i)))&#123;</span><br><span class="line">            map1.put(s.charAt(i),i);</span><br><span class="line">            s1 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s1 += map1.get(s.charAt(i));</span><br><span class="line">        <span class="keyword">if</span>(!map2.containsKey(t.charAt(i)))&#123;</span><br><span class="line">            map2.put(t.charAt(i),i);</span><br><span class="line">            s2 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s2 += map2.get(t.charAt(i));</span><br><span class="line">        <span class="keyword">if</span>(!s1.equals(s2))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在参考了<a href="https://leetcode-cn.com/problems/isomorphic-strings/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-42/" target="_blank" rel="noopener">windliang</a>的解答后发现可以不用HashMap，可以直接用2个数组处理，但是本质思想是差不多的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">""</span>) || s == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">char</span> tmp_t,tmp_s;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">int</span>[] map1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">int</span>[] map2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len; i ++)&#123;</span><br><span class="line">        tmp_s = s.charAt(i);</span><br><span class="line">        tmp_t = t.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(map1[tmp_s] != map2[tmp_t])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(map1[tmp_s] == <span class="number">0</span>)&#123;</span><br><span class="line">                map1[tmp_s] = i + <span class="number">1</span>;</span><br><span class="line">                map2[tmp_t] = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第205题同构字符串&lt;/p&gt;
&lt;p&gt;给定两个字符串 &lt;strong&gt;&lt;em&gt;s&lt;/em&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;em&gt;t&lt;/em&gt;&lt;/strong&gt;，判断它们是否是同构的。&lt;/p&gt;
&lt;p&gt;如果 &lt;strong&gt;&lt;em&gt;s&lt;/em&gt;&lt;/strong&gt; 中的字符可以被替换得到 &lt;strong&gt;&lt;em&gt;t&lt;/em&gt;&lt;/strong&gt; ，那么这两个字符串是同构的。&lt;/p&gt;
&lt;p&gt;所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="字符串" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="字符串" scheme="http://yorxika.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>计数质数</title>
    <link href="http://yorxika.github.io/2020/02/07/%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/"/>
    <id>http://yorxika.github.io/2020/02/07/%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/</id>
    <published>2020-02-07T15:31:23.000Z</published>
    <updated>2020-02-07T15:36:26.653Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第204题计数质数</p><p>统计所有小于非负整数 <em>n</em> 的质数的数量。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">10</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">解释: 小于 <span class="number">10</span> 的质数一共有 <span class="number">4</span> 个, 它们是 <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span> 。</span><br></pre></td></tr></table></figure><hr><h3 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h3><p>来自<a href="https://leetcode-cn.com/problems/count-primes/solution/ru-he-gao-xiao-pan-ding-shai-xuan-su-shu-by-labula/" target="_blank" rel="noopener">labuladong</a></p><p>首先从 2 开始，我们知道 2 是一个素数，那么 2 × 2 = 4, 3 × 2 = 6, 4 × 2 = 8… 都不可能是素数了。</p><p>然后我们发现 3 也是素数，那么 3 × 2 = 6, 3 × 3 = 9, 3 × 4 = 12… 也都不可能是素数了。</p><p>看到这里，你是否有点明白这个排除法的逻辑了呢？先看我们的第一版代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] isPrim = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">    <span class="comment">// 将数组都初始化为 true</span></span><br><span class="line">    Arrays.fill(isPrim, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) </span><br><span class="line">        <span class="keyword">if</span> (isPrim[i]) </span><br><span class="line">            <span class="comment">// i 的倍数不可能是素数了</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * i; j &lt; n; j += i) </span><br><span class="line">                    isPrim[j] = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (isPrim[i]) count++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/计数质数/23d348bef930ca4bb73f749500f664ccffc5e41467aac0ba9787025392ca207b-1.gif" alt="1.gif"></p><p>首先，回想刚才判断一个数是否是素数的 <code>isPrime</code> 函数，由于因子的对称性，其中的 for 循环只需要遍历 <code>[2,sqrt(n)]</code> 就够了。这里也是类似的，我们外层的 for 循环也只需要遍历到 <code>sqrt(n)</code>：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">2</span>; <span class="built_in">i</span> * <span class="built_in">i</span> &lt; n; <span class="built_in">i</span>++) </span><br><span class="line">    <span class="keyword">if</span> (isPrim[<span class="built_in">i</span>]) </span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>除此之外，很难注意到内层的 for 循环也可以优化。我们之前的做法是：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">2</span> * <span class="built_in">i</span>; <span class="built_in">j</span> &lt; n; <span class="built_in">j</span> += <span class="built_in">i</span>) </span><br><span class="line">    isPrim[<span class="built_in">j</span>] = <span class="built_in">false</span>;</span><br></pre></td></tr></table></figure><p>这样可以把 <code>i</code> 的整数倍都标记为 <code>false</code>，但是仍然存在计算冗余。</p><p>比如 <code>n = 25</code>，<code>i = 4</code> 时算法会标记 4 × 2 = 8，4 × 3 = 12 等等数字，但是这两个数字已经被 <code>i = 2</code> 和 <code>i = 3</code> 的 2 × 4 和 3 × 4 标记了。</p><p>我们可以稍微优化一下，让 <code>j</code> 从 <code>i</code> 的平方开始遍历，而不是从 <code>2 * i</code> 开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; n; j += i) </span><br><span class="line">    isPrim[j] = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><p>这样，素数计数的算法就高效实现了，其实这个算法有一个名字，叫做 Sieve of Eratosthenes。看下完整的最终代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] isPrim = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">    Arrays.fill(isPrim, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; n; i++) </span><br><span class="line">        <span class="keyword">if</span> (isPrim[i]) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; n; j += i) </span><br><span class="line">                isPrim[j] = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (isPrim[i]) count++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第204题计数质数&lt;/p&gt;
&lt;p&gt;统计所有小于非负整数 &lt;em&gt;n&lt;/em&gt; 的质数的数量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>快乐数</title>
    <link href="http://yorxika.github.io/2020/02/07/%E5%BF%AB%E4%B9%90%E4%B9%A6/"/>
    <id>http://yorxika.github.io/2020/02/07/%E5%BF%AB%E4%B9%90%E4%B9%A6/</id>
    <published>2020-02-06T16:37:35.000Z</published>
    <updated>2020-02-06T16:45:08.276Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第202题快乐数</p><p>编写一个算法来判断一个数是不是“快乐数”。</p><p>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p><a id="more"></a><p><strong>示例:</strong> </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">19</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">解释: </span><br><span class="line"><span class="number">12</span> + <span class="number">92</span> = <span class="number">82</span></span><br><span class="line"><span class="number">82</span> + <span class="number">22</span> = <span class="number">68</span></span><br><span class="line"><span class="number">62</span> + <span class="number">82</span> = <span class="number">100</span></span><br><span class="line"><span class="number">12</span> + <span class="number">02</span> + <span class="number">02</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="暴力遍历"><a href="#暴力遍历" class="headerlink" title="暴力遍历"></a>暴力遍历</h3><p>根据在1-9里只有1和7是快乐数，其他的均不是，以此来判断退出循环的条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">7</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">16</span> || n == <span class="number">37</span> || n == <span class="number">58</span> || n == <span class="number">89</span> || n == <span class="number">145</span> || n == <span class="number">42</span> || n == <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            sum = sum + (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n = sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>来自<a href="https://leetcode-cn.com/problems/happy-number/solution/shi-yong-kuai-man-zhi-zhen-si-xiang-zhao-chu-xun-h/" target="_blank" rel="noopener">题解</a></p><p>方法：使用“快慢指针”思想找出循环：“快指针”每次走两步，“慢指针”每次走一步，当二者相等时，即为一个循环周期。此时，判断是不是因为1引起的循环，是的话就是快乐数，否则不是快乐数。</p><p>注意：此题不建议用集合记录每次的计算结果来判断是否进入循环，因为这个集合可能大到无法存储；另外，也不建议使用递归，同理，如果递归层次较深，会直接导致调用栈崩溃。不要因为这个题目给出的整数是int型而投机取巧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> slow = n, fast = n;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        slow = Square(slow);</span><br><span class="line">        fast = Square(fast);</span><br><span class="line">        fast = Square(fast);</span><br><span class="line">    &#125;<span class="keyword">while</span>(slow != fast);</span><br><span class="line">    <span class="keyword">return</span> slow == <span class="number">1</span> || slow == <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        ans += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第202题快乐数&lt;/p&gt;
&lt;p&gt;编写一个算法来判断一个数是不是“快乐数”。&lt;/p&gt;
&lt;p&gt;一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>数字范围按位与</title>
    <link href="http://yorxika.github.io/2020/02/07/%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E/"/>
    <id>http://yorxika.github.io/2020/02/07/%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E/</id>
    <published>2020-02-06T16:01:58.000Z</published>
    <updated>2020-02-06T16:48:11.656Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第201题数字范围按位与</p><p>给定范围 [m, n]，其中 0 &lt;= m &lt;= n &lt;= 2147483647，返回此范围内所有数字的按位与（包含 m, n 两端点）。</p><a id="more"></a><p><strong>示例 1:</strong> </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">输出: <span class="number">4</span></span><br></pre></td></tr></table></figure><hr><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>按顺序执行按位运算，然后有一个测试算例超时了，在运算时排除全0与全1的数，即到了0xFFFF和0x0就可以返回运算结果了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == Integer.MAX_VALUE)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    <span class="keyword">int</span> ans = m++;</span><br><span class="line">    <span class="keyword">while</span>(m &lt;= n) &#123;</span><br><span class="line">        ans &amp;= m;</span><br><span class="line">        <span class="keyword">if</span>(ans == <span class="number">0</span> || m == Integer.MAX_VALUE)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制1的个数"><a href="#二进制1的个数" class="headerlink" title="二进制1的个数"></a>二进制1的个数</h3><p>来源<a href="https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/solution/shu-zi-fan-wei-an-wei-yu-qu-qi-gao-wei-wu-bian-hua/" target="_blank" rel="noopener">题解</a></p><p>此题其实就是寻找[m,n]范围内二进制数高位（左边）没有变化的数，后面补上0即为所求的结果。</p><p>判断m、n是否相等，如果不相等，m+1会使m的二进制数末位进位，有进位说明m的末位肯定有0的情况，0与任何数相与皆得0，所以结果的末位肯定是0。同理，不断右移1位进行比较，直到最终 m=n 时，说明找到了[m,n]这个范围内高位没有变化的数，左移相同位数得到的结果就是所求的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == Integer.MAX_VALUE || m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span> ; <span class="comment">// 记录移位次数</span></span><br><span class="line">    <span class="keyword">while</span>(m &lt; n)&#123;</span><br><span class="line">        m &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        n &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        count ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n &lt;&lt;= count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制最右边1置0"><a href="#二进制最右边1置0" class="headerlink" title="二进制最右边1置0"></a>二进制最右边1置0</h3><p>有一个方法，可以把最右边的 <code>1</code> 置为 <code>0</code>，举个具体的例子。</p><p>比如十进制的 <code>10</code>，二进制形式是 <code>1010</code>，然后我们只需要把它和 <code>9</code> 进行按位与操作，也就是 <code>10 &amp; 9 = (1010) &amp; (1001) = 1000</code>，也就是把 <code>1010</code> 最右边的 <code>1</code> 置为 <code>0</code>。</p><p>规律就是对于任意一个数 <code>n</code>，然后 <code>n &amp; (n-1)</code> 的结果就是把 <code>n</code> 的最右边的 <code>1</code> 置为 <code>0</code> 。</p><p>也比较好理解，当我们对一个数减 <code>1</code> 的话，比如原来的数是 <code>...1010000</code>，然后减一就会向前借位，直到遇到最右边的第一个 <code>1</code>，变成 <code>...1001111</code>，然后我们把它和原数按位与，就会把从原数最右边 <code>1</code> 开始的位置全部置零了 <code>...10000000</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> zeros = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; m) &#123;</span><br><span class="line">        n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第201题数字范围按位与&lt;/p&gt;
&lt;p&gt;给定范围 [m, n]，其中 0 &amp;lt;= m &amp;lt;= n &amp;lt;= 2147483647，返回此范围内所有数字的按位与（包含 m, n 两端点）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="位运算" scheme="http://yorxika.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>岛屿数量</title>
    <link href="http://yorxika.github.io/2020/02/06/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
    <id>http://yorxika.github.io/2020/02/06/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</id>
    <published>2020-02-05T19:06:56.000Z</published>
    <updated>2020-02-06T15:50:23.941Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第200题 岛屿数量</p><p>给定一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line"><span class="number">11110</span></span><br><span class="line"><span class="number">11010</span></span><br><span class="line"><span class="number">11000</span></span><br><span class="line"><span class="number">00000</span></span><br><span class="line"></span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>在初始化并查集的根节点时，记录所有为<code>1</code>的点的数量，同时将为<code>1</code>的点的根节点初始化为自身，对数组进行遍历，如果遍历时当前点为<code>1</code>，并且其上下左右里有点为<code>1</code>，就意味着相连，合并，并将对应的并查集里的岛屿数减1，最后返回并查集里的岛屿数即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] parents;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = grid.length;</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;</span><br><span class="line">        parents = <span class="keyword">new</span> <span class="keyword">int</span>[row * col];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; row; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; col ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    parents[i * col + j] = i * col + j; <span class="comment">//初始化陆地并查集</span></span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并连通区域是通过find来操作的, 即看这两个节点是不是在一个连通区域内.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> node1, <span class="keyword">int</span> node2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root1 = find(node1);</span><br><span class="line">        <span class="keyword">int</span> root2 = find(node2);</span><br><span class="line">        <span class="keyword">if</span> (root1 != root2) &#123;</span><br><span class="line">            parents[root2] = root1;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (parents[node] != node) &#123;</span><br><span class="line">            <span class="comment">// 当前节点的父节点 指向父节点的父节点.</span></span><br><span class="line">            <span class="comment">// 保证一个连通区域最终的parents只有一个.</span></span><br><span class="line">            parents[node] = parents[parents[node]];</span><br><span class="line">            node = parents[node];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> node1, <span class="keyword">int</span> node2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(node1) == find(node2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> row = grid.length;</span><br><span class="line">    <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    UnionFind uf = <span class="keyword">new</span> UnionFind(grid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; row ; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; col ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                grid[i][j] = <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">if</span>(i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i - <span class="number">1</span>][j] == <span class="string">'1'</span>)</span><br><span class="line">                    uf.union(i * col + j , (i - <span class="number">1</span>) * col + j);</span><br><span class="line">                <span class="keyword">if</span>(i + <span class="number">1</span> &lt; row &amp;&amp; grid[i + <span class="number">1</span>][j] == <span class="string">'1'</span>)</span><br><span class="line">                    uf.union(i * col + j , (i + <span class="number">1</span>) * col + j);</span><br><span class="line">                <span class="keyword">if</span>(j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i][j - <span class="number">1</span>] == <span class="string">'1'</span>)</span><br><span class="line">                    uf.union(i * col + j , i* col + j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(j + <span class="number">1</span> &lt; col &amp;&amp; grid[i][j + <span class="number">1</span>] == <span class="string">'1'</span>)</span><br><span class="line">                    uf.union(i * col + j , i* col + j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uf.count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p>线性扫描整个二维网格，如果一个结点包含 <code>1</code>，则以其为根结点启动深度优先搜索。在深度优先搜索过程中，每个访问过的结点被标记为 <code>0</code>。计数启动深度优先搜索的根结点的数量，即为岛屿的数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> nRow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> nColumn = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    nRow = grid.length;</span><br><span class="line">    nColumn = grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> (row &lt; <span class="number">0</span> || column &lt; <span class="number">0</span> || row &gt;= nRow || column &gt;= nColumn || grid[row][column] == <span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    grid[row][column] = <span class="string">'0'</span>;</span><br><span class="line">    dfs(grid, row - <span class="number">1</span>, column);</span><br><span class="line">    dfs(grid, row + <span class="number">1</span>, column);</span><br><span class="line">    dfs(grid, row, column - <span class="number">1</span>);</span><br><span class="line">    dfs(grid, row, column + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nRow = grid.length;</span><br><span class="line">    nColumn = grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nRow; ++r) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; nColumn; ++c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[r][c] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                ++num;</span><br><span class="line">                dfs(grid, r, c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第200题 岛屿数量&lt;/p&gt;
&lt;p&gt;给定一个由 &lt;code&gt;&amp;#39;1&amp;#39;&lt;/code&gt;（陆地）和 &lt;code&gt;&amp;#39;0&amp;#39;&lt;/code&gt;（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="并查集" scheme="http://yorxika.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>被围绕的区域</title>
    <link href="http://yorxika.github.io/2020/02/06/%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F/"/>
    <id>http://yorxika.github.io/2020/02/06/%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F/</id>
    <published>2020-02-05T18:01:21.000Z</published>
    <updated>2020-02-08T09:28:14.999Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第130题被围绕的区域</p><p>给定一个二维的矩阵，包含 <code>&#39;X&#39;</code> 和 <code>&#39;O&#39;</code>（<strong>字母 O</strong>）。</p><p>找到所有被 <code>&#39;X&#39;</code> 围绕的区域，并将这些区域里所有的 <code>&#39;O&#39;</code> 用 <code>&#39;X&#39;</code> 填充。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">X</span> <span class="meta">X</span> <span class="meta">X</span> <span class="meta">X</span></span><br><span class="line"><span class="meta">X</span> O O <span class="meta">X</span></span><br><span class="line"><span class="meta">X</span> <span class="meta">X</span> O <span class="meta">X</span></span><br><span class="line"><span class="meta">X</span> O <span class="meta">X</span> <span class="meta">X</span></span><br></pre></td></tr></table></figure><p>运行你的函数后，矩阵变为：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">X</span> <span class="meta">X</span> <span class="meta">X</span> <span class="meta">X</span></span><br><span class="line"><span class="meta">X</span> <span class="meta">X</span> <span class="meta">X</span> <span class="meta">X</span></span><br><span class="line"><span class="meta">X</span> <span class="meta">X</span> <span class="meta">X</span> <span class="meta">X</span></span><br><span class="line"><span class="meta">X</span> O <span class="meta">X</span> <span class="meta">X</span></span><br></pre></td></tr></table></figure><p><strong>解释:</strong></p><p>被围绕的区间不会存在于边界上，换句话说，任何边界上的 <code>&#39;O&#39;</code> 都不会被填充为 <code>&#39;X&#39;</code>。 任何不在边界上，或不与边界上的 <code>&#39;O&#39;</code> 相连的 <code>&#39;O&#39;</code> 最终都会被填充为 <code>&#39;X&#39;</code>。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</p><hr><h3 id="DFS递归"><a href="#DFS递归" class="headerlink" title="DFS递归"></a>DFS递归</h3><p>从边界出发吧，先把边界上和 <code>O</code> 连通点找到, 把这些变成 <code>#</code>,然后遍历整个 <code>board</code> 把 <code>O</code> 变成 <code>X</code>, 把 <code>#</code> 变成 <code>O</code><br>最上、下或最左、右，且是<code>O</code>的是为边界,在DFS中,已经被置为不能访问标识的无需再DFS最后遍历中，无需再遍历边界条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> row = board.length;</span><br><span class="line">    <span class="keyword">int</span> col = board[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= row - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= col - <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> isEdge = i == <span class="number">0</span> || j == <span class="number">0</span> || i == row - <span class="number">1</span> || j == col -<span class="number">1</span> ;</span><br><span class="line">            <span class="keyword">if</span>(isEdge &amp;&amp; board[i][j] == <span class="string">'O'</span>)</span><br><span class="line">                surround(board,i,j);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= row - <span class="number">1</span> ; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= col - <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">'O'</span>)</span><br><span class="line">                board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">'#'</span>)</span><br><span class="line">                board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">surround</span><span class="params">(<span class="keyword">char</span>[][] board , <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= board.length || j &gt;= board[<span class="number">0</span>].length || board[i][j] == <span class="string">'X'</span> || board[i][j] == <span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    board[i][j] = <span class="string">'#'</span>;</span><br><span class="line">    surround(board,i - <span class="number">1</span>,j);</span><br><span class="line">    surround(board,i + <span class="number">1</span>,j);</span><br><span class="line">    surround(board,i ,j - <span class="number">1</span>);</span><br><span class="line">    surround(board,i , j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>来源<a href="https://leetcode-cn.com/problems/surrounded-regions/solution/bfsdi-gui-dfsfei-di-gui-dfsbing-cha-ji-by-ac_pipe/" target="_blank" rel="noopener">题解</a></p><p>并查集常用来解决连通性的问题，即将一个图中连通的部分划分出来。当我们判断图中两个点之间是否存在路径时，就可以根据判断他们是否在一个连通区域。 而这道题我们其实求解的就是和边界的 <em>O</em> 在一个连通区域的的问题。</p><p>并查集的思想就是，同一个连通区域内的所有点的根节点是同一个。将每个点映射成一个数字。先假设每个点的根节点就是他们自己，然后我们以此输入连通的点对，然后将其中一个点的根节点赋成另一个节点的根节点，这样这两个点所在连通区域又相互连通了。<br>并查集的主要操作有：</p><ul><li><code>find(int m)</code>：这是并查集的基本操作，查找 <em>m</em> 的根节点。</li><li><code>isConnected(int m,int n)</code>：判断 m，<em>n</em> 两个点是否在一个连通区域。</li><li><code>union(int m,int n)</code>:合并 m，<em>n</em> 两个点所在的连通区域。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] parents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> totalNodes)</span> </span>&#123;</span><br><span class="line">        parents = <span class="keyword">new</span> <span class="keyword">int</span>[totalNodes];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalNodes; i++) &#123;</span><br><span class="line">            parents[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 合并连通区域是通过find来操作的, 即看这两个节点是不是在一个连通区域内.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> node1, <span class="keyword">int</span> node2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root1 = find(node1);</span><br><span class="line">        <span class="keyword">int</span> root2 = find(node2);</span><br><span class="line">        <span class="keyword">if</span> (root1 != root2) &#123;</span><br><span class="line">            parents[root2] = root1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (parents[node] != node) &#123;</span><br><span class="line">            <span class="comment">// 当前节点的父节点 指向父节点的父节点.</span></span><br><span class="line">            <span class="comment">// 保证一个连通区域最终的parents只有一个.</span></span><br><span class="line">            parents[node] = parents[parents[node]];</span><br><span class="line">            node = parents[node];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> node1, <span class="keyword">int</span> node2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(node1) == find(node2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的思路是把所有边界上的 <em>O</em> 看做一个连通区域。遇到 <em>O</em> 就执行并查集合并操作，这样所有的 O 就会被分成两类</p><ul><li>和边界上的 O 在一个连通区域内的。这些 <em>O</em> 我们保留。</li><li>不和边界上的 O 在一个连通区域内的。这些 <em>O</em> 就是被包围的，替换。</li></ul><p>由于并查集我们一般用一维数组来记录，方便查找 <code>parants</code>，所以我们将二维坐标用 <code>node</code> 函数转化为一维坐标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rows = board.length;</span><br><span class="line">        <span class="keyword">int</span> cols = board[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用一个虚拟节点, 边界上的O 的父节点都是这个虚拟节点</span></span><br><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(rows * cols + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> dummyNode = rows * cols;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                    <span class="comment">// 遇到O进行并查集操作合并</span></span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span> || i == rows - <span class="number">1</span> || j == <span class="number">0</span> || j == cols - <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// 边界上的O,把它和dummyNode 合并成一个连通区域.</span></span><br><span class="line">                        uf.union(node(i, j), dummyNode);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 和上下左右合并成一个连通区域.</span></span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; board[i - <span class="number">1</span>][j] == <span class="string">'O'</span>)</span><br><span class="line">                            uf.union(node(i, j), node(i - <span class="number">1</span>, j));</span><br><span class="line">                        <span class="keyword">if</span> (i &lt; rows - <span class="number">1</span> &amp;&amp; board[i + <span class="number">1</span>][j] == <span class="string">'O'</span>)</span><br><span class="line">                            uf.union(node(i, j), node(i + <span class="number">1</span>, j));</span><br><span class="line">                        <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; board[i][j - <span class="number">1</span>] == <span class="string">'O'</span>)</span><br><span class="line">                            uf.union(node(i, j), node(i, j - <span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">if</span> (j &lt; cols - <span class="number">1</span> &amp;&amp; board[i][j + <span class="number">1</span>] == <span class="string">'O'</span>)</span><br><span class="line">                            uf.union(node(i, j), node(i, j + <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uf.isConnected(node(i, j), dummyNode)) &#123;</span><br><span class="line">                    <span class="comment">// 和dummyNode 在一个连通区域的,那么就是O；</span></span><br><span class="line">                    board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">node</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * cols + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集有关补充"><a href="#并查集有关补充" class="headerlink" title="并查集有关补充"></a>并查集有关补充</h3><p>来自<a href="https://blog.csdn.net/liujian20150808/article/details/50848646" target="_blank" rel="noopener">文章</a></p><p>首先在地图上给你若干个城镇，这些城镇都可以看作点，然后告诉你哪些对城镇之间是有道路直接相连的。最后要解决的是整幅图的连通性问题。比如随意给你两个点，让你判断它们是否连通，或者问你整幅图一共有几个连通分支，也就是被分成了几个互相独立的块。像畅通工程这题，问还需要修几条路，实质就是求有几个连通分支。如果是1个连通分支，说明整幅图上的点都连起来了，不用再修路了；如果是2个连通分支，则只要再修1条路，从两个分支中各选一个点，把它们连起来，那么所有的点都是连起来的了；如果是3个连通分支，则只要再修两条路……</p><p>以下面这组数据输入数据来说明</p><p>4 2 1 3 4 3</p><p>第一行告诉你，一共有4个点，2条路。下面两行告诉你，1、3之间有条路，4、3之间有条路。那么整幅图就被分成了1-3-4和2两部分。只要再加一条路，把2和其他任意一个点连起来，畅通工程就实现了，那么这个这组数据的输出结果就是1。好了，现在编程实现这个功能吧，城镇有几百个，路有不知道多少条，而且可能有回路。 这可如何是好？</p><p>并查集由一个整数型的数组和两个函数构成。数组pre[]记录了每个点的前导点是什么，函数find是查找，join是合并。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pre[<span class="number">1000</span> ];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span>                                       <span class="comment">//查找根节点</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> r=x;</span><br><span class="line">    <span class="keyword">while</span> ( pre[r] != r )                           <span class="comment">//返回根节点 r</span></span><br><span class="line">          r=pre[r];</span><br><span class="line">    <span class="keyword">int</span> i=x , j ;</span><br><span class="line">    <span class="keyword">while</span>( i != r )                                   <span class="comment">//路径压缩</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">         j = pre[ i ]; <span class="comment">// 在改变上级之前用临时变量  j 记录下他的值 </span></span><br><span class="line">         pre[ i ]= r ; <span class="comment">//把上级改为根节点</span></span><br><span class="line">         i=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span>                           <span class="comment">//判断x y是否连通，</span></span></span><br><span class="line"><span class="function">                                         <span class="comment">//如果已经连通，就不用管了 如果不连通，就把它们所在的连通分支合并起,</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=find(x),fy=find(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)</span><br><span class="line">        pre[fx ]=fy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了解释并查集的原理，我将举一个更有爱的例子。 话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？</p><p>我们可以在每个朋友圈内推举出一个比较有名望的人，作为该圈子的代表人物，这样，每个圈子就可以这样命名“齐达内朋友之队”“罗纳尔多朋友之队”……两人只要互相对一下自己的队长是不是同一个人，就可以确定敌友关系了。</p><p>但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。</p><p><img src="http://hi.csdn.net/attachment/201107/29/0_1311901712oy9f.gif" alt="img"></p><p>下面我们来看并查集的实现。 int pre[1000]; 这个数组，记录了每个大侠的上级是谁。大侠们从1或者0开始编号（依据题意而定），pre[15]=3就表示15号大侠的上级是3号大侠。如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去。 find这个函数就是找掌门用的，意义再清楚不过了（路径压缩算法先不论，后面再说）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span>                    <span class="comment">//查找我（x）的掌门</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=x;                      <span class="comment">//委托 r 去找掌门</span></span><br><span class="line">    <span class="keyword">while</span> (pre[r ]!=r)           <span class="comment">//如果r的上级不是r自己（也就是说找到的大侠他不是掌门 = =）</span></span><br><span class="line">    r=pre[r ] ;                 <span class="comment">// r 就接着找他的上级，直到找到掌门为止。</span></span><br><span class="line">    <span class="keyword">return</span>  r ;                <span class="comment">//掌门驾到~~~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看join函数，就是在两个点之间连一条线，这样一来，原先它们所在的两个板块的所有点就都可以互通了。这在图上很好办，画条线就行了。但我们现在是用并查集来描述武林中的状况的，一共只有一个pre[]数组，该如何实现呢？ 还是举江湖的例子，假设现在武林中的形势如图所示。虚竹小和尚与周芷若MM是我非常喜欢的两个人物，他们的终极boss分别是玄慈方丈和灭绝师太，那明显就是两个阵营了。我不希望他们互相打架，就对他俩说：“你们两位拉拉勾，做好朋友吧。”他们看在我的面子上，同意了。这一同意可非同小可，整个少林和峨眉派的人就不能打架了。这么重大的变化，可如何实现呀，要改动多少地方？其实非常简单，我对玄慈方丈说：“大师，麻烦你把你的上级改为灭绝师太吧。这样一来，两派原先的所有人员的终极boss都是师太，那还打个球啊！反正我们关心的只是连通性，门派内部的结构不要紧的。”玄慈一听肯定火大了：“我靠，凭什么是我变成她手下呀，怎么不反过来？我抗议！”抗议无效，上天安排的，最大。反正谁加入谁效果是一样的，我就随手指定了一个。这段函数的意思很明白了吧？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span>          <span class="comment">//我想让虚竹和周芷若做朋友</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=find(x),fy=find(y);         <span class="comment">//虚竹的老大是玄慈，芷若MM的老大是灭绝</span></span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)                         <span class="comment">//玄慈和灭绝显然不是同一个人</span></span><br><span class="line">    pre[fx ]=fy;                       <span class="comment">//方丈只好委委屈屈地当了师太的手下啦</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看路径压缩算法。建立门派的过程是用join函数两个人两个人地连接起来的，谁当谁的手下完全随机。最后的树状结构会变成什么胎唇样，我也完全无法预计，一字长蛇阵也有可能。这样查找的效率就会比较低下。最理想的情况就是所有人的直接上级都是掌门，一共就两级结构，只要找一次就找到掌门了。哪怕不能完全做到，也最好尽量接近。这样就产生了路径压缩算法。 设想这样一个场景：两个互不相识的大侠碰面了，想知道能不能揍。 于是赶紧打电话问自己的上级：“你是不是掌门？” 上级说：“我不是呀，我的上级是谁谁谁，你问问他看看。” 一路问下去，原来两人的最终boss都是东厂曹公公。 “哎呀呀，原来是记己人，西礼西礼，在下三营六组白面葫芦娃!” “幸会幸会，在下九营十八组仙子狗尾巴花！” 两人高高兴兴地手拉手喝酒去了。 “等等等等，两位同学请留步，还有事情没完成呢！”我叫住他俩。 “哦，对了，还要做路径压缩。”两人醒悟。 白面葫芦娃打电话给他的上级六组长：“组长啊，我查过了，其习偶们的掌门是曹公公。不如偶们一起及接拜在曹公公手下吧，省得级别太低，以后查找掌门麻环。” “唔，有道理。” 白面葫芦娃接着打电话给刚才拜访过的三营长……仙子狗尾巴花也做了同样的事情。 这样，查询中所有涉及到的人物都聚集在曹公公的直接领导下。每次查询都做了优化处理，所以整个门派树的层数都会维持在比较低的水平上。路径压缩的代码，看得懂很好，看不懂也没关系，直接抄上用就行了。总之它所实现的功能就是这么个意思。</p><p><img src="http://hi.csdn.net/attachment/201107/29/0_131190167189S8.gif" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第130题被围绕的区域&lt;/p&gt;
&lt;p&gt;给定一个二维的矩阵，包含 &lt;code&gt;&amp;#39;X&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;O&amp;#39;&lt;/code&gt;（&lt;strong&gt;字母 O&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;找到所有被 &lt;code&gt;&amp;#39;X&amp;#39;&lt;/code&gt; 围绕的区域，并将这些区域里所有的 &lt;code&gt;&amp;#39;O&amp;#39;&lt;/code&gt; 用 &lt;code&gt;&amp;#39;X&amp;#39;&lt;/code&gt; 填充。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="深度优先搜索" scheme="http://yorxika.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
      <category term="并查集" scheme="http://yorxika.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>最大数</title>
    <link href="http://yorxika.github.io/2020/01/24/%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <id>http://yorxika.github.io/2020/01/24/%E6%9C%80%E5%A4%A7%E6%95%B0/</id>
    <published>2020-01-24T13:31:53.000Z</published>
    <updated>2020-01-24T13:35:07.125Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第179题最大数</p><p>给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。</p><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">10</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">210</span></span><br></pre></td></tr></table></figure><a id="more"></a><hr><p>首先，我们将每个整数变成字符串。然后进行排序。</p><pre><code class="JAVA"><span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{    Integer[] n = <span class="keyword">new</span> Integer[nums.length];    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length ; i++)        n[i] = nums[i];    Arrays.sort(n, <span class="keyword">new</span> Comparator&lt;Integer&gt;() {        <span class="meta">@Override</span>        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>{            String s1 = o1 + <span class="string">""</span> + o2;            String s2 = o2 + <span class="string">""</span> + o1;            <span class="keyword">return</span>  s2.compareTo(s1);        }    });    StringBuilder ans = <span class="keyword">new</span> StringBuilder();    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length ; i++)        ans.append(n[i]);    String res = ans.toString();     <span class="keyword">return</span> res.charAt(<span class="number">0</span>) == <span class="string">'0'</span> ? <span class="string">"0"</span> : res;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第179题最大数&lt;/p&gt;
&lt;p&gt;给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;210&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>单词拆分</title>
    <link href="http://yorxika.github.io/2020/01/24/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
    <id>http://yorxika.github.io/2020/01/24/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</id>
    <published>2020-01-24T09:04:24.000Z</published>
    <updated>2020-01-24T09:46:10.614Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第139题单词拆分</p><p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict*，判定 *s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><a id="more"></a><p><strong>说明：</strong></p><ul><li>拆分时可以重复使用字典中的单词。</li><li>你可以假设字典中没有重复的单词。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="attr">s</span> = <span class="string">"leetcode"</span>, <span class="attr">wordDict</span> = [<span class="string">"leet"</span>, <span class="string">"code"</span>]</span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">解释: 返回 <span class="literal">true</span> 因为 <span class="string">"leetcode"</span> 可以被拆分成 <span class="string">"leet code"</span>。</span><br></pre></td></tr></table></figure><hr><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>最简单的实现方法是用递归和回溯。为了找到解，我们可以检查字典单词中每一个单词的可能前缀，如果在字典中出现过，那么去掉这个前缀后剩余部分回归调用。同时，如果某次函数调用中发现整个字符串都已经被拆分且在字典中出现过了，函数就返回 <code>true</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.set = <span class="keyword">new</span> HashSet&lt;&gt;(wordDict);</span><br><span class="line">    <span class="keyword">return</span> helper(s,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(String s,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start == s.length())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span> ; i &lt;= s.length(); i++)</span><br><span class="line">        <span class="keyword">if</span>(set.contains(s.substring(start,i)) &amp;&amp; helper(s,i))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><p>题解的看不是很懂，摸了</p><p>在先前的方法中，我们看到许多函数调用都是冗余的，也就是我们会对相同的字符串调用多次回溯函数。为了避免这种情况，我们可以使用记忆化的方法，其中一个 memo<em>m<strong>e</strong>m**o</em> 数组会被用来保存子问题的结果。每当访问到已经访问过的后缀串，直接用 memo<em>m<strong>e</strong>m**o</em> 数组中的值返回而不需要继续调用函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> word_Break(s, <span class="keyword">new</span> HashSet(wordDict), <span class="number">0</span>, <span class="keyword">new</span> Boolean[s.length()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">word_Break</span><span class="params">(String s, Set&lt;String&gt; wordDict, <span class="keyword">int</span> start, Boolean[] memo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == s.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (memo[start] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[start];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> end = start + <span class="number">1</span>; end &lt;= s.length(); end++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wordDict.contains(s.substring(start, end)) &amp;&amp; word_Break(s, wordDict, end, memo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> memo[start] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[start] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="宽度优先搜索"><a href="#宽度优先搜索" class="headerlink" title="宽度优先搜索"></a>宽度优先搜索</h3><p>另一个方法是使用宽度优先搜索。将字符串可视化成一棵树，每一个节点是用 end<em>e<strong>n</strong>d</em> 为结尾的前缀字符串。当两个节点之间的所有节点都对应了字典中一个有效字符串时，两个节点可以被连接。</p><p>为了形成这样的一棵树，我们从给定字符串的第一个字符开始（比方说 s<em>s</em> ），将它作为树的根部，开始找所有可行的以该字符为首字符的可行子串。进一步的，将每一个子字符串的结束字符的下标（比方说 i<em>i</em>）放在队列的尾部供宽搜后续使用。</p><p>每次我们从队列最前面弹出一个元素，并考虑字符串 s(i+1,end)<em>s</em>(<em>i</em>+1,<em>e<strong>n</strong>d</em>) 作为原始字符串，并将当前节点作为树的根。这个过程会一直重复，直到队列中没有元素。如果字符串最后的元素可以作为树的一个节点，这意味着初始字符串可以被拆分成多个给定字典中的子字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(wordDict);</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> [] visit = <span class="keyword">new</span> <span class="keyword">int</span> [s.length()];</span><br><span class="line">    queue.add(<span class="number">0</span>); <span class="comment">//起始位置0入队列</span></span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> start = queue.remove();  <span class="comment">//队首元素出队</span></span><br><span class="line">        <span class="keyword">if</span>(visit[start] == <span class="number">0</span>)&#123;  <span class="comment">//如果这个点没看过</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span> ; i &lt;= s.length() ; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (set.contains(s.substring(start, i))) &#123;</span><br><span class="line">                    queue.add(i); <span class="comment">// 包含字符串的子串，就加入队列</span></span><br><span class="line">                    <span class="keyword">if</span> (i == s.length())  <span class="comment">//能遍历完，说明完成了拆分</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[start] = <span class="number">1</span>;  <span class="comment">//对遍历点做标记，之后拆分到该点的都可以认为是没有完成拆分的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>这题和算法导论上的解答是差不多的</p><p>这个方法的想法是对于给定的字符串（<em>s</em>）可以被拆分成子问题 <em>s</em>1 和 <em>s</em>2 。如果这些子问题都可以独立地被拆分成符合要求的子问题，那么整个问题 <em>s</em> 也可以满足。也就是，如果 “catsanddog” 可以拆分成两个子字符串 “catsand” 和 “dog” 。子问题 “catsand” 可以进一步拆分成 “cats” 和 “and” ，这两个独立的部分都是字典的一部分，所以 “catsand” 满足题意条件，再往前， “catsand” 和 “dog” 也分别满足条件，所以整个字符串 “catsanddog” 也满足条件。</p><p>现在，我们考虑 dp 数组求解的过程。我们使用 <em>n</em>+1 大小数组的 dp ，其中 <em>n</em> 是给定字符串的长度。我们也使用 2 个下标指针 <em>i</em> 和 <em>j</em> ，其中 <em>i</em> 是当前字符串从头开始的子字符串（<em>s</em>′）的长度， <em>j</em> 是当前子字符串（<em>s</em>′）的拆分位置，拆分成 <em>s</em>′(0,<em>j</em>) 和 <em>s</em>′(<em>j</em>+1,<em>i</em>) 。</p><p>为了求出dp 数组，我们初始化 dp[0] 为 true ，这是因为空字符串总是字典的一部分。dp 数组剩余的元素都初始化为 false 。</p><p>我们用下标 <em>i</em> 来考虑所有从当前字符串开始的可能的子字符串。对于每一个子字符串，我们通过下标 <em>j</em> 将它拆分成 <em>s</em>1′ 和 <em>s</em>2′ （注意 <em>i</em> 现在指向 <em>s</em>2′ 的结尾）。为了将dp[<em>i</em>] 数组求出来，我们依次检查每个 dp[<em>j</em>] 是否为 true ，也就是子字符串 <em>s</em>1′ 是否满足题目要求。如果满足，我们接下来检查 <em>s</em>2′ 是否在字典中。如果包含，我们接下来检查 <em>s</em>2′ 是否在字典中，如果两个字符串都满足要求，我们让 dp[<em>i</em>] 为 true ，否则令其为 false 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; wordDictSet=<span class="keyword">new</span> HashSet(wordDict);</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j] &amp;&amp; wordDictSet.contains(s.substring(j, i))) &#123;</span><br><span class="line">                    dp[i] = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第139题单词拆分&lt;/p&gt;
&lt;p&gt;给定一个&lt;strong&gt;非空&lt;/strong&gt;字符串 &lt;em&gt;s&lt;/em&gt; 和一个包含&lt;strong&gt;非空&lt;/strong&gt;单词列表的字典 &lt;em&gt;wordDict*，判定 *s&lt;/em&gt; 是否可以被空格拆分为一个或多个在字典中出现的单词。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="字符串" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="回溯" scheme="http://yorxika.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>从中序与后序遍历构造二叉树</title>
    <link href="http://yorxika.github.io/2020/01/23/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yorxika.github.io/2020/01/23/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-01-23T08:18:54.000Z</published>
    <updated>2020-01-23T08:21:26.430Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第106题从中序与后序遍历构造二叉树</p><p>根据一棵树的中序遍历与后序遍历构造二叉树。</p><p><strong>注意:</strong><br>你可以假设树中没有重复的元素。</p><a id="more"></a><p>例如，给出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">中序遍历 inorder = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br><span class="line">后序遍历 postorder = [<span class="number">9</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>返回如下的二叉树：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><hr><h3 id="递归构造"><a href="#递归构造" class="headerlink" title="递归构造"></a>递归构造</h3><p>思路同上一题，先确定根节点，然后在中序遍历中找根节点的位置，然后分出左子树和右子树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> [] inorder,postorder;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; inorder.length ; i++)</span><br><span class="line">        map.put(inorder[i],i);</span><br><span class="line">    <span class="keyword">this</span>.inorder = inorder;</span><br><span class="line">    <span class="keyword">this</span>.postorder = postorder;</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">0</span>,postorder.length,<span class="number">0</span>,inorder.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span> p_start,<span class="keyword">int</span> p_end,<span class="keyword">int</span> i_start,<span class="keyword">int</span> i_end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p_start == p_end)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(<span class="keyword">this</span>.postorder[p_end - <span class="number">1</span>]);  <span class="comment">//构造根节点</span></span><br><span class="line">    <span class="keyword">int</span> i_root_index = <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.postorder[p_end - <span class="number">1</span>]);  <span class="comment">//得到中序遍历根节点的位置</span></span><br><span class="line">    <span class="keyword">int</span> left = i_root_index - i_start;  <span class="comment">//这一块为根节点的左子树</span></span><br><span class="line">    root.left = helper(p_start , p_start + left,i_start,i_root_index);</span><br><span class="line">    root.right = helper(p_start + left,p_end - <span class="number">1</span>,i_root_index + <span class="number">1</span> , i_end);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第106题从中序与后序遍历构造二叉树&lt;/p&gt;
&lt;p&gt;根据一棵树的中序遍历与后序遍历构造二叉树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;br&gt;你可以假设树中没有重复的元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>从前序与中序遍历构造二叉树</title>
    <link href="http://yorxika.github.io/2020/01/23/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yorxika.github.io/2020/01/23/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-01-23T07:51:59.000Z</published>
    <updated>2020-01-23T08:04:41.726Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第105题从前序与中序遍历构造二叉树</p><p>根据一棵树的前序遍历与中序遍历构造二叉树。</p><a id="more"></a><p><strong>注意:</strong><br>你可以假设树中没有重复的元素。</p><p>例如，给出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前序遍历 preorder = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">中序遍历 inorder = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>返回如下的二叉树：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><hr><h3 id="递归构造"><a href="#递归构造" class="headerlink" title="递归构造"></a>递归构造</h3><p>前序序列的第一个节点为根节点，根据根节点在中序序列里的位置，划分出根节点的左右子树，进一步的递归构造。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">preorder = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">inorder = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br><span class="line">首先根据 preorder 找到根节点是 <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">然后根据根节点将 inorder 分成左子树和右子树</span><br><span class="line">左子树</span><br><span class="line">inorder [<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">右子树</span><br><span class="line">inorder [<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">把相应的前序遍历的数组也加进来</span><br><span class="line">左子树</span><br><span class="line">preorder[<span class="number">9</span>] </span><br><span class="line">inorder [<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">右子树</span><br><span class="line">preorder[<span class="number">20</span> <span class="number">15</span> <span class="number">7</span>] </span><br><span class="line">inorder [<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">现在我们只需要构造左子树和右子树即可，成功把大问题化成了小问题</span><br><span class="line">然后重复上边的步骤继续划分，直到 preorder 和 inorder 都为空，返回 <span class="literal">null</span> 即可</span><br></pre></td></tr></table></figure><p>用一个Map存储中序遍历每一个节点的位置，由此确定对应的左右子树范围。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> [] preorder,inorder;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; inorder.length ;i++)</span><br><span class="line">        map.put(inorder[i],i);</span><br><span class="line">    <span class="keyword">this</span>.preorder = preorder;</span><br><span class="line">    <span class="keyword">this</span>.inorder = inorder;</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">0</span>,preorder.length ,<span class="number">0</span>,inorder.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span> p_start,<span class="keyword">int</span> p_end,<span class="keyword">int</span> i_start,<span class="keyword">int</span> i_end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p_start == p_end)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(<span class="keyword">this</span>.preorder[p_start]);  <span class="comment">//构造根节点</span></span><br><span class="line">    <span class="keyword">int</span> i_root_index = <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.preorder[p_start]);  <span class="comment">//得到中序遍历根节点的位置</span></span><br><span class="line">    <span class="keyword">int</span> left = i_root_index - i_start;  <span class="comment">//这一块为根节点的左子树</span></span><br><span class="line">    root.left = helper(p_start + <span class="number">1</span> , p_start + left + <span class="number">1</span>,i_start,i_root_index);</span><br><span class="line">    root.right = helper(p_start + <span class="number">1</span> + left,p_end,i_root_index + <span class="number">1</span> , i_end);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代-栈"><a href="#迭代-栈" class="headerlink" title="迭代 栈"></a>迭代 栈</h3><p>来源<a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--22/" target="_blank" rel="noopener">题解</a></p><p>我们用一个栈保存已经遍历过的节点，遍历前序遍历的数组，一直作为当前根节点的左子树，直到当前节点和中序遍历的数组的节点相等了，那么我们正序遍历中序遍历的数组，倒着遍历已经遍历过的根节点（用栈的 pop 实现），找到最后一次相等的位置，把它作为该节点的右子树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; roots = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> in = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//先序遍历第一个值作为根节点</span></span><br><span class="line">    TreeNode curRoot = <span class="keyword">new</span> TreeNode(preorder[pre]);</span><br><span class="line">    TreeNode root = curRoot;</span><br><span class="line">    roots.push(curRoot);</span><br><span class="line">    pre++;</span><br><span class="line">    <span class="comment">//遍历前序遍历的数组</span></span><br><span class="line">    <span class="keyword">while</span> (pre &lt; preorder.length) &#123;</span><br><span class="line">        <span class="comment">//出现了当前节点的值和中序遍历数组的值相等，寻找是谁的右子树</span></span><br><span class="line">        <span class="keyword">if</span> (curRoot.val == inorder[in]) &#123;</span><br><span class="line">            <span class="comment">//每次进行出栈，实现倒着遍历</span></span><br><span class="line">            <span class="keyword">while</span> (!roots.isEmpty() &amp;&amp; roots.peek().val == inorder[in]) &#123;</span><br><span class="line">                curRoot = roots.peek();</span><br><span class="line">                roots.pop();</span><br><span class="line">                in++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设为当前的右孩子</span></span><br><span class="line">            curRoot.right = <span class="keyword">new</span> TreeNode(preorder[pre]);</span><br><span class="line">            <span class="comment">//更新 curRoot</span></span><br><span class="line">            curRoot = curRoot.right;</span><br><span class="line">            roots.push(curRoot);</span><br><span class="line">            pre++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则的话就一直作为左子树</span></span><br><span class="line">            curRoot.left = <span class="keyword">new</span> TreeNode(preorder[pre]);</span><br><span class="line">            curRoot = curRoot.left;</span><br><span class="line">            roots.push(curRoot);</span><br><span class="line">            pre++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第105题从前序与中序遍历构造二叉树&lt;/p&gt;
&lt;p&gt;根据一棵树的前序遍历与中序遍历构造二叉树。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>C++学习笔记II</title>
    <link href="http://yorxika.github.io/2020/01/23/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0II/"/>
    <id>http://yorxika.github.io/2020/01/23/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0II/</id>
    <published>2020-01-22T17:42:12.000Z</published>
    <updated>2020-01-22T17:59:06.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>TBC 269</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;友元&quot;&gt;&lt;a href=&quot;#友元&quot; class=&quot;headerlink&quot; title=&quot;友元&quot;&gt;&lt;/a&gt;友元&lt;/h2&gt;&lt;p&gt;TBC 269&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C++" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C/"/>
    
    
      <category term="C++" scheme="http://yorxika.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>阶乘后的零</title>
    <link href="http://yorxika.github.io/2020/01/22/%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/"/>
    <id>http://yorxika.github.io/2020/01/22/%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</id>
    <published>2020-01-22T15:22:59.000Z</published>
    <updated>2020-01-22T15:29:59.093Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第172题阶乘后的零</p><p>给定一个整数 <em>n</em>，返回 <em>n</em>! 结果尾数中零的数量。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">3</span></span><br><span class="line">输出: <span class="number">0</span></span><br><span class="line">解释: <span class="number">3</span>! = <span class="number">6</span>, 尾数中没有零。</span><br></pre></td></tr></table></figure><hr><p>来源于<a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/q172-factorial-trailing-zeroes-by-ronhou/" target="_blank" rel="noopener">题解</a></p><p>计算N的阶乘(<code>N!=1*2*...*N</code>)有多少个后缀0，即计算N!里有多少个10，也就是计算N!里有多少个2和5（<code>数学原理：分解质因数</code>），最后结果即2的个数和5的个数取较小值。因此，得到下面时间复杂度为O(NlogN)的暴力求解的算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> nCountTwo = <span class="number">0</span>, nCountFive = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> value = i;</span><br><span class="line"><span class="keyword">while</span> (value % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">++nCountTwo;</span><br><span class="line">value /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (value % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">++nCountFive;</span><br><span class="line">value /= <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::min(nCountTwo, nCountFive);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不关注其它质因数，用x代替</span></span><br><span class="line"><span class="number">0</span>! = <span class="number">1</span></span><br><span class="line"><span class="number">1</span>! = <span class="number">1</span></span><br><span class="line"><span class="number">2</span>! = <span class="number">2</span>^<span class="number">1</span> * <span class="number">5</span>^<span class="number">0</span> * <span class="number">1</span></span><br><span class="line"><span class="number">3</span>! = <span class="number">2</span>^<span class="number">1</span> * <span class="number">5</span>^<span class="number">0</span> * <span class="number">3</span></span><br><span class="line"><span class="number">4</span>! = <span class="number">2</span>^<span class="number">3</span> * <span class="number">5</span>^<span class="number">0</span> * <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>! = <span class="number">2</span>^<span class="number">3</span> * <span class="number">5</span>^<span class="number">1</span> * <span class="number">3</span></span><br><span class="line"><span class="number">6</span>! = <span class="number">2</span>^<span class="number">4</span> * <span class="number">5</span>^<span class="number">1</span> * <span class="number">3</span>^<span class="number">2</span></span><br><span class="line"><span class="number">7</span>! = <span class="number">2</span>^<span class="number">4</span> * <span class="number">5</span>^<span class="number">1</span> * x</span><br><span class="line"><span class="number">8</span>! = <span class="number">2</span>^<span class="number">7</span> * <span class="number">5</span>^<span class="number">1</span> * x</span><br><span class="line"><span class="number">9</span>! = <span class="number">2</span>^<span class="number">7</span> * <span class="number">5</span>^<span class="number">1</span> * x</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>! = <span class="number">2</span>^<span class="number">8</span> * <span class="number">5</span>^<span class="number">2</span> * x</span><br><span class="line"><span class="number">11</span>! = <span class="number">2</span>^<span class="number">8</span> * <span class="number">5</span>^<span class="number">2</span> * x</span><br><span class="line"><span class="number">12</span>! = <span class="number">2</span>^<span class="number">10</span> * <span class="number">5</span>^<span class="number">2</span> * x</span><br><span class="line"><span class="number">13</span>! = <span class="number">2</span>^<span class="number">10</span> * <span class="number">5</span>^<span class="number">2</span> * x</span><br><span class="line"><span class="number">14</span>! = <span class="number">2</span>^<span class="number">11</span> * <span class="number">5</span>^<span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"><span class="number">15</span>! = <span class="number">2</span>^<span class="number">11</span> * <span class="number">5</span>^<span class="number">3</span> * x</span><br><span class="line"><span class="number">16</span>! = <span class="number">2</span>^<span class="number">15</span> * <span class="number">5</span>^<span class="number">3</span> * x</span><br><span class="line"></span><br><span class="line"><span class="number">24</span>! = <span class="number">5</span>^i * x</span><br><span class="line"></span><br><span class="line"><span class="number">25</span>! = <span class="number">5</span>^(i+<span class="number">2</span>) * x</span><br><span class="line"><span class="number">26</span>! = <span class="number">5</span>^(i+<span class="number">2</span>) * x</span><br><span class="line"><span class="number">27</span>! = <span class="number">5</span>^(i+<span class="number">2</span>) * x</span><br><span class="line"><span class="number">28</span>! = <span class="number">5</span>^(i+<span class="number">2</span>) * x</span><br><span class="line"><span class="number">29</span>! = <span class="number">5</span>^(i+<span class="number">2</span>) * x</span><br><span class="line"></span><br><span class="line"><span class="number">30</span>! = <span class="number">5</span>^(i+<span class="number">3</span>) * x</span><br><span class="line"><span class="number">35</span>! = <span class="number">5</span>^(i+<span class="number">4</span>) * x</span><br><span class="line"><span class="number">40</span>! = <span class="number">5</span>^(i+<span class="number">5</span>) * x</span><br><span class="line"><span class="number">45</span>! = <span class="number">5</span>^(i+<span class="number">6</span>) * x</span><br><span class="line"></span><br><span class="line"><span class="number">49</span>! = <span class="number">5</span>^j * x</span><br><span class="line"><span class="number">50</span>! = <span class="number">5</span>^(j+<span class="number">2</span>) * x</span><br><span class="line"><span class="number">51</span>! = <span class="number">5</span>^(j+<span class="number">2</span>) * x</span><br><span class="line"></span><br><span class="line"><span class="number">74</span>! = <span class="number">5</span>^k * x</span><br><span class="line"><span class="number">75</span>! = <span class="number">5</span>^(k+<span class="number">2</span>) * x</span><br><span class="line"><span class="number">76</span>! = <span class="number">5</span>^(k+<span class="number">2</span>) * x</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line"><span class="number">125</span>! = <span class="number">124</span>! * <span class="number">5</span>^<span class="number">3</span></span><br><span class="line"><span class="number">250</span>! = <span class="number">249</span>! * <span class="number">5</span>^<span class="number">3</span> * <span class="number">2</span></span><br><span class="line"><span class="number">375</span>! = <span class="number">374</span>! * <span class="number">5</span>^<span class="number">3</span> * <span class="number">3</span></span><br><span class="line"><span class="number">500</span>! = <span class="number">499</span>! * <span class="number">5</span>^<span class="number">3</span> * <span class="number">4</span></span><br><span class="line"><span class="number">625</span>! = <span class="number">624</span>! * <span class="number">5</span>^<span class="number">4</span></span><br></pre></td></tr></table></figure><p>从上面的数据我们可以看出以下几点</p><ul><li>N!质因数里2的个数总是要比5的个数多，因此此题就变成了求解<code>N!里有多少个质因数5</code>。这里缺少具体的数学证明，不过解决了这道题，基本就能理解为什么2的个数要比5的个数多了，大致上来说就是<code>每两个数字就会多一个质因数2，而每五个数字才多一个质因数5</code>。</li><li>每5个数字就会多一个质因数5。0<del>4的阶乘里没有质因数5，5</del>9的阶乘里有1个质因数5，10~14的阶乘里有2个质因数5，依此类推。</li><li>25!里质因数5的个数要比24!多2个，并不满足上面第3条描述的规律。</li><li>26<del>49的阶乘仍然满足上面第3条描述的规律；50!里质因数5的个数要比49!多2个，不满足上面第3条描述的规律；51</del>74的阶乘仍然满足上面第3条描述的规律；依此类推。</li><li>如果上面第3条规律描述成<code>每5个一组，N!里质因数5的个数要比前一组多一个</code>，那么上面两点就可以整理成：<code>每25(5^2)个一组，N!里质因数5的个数要比前一组再多一个</code>；依此类推，还可以继续划分成125(5^3)一组，625(5^4)一组，等等。</li></ul><p>综上</p><ul><li>N!有多少个后缀0，即N!有多少个质因数5。</li><li>N!有多少个质因数5，即N可以划分成多少组5个数字一组，加上划分成多少组25个数字一组，加上划分多少组成125个数字一组，等等。即<code>Ans = N/5 + N/(5^2) + N/(5^3) + ...</code></li><li><code>Ans = N/5 + N/(5^2) + N/(5^3) + ... = ((N / 5) / 5) / 5 /...</code></li><li>最终算法复杂度为O(logN)，代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        n /= <span class="number">5</span>;</span><br><span class="line">        cnt += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第172题阶乘后的零&lt;/p&gt;
&lt;p&gt;给定一个整数 &lt;em&gt;n&lt;/em&gt;，返回 &lt;em&gt;n&lt;/em&gt;! 结果尾数中零的数量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Excel表列序号</title>
    <link href="http://yorxika.github.io/2020/01/22/Excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/"/>
    <id>http://yorxika.github.io/2020/01/22/Excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/</id>
    <published>2020-01-22T15:00:36.000Z</published>
    <updated>2020-01-22T15:08:48.488Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第171题Excel表列序号</p><p>给定一个Excel表格中的列名称，返回其相应的列序号。</p><a id="more"></a><p>例如，</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; <span class="number">1</span></span><br><span class="line">B -&gt; <span class="number">2</span></span><br><span class="line">C -&gt; <span class="number">3</span></span><br><span class="line">...</span><br><span class="line">Z -&gt; <span class="number">26</span></span><br><span class="line">AA -&gt; <span class="number">27</span></span><br><span class="line">AB -&gt; <span class="number">28</span> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: "A"</span></span><br><span class="line"><span class="section">输出: 1</span></span><br></pre></td></tr></table></figure><hr><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>26进制转换思路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.equals(<span class="string">""</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, len = s.length(),temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">        temp = s.charAt(i) - <span class="string">'A'</span> + <span class="number">1</span>;</span><br><span class="line">        temp *= Math.pow(<span class="number">26</span>,len - i - <span class="number">1</span>);</span><br><span class="line">        sum += temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="倒序遍历"><a href="#倒序遍历" class="headerlink" title="倒序遍历"></a>倒序遍历</h3><p>即从字符串的最高位，即进制转换里的最低位开始转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] c = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = c.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        res = res + mul * (c[i] - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">        mul *= <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第171题Excel表列序号&lt;/p&gt;
&lt;p&gt;给定一个Excel表格中的列名称，返回其相应的列序号。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>比较版本号</title>
    <link href="http://yorxika.github.io/2020/01/21/%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>http://yorxika.github.io/2020/01/21/%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</id>
    <published>2020-01-21T07:52:45.000Z</published>
    <updated>2020-01-21T08:20:30.802Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第165题比较版本号</p><p>比较两个版本号 <em>version1</em> 和 <em>version2<em>。<br>如果 `</em>version1</em> &gt; <em>version2<em><code>返回</code>1<code>，如果</code></em>version1</em> &lt; <em>version2</em><code>返回</code>-1<code>， 除此之外返回</code>0`。</p><a id="more"></a><p>你可以假设版本字符串非空，并且只包含数字和 <code>.</code> 字符。</p><p> <code>.</code> 字符不代表小数点，而是用于分隔数字序列。</p><p>例如，<code>2.5</code> 不是“两个半”，也不是“差一半到三”，而是第二版中的第五个小版本。</p><p>你可以假设版本号的每一级的默认修订版号为 <code>0</code>。例如，版本号 <code>3.4</code> 的第一级（大版本）和第二级（小版本）修订号分别为 <code>3</code> 和 <code>4</code>。其第三级和第四级修订号均为 <code>0</code>。</p><h3 id="利用split分割"><a href="#利用split分割" class="headerlink" title="利用split分割"></a>利用split分割</h3><p>利用split对字符串进行切割，然后转成Int比较。对于已经遍历完的部分直接赋值为0即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareVersion</span><span class="params">(String version1, String version2)</span> </span>&#123;</span><br><span class="line">    String [] temp1 = version1.split(<span class="string">"\\."</span>);</span><br><span class="line">    String [] temp2 = version2.split(<span class="string">"\\."</span>);</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span> , p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> v1,v2;</span><br><span class="line">    <span class="keyword">while</span>(p1 &lt; temp1.length || p2 &lt; temp2.length)&#123;</span><br><span class="line">        String num1 = p1 &lt; temp1.length ? temp1[p1] : <span class="string">"0"</span>;</span><br><span class="line">        String num2 = p2 &lt; temp2.length ? temp2[p2] : <span class="string">"0"</span>;</span><br><span class="line">        v1 = Integer.parseInt(num1);</span><br><span class="line">        v2 = Integer.parseInt(num2);</span><br><span class="line">        <span class="keyword">if</span> (v1 &gt; v2)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v1 &lt; v2)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1++;</span><br><span class="line">            p2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分割后字符串比较"><a href="#分割后字符串比较" class="headerlink" title="分割后字符串比较"></a>分割后字符串比较</h3><p>利用Integer.parseInt在一定程度上增加了运行时间并且当数字过大时，可能会溢出，无法比较，因而可以进一步直接用字符串比较。<br>然而提交后还是一样的用时，我傻了。</p><pre><code class="JAVA"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareVersion</span><span class="params">(String version1, String version2)</span> </span>{    String [] temp1 = version1.split(<span class="string">"\\."</span>);    String [] temp2 = version2.split(<span class="string">"\\."</span>);    <span class="keyword">int</span> p1 = <span class="number">0</span> , p2 = <span class="number">0</span>;    <span class="keyword">int</span> v1,v2;    <span class="keyword">while</span>(p1 &lt; temp1.length || p2 &lt; temp2.length){        String num1 = p1 &lt; temp1.length ? temp1[p1] : <span class="string">"0"</span>;        String num2 = p2 &lt; temp2.length ? temp2[p2] : <span class="string">"0"</span>;        <span class="comment">//去掉前导0</span>        v1 = <span class="number">0</span>;        v2 = <span class="number">0</span>;        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; num1.length(); i++){            <span class="keyword">if</span>(num1.charAt(i) == <span class="string">'0'</span>)                v1++;            <span class="keyword">else</span>                <span class="keyword">break</span>;        }        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; num2.length(); i++){            <span class="keyword">if</span>(num2.charAt(i) == <span class="string">'0'</span>)                v2++;            <span class="keyword">else</span>                <span class="keyword">break</span>;        }        num1 = num1.substring(v1);        num2 = num2.substring(v2);        <span class="comment">//开始比较字符串</span>        <span class="keyword">if</span>(num1.length() &gt; num2.length())            <span class="keyword">return</span> <span class="number">1</span>;        <span class="keyword">else</span> <span class="keyword">if</span>(num2.length() &gt; num1.length())            <span class="keyword">return</span> -<span class="number">1</span>;        <span class="keyword">else</span>        {            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; num1.length() ; i++){                <span class="keyword">if</span> (num1.charAt(i) - num2.charAt(i) &gt; <span class="number">0</span>) {                    <span class="keyword">return</span> <span class="number">1</span>;                } <span class="keyword">else</span> <span class="keyword">if</span> (num1.charAt(i) - num2.charAt(i) &lt; <span class="number">0</span>) {                    <span class="keyword">return</span> -<span class="number">1</span>;                }            }            p1++;            p2++;        }    }    <span class="keyword">return</span> <span class="number">0</span>;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第165题比较版本号&lt;/p&gt;
&lt;p&gt;比较两个版本号 &lt;em&gt;version1&lt;/em&gt; 和 &lt;em&gt;version2&lt;em&gt;。&lt;br&gt;如果 `&lt;/em&gt;version1&lt;/em&gt; &amp;gt; &lt;em&gt;version2&lt;em&gt;&lt;code&gt;返回&lt;/code&gt;1&lt;code&gt;，如果&lt;/code&gt;&lt;/em&gt;version1&lt;/em&gt; &amp;lt; &lt;em&gt;version2&lt;/em&gt;&lt;code&gt;返回&lt;/code&gt;-1&lt;code&gt;， 除此之外返回&lt;/code&gt;0`。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="字符串" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="字符串" scheme="http://yorxika.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>寻找旋转数组中的最小值II</title>
    <link href="http://yorxika.github.io/2020/01/21/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BCII/"/>
    <id>http://yorxika.github.io/2020/01/21/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BCII/</id>
    <published>2020-01-21T07:26:26.000Z</published>
    <updated>2020-01-21T07:30:27.287Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第154题寻找旋转数组中的最小值II</p><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 <code>[0,1,2,4,5,6,7]</code> 可能变为 <code>[4,5,6,7,0,1,2]</code> )。</p><p>请找出其中最小的元素。</p><a id="more"></a><p>注意数组中可能存在重复的元素。</p><p><strong>示例 1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>思路同上一题153，只是在判断相等时直接舍弃即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>,right=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right &amp;&amp; nums[left] &gt;= nums[right]) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left+right) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[right])&#123;</span><br><span class="line">            left = mid+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; nums[right])&#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right--;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[left];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p>可以做一个预处理，保证所有重复数字不在两段里出现即可，再简单化，也就是保证切割的位置不要是重复数字。也就是比较 <code>start</code> 和 <code>end</code> 是否相同，相同的话 <code>end--</code> 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nums[end] == nums[start] &amp;&amp; end &gt; start) &#123;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[end]) &#123;</span><br><span class="line">            start = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            end = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[start];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第154题寻找旋转数组中的最小值II&lt;/p&gt;
&lt;p&gt;假设按照升序排序的数组在预先未知的某个点上进行了旋转。&lt;/p&gt;
&lt;p&gt;( 例如，数组 &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code&gt; 可能变为 &lt;code&gt;[4,5,6,7,0,1,2]&lt;/code&gt; )。&lt;/p&gt;
&lt;p&gt;请找出其中最小的元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="二分查找" scheme="http://yorxika.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>峰值元素</title>
    <link href="http://yorxika.github.io/2020/01/19/%E5%B3%B0%E5%80%BC%E5%85%83%E7%B4%A0/"/>
    <id>http://yorxika.github.io/2020/01/19/%E5%B3%B0%E5%80%BC%E5%85%83%E7%B4%A0/</id>
    <published>2020-01-19T10:19:07.000Z</published>
    <updated>2020-01-21T07:09:18.701Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第162题寻找峰值</p><p>峰值元素是指其值大于左右相邻值的元素。</p><p>给定一个输入数组 <code>nums</code>，其中 <code>nums[i] ≠ nums[i+1]</code>，找到峰值元素并返回其索引。</p><p>数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。</p><a id="more"></a><p>你可以假设 <code>nums[-1] = nums[n] = -∞</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: <span class="number">3</span> 是峰值元素，你的函数应该返回其索引 <span class="number">2</span>。</span><br></pre></td></tr></table></figure><hr><h3 id="一次扫描"><a href="#一次扫描" class="headerlink" title="一次扫描"></a>一次扫描</h3><p>因为 <code>nums[-1]</code> 看做负无穷，所以从第 <code>0</code> 个元素开始，它一定是上升的趋势，由于我们要找峰顶，所以当它第一次出现下降，下降前的值就是我们要找的了。</p><p>如果它一直上升到最后一个值，又因为 <code>nums[n]</code> 看做负无穷，所以最后一个值就可以看做一个峰顶。</p><p>题解的解法比我提交时的答案相对的少了很多无谓的判断及比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//第一次下降</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一直上升</span></span><br><span class="line">    <span class="keyword">return</span> nums.length - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>我们可以将 <em>nums</em> 数组中的任何给定序列视为交替的升序和降序序列。通过利用这一点，以及“可以返回任何一个峰作为结果”的要求，我们可以利用二分查找来找到所需的峰值元素。</p><p>在简单的二分查找中，我们处理的是一个有序数列，并通过在每一步减少搜索空间来找到所需要的数字。在本例中，我们对二分查找进行一点修改。首先从数组 nums中找到中间的元素 <em>m<strong>i</strong>d<em>。若该元素恰好位于降序序列或者一个局部下降坡度中（通过将 <em>n</em></em>u<strong>m</strong>s</em>[<em>i</em>] 与右侧比较判断)，则说明峰值会在本元素的左边。于是，我们将搜索空间缩小为 <em>m<strong>i</strong>d</em> 的左边(包括其本身)，并在左侧子数组上重复上述过程。</p><p>若该元素恰好位于升序序列或者一个局部上升坡度中（通过将 <em>n<strong>u</strong>m**s</em>[<em>i</em>] 与右侧比较判断)，则说明峰值会在本元素的右边。于是，我们将搜索空间缩小为 <em>m<strong>i</strong>d</em> 的右边，并在右侧子数组上重复上述过程。</p><p>就这样，我们不断地缩小搜索空间，直到搜索空间中只有一个元素，该元素即为峰值元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[mid + <span class="number">1</span>])</span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第162题寻找峰值&lt;/p&gt;
&lt;p&gt;峰值元素是指其值大于左右相邻值的元素。&lt;/p&gt;
&lt;p&gt;给定一个输入数组 &lt;code&gt;nums&lt;/code&gt;，其中 &lt;code&gt;nums[i] ≠ nums[i+1]&lt;/code&gt;，找到峰值元素并返回其索引。&lt;/p&gt;
&lt;p&gt;数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="二分查找" scheme="http://yorxika.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>相交链表</title>
    <link href="http://yorxika.github.io/2020/01/17/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>http://yorxika.github.io/2020/01/17/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2020-01-17T15:50:55.000Z</published>
    <updated>2020-01-19T09:35:55.272Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第160题相交链表</p><p>编写一个程序，找到两个单链表相交的起始节点。</p><a id="more"></a><p>如下面的两个链表<strong>：</strong></p><p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" target="_blank" rel="noopener"><img src="/2020/01/17/相交链表/160_statement.png" alt="img"></a></p><p>在节点 c1 开始相交。</p><p><strong>示例 1：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" target="_blank" rel="noopener"><img src="/2020/01/17/相交链表/160_example_1.png" alt="img"></a></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">int</span>ersectVal = <span class="number">8</span>, listA = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>], listB = [<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>], skipA = <span class="number">2</span>, skipB = <span class="number">3</span></span><br><span class="line">输出：Reference of the node with value = <span class="number">8</span></span><br><span class="line">输入解释：相交节点的值为 <span class="number">8</span> （注意，如果两个列表相交则不能为 <span class="number">0</span>）。从各自的表头开始算起，链表 A 为 [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>]，链表 B 为 [<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>]。在 A 中，相交节点前有 <span class="number">2</span> 个节点；在 B 中，相交节点前有 <span class="number">3</span> 个节点。</span><br></pre></td></tr></table></figure><hr><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>遍历链表 <code>A</code> 并将每个结点的地址/引用存储在哈希表中。然后检查链表 <code>B</code> 中的每一个结点 b_i<em>b**i</em> 是否在哈希表中。若在，则 b_i<em>b**i</em> 为相交结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode p1 = headA;</span><br><span class="line">    Set&lt;ListNode&gt; map = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(p1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        map.add(p1);</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p1 = headB;</span><br><span class="line">    <span class="keyword">while</span>(p1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.contains(p1))</span><br><span class="line">            <span class="keyword">return</span> p1;</span><br><span class="line">        <span class="keyword">else</span> p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><ul><li>创建两个指针 pA<em>p**A</em> 和 pB<em>p*</em>B*，分别初始化为链表 <code>A</code> 和 <code>B</code> 的头结点。然后让它们向后逐结点遍历。</li><li>当 pA<em>p**A</em> 到达链表的尾部时，将它重定位到链表 <code>B</code> 的头结点 (你没看错，就是链表 <code>B</code>); 类似的，当 pB<em>p**B</em> 到达链表的尾部时，将它重定位到链表 <code>A</code> 的头结点。</li><li>若在某一时刻 pA<em>p**A</em> 和 pB<em>p**B</em> 相遇，则 pA<em>p**A</em>/pB<em>p**B</em> 为相交结点。</li><li>想弄清楚为什么这样可行, 可以考虑以下两个链表: <code>A={1,3,5,7,9,11}</code> 和 <code>B={2,4,9,11}</code>，相交于结点 <code>9</code>。 由于 <code>B.length (=4) &lt; A.length (=6)</code>，pB<em>p**B</em> 比 pA<em>p**A</em> 少经过 22 个结点，会先到达尾部。将 pB<em>p**B</em> 重定向到 <code>A</code> 的头结点，pA<em>p**A</em> 重定向到 <code>B</code> 的头结点后，pB<em>p**B</em> 要比 pA<em>p**A</em> 多走 <code>2</code> 个结点。因此，它们会同时到达交点。</li><li>如果两个链表存在相交，它们末尾的结点必然相同。因此当 pA<em>p**A</em>/pB<em>p**B</em> 到达链表结尾时，记录下链表 <code>A/B</code> 对应的元素。若最后元素不相同，则两个链表不相交。</li></ul><pre><code class="JAVA"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>{    <span class="keyword">if</span>(headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>)        <span class="keyword">return</span> <span class="keyword">null</span>;    ListNode pa = headA , pb = headB;    <span class="keyword">while</span>(pa != pb){        pa = pa == <span class="keyword">null</span> ? headB : pa.next;        pb = pb == <span class="keyword">null</span> ? headA : pb.next;    }    <span class="keyword">return</span> pa;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第160题相交链表&lt;/p&gt;
&lt;p&gt;编写一个程序，找到两个单链表相交的起始节点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>寻找旋转排序数组中的最小值</title>
    <link href="http://yorxika.github.io/2020/01/17/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <id>http://yorxika.github.io/2020/01/17/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</id>
    <published>2020-01-17T15:42:45.000Z</published>
    <updated>2020-01-17T15:47:23.044Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第153题寻找旋转排序数组中的最小值</p><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。<br>( 例如，数组 <code>[0,1,2,4,5,6,7]</code> 可能变为 <code>[4,5,6,7,0,1,2]</code> )。<br>请找出其中最小的元素。<br>你可以假设数组中不存在重复元素。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>由于给定的数组是有序的，我们就可以使用二分搜索。</p><ol><li>找到数组的中间元素 <code>mid</code>。</li><li>如果<code>中间元素 &gt; 数组第一个元素</code>，我们需要在 <code>mid</code> 右边搜索变化点。</li><li>如果<code>中间元素 &lt; 数组第一个元素</code>，我们需要在 <code>mid</code> 做边搜索变化点。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>,right=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left&lt;right &amp;&amp; nums[left] &gt; nums[right]) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left+right) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid]&gt;=nums[left])&#123;</span><br><span class="line">            left = mid+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[left];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第153题寻找旋转排序数组中的最小值&lt;/p&gt;
&lt;p&gt;假设按照升序排序的数组在预先未知的某个点上进行了旋转。&lt;br&gt;( 例如，数组 &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code&gt; 可能变为 &lt;code&gt;[4,5,6,7,0,1,2]&lt;/code&gt; )。&lt;br&gt;请找出其中最小的元素。&lt;br&gt;你可以假设数组中不存在重复元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="二分查找" scheme="http://yorxika.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>颠倒二进制位</title>
    <link href="http://yorxika.github.io/2020/01/16/%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"/>
    <id>http://yorxika.github.io/2020/01/16/%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/</id>
    <published>2020-01-16T09:05:50.000Z</published>
    <updated>2020-01-16T09:20:18.612Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第190题颠倒二进制位</p><p>颠倒给定的 32 位无符号整数的二进制位。</p><a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">00000010100101000001111010011100</span></span><br><span class="line">输出: <span class="number">00111001011110000010100101000000</span></span><br><span class="line">解释: 输入的二进制串 <span class="number">00000010100101000001111010011100</span> 表示无符号整数 <span class="number">43261596</span>，</span><br><span class="line">      因此返回 <span class="number">964176192</span>，其二进制表示形式为 <span class="number">00111001011110000010100101000000</span>。</span><br></pre></td></tr></table></figure><hr><h3 id="Integer-reverse"><a href="#Integer-reverse" class="headerlink" title="Integer.reverse()"></a>Integer.reverse()</h3><pre><code>public int reverseBits(int n) {    return Integer.reverse(n);}</code></pre><h3 id="错位交换"><a href="#错位交换" class="headerlink" title="错位交换"></a>错位交换</h3><p>其实就是Integer.reverse的源码。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">初始为</span> <span class="string">abcdefghijklmnopqrstuvwxyz012345</span></span><br><span class="line"><span class="string">第一步结果:</span>  <span class="string">qrstuvwxyz012345</span>  <span class="string">abcdefghijklmnop</span>               </span><br><span class="line"><span class="string">第二步结果:</span>  <span class="string">yz012345</span> <span class="string">qrstuvwx</span>   <span class="string">ijklmnop</span> <span class="string">abcdefgh</span>           </span><br><span class="line"><span class="string">第三步结果:</span>  <span class="number">2345</span> <span class="string">yz01</span> <span class="string">uvwx</span> <span class="string">qrst</span>  <span class="string">mnop</span>  <span class="string">ijkl</span> <span class="string">efgh</span> <span class="string">abcd</span> </span><br><span class="line"><span class="string">第四步结果:</span>  <span class="number">45</span> <span class="number">23</span> <span class="number">01</span> <span class="string">yz</span> <span class="string">wx</span> <span class="string">uv</span> <span class="string">st</span> <span class="string">qr</span>  <span class="string">op</span> <span class="string">mn</span> <span class="string">kl</span> <span class="string">ij</span> <span class="string">gh</span> <span class="string">ef</span> <span class="string">cd</span> <span class="string">ab</span> </span><br><span class="line"><span class="string">第五步结果:</span>  <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="string">z</span> <span class="string">y</span> <span class="string">x</span> <span class="string">w</span> <span class="string">v</span> <span class="string">u</span> <span class="string">t</span> <span class="string">s</span> <span class="string">r</span> <span class="string">q</span>  <span class="string">p</span> <span class="string">o</span> <span class="string">n</span> <span class="string">m</span> <span class="string">l</span> <span class="string">k</span> <span class="string">j</span> <span class="string">i</span> <span class="string">h</span> <span class="string">g</span> <span class="string">f</span> <span class="string">e</span> <span class="string">d</span> <span class="string">c</span> <span class="string">b</span> <span class="string">a</span></span><br></pre></td></tr></table></figure><p>这种换法本质是错位法 即创造两个互相错位的数据 这样保证数据不会丢失</p><p>好比两排16个的麻将 一排拿掉后边8个, 再右移8个单位, 另一排拿掉前面8个, 再左移8个单位, 再合并, 那么便得到了一排16个的麻将 但前8和后8的相对位置不变, 但整体位置却前后变换了. 再一排拿掉中间的4个, 右移4位 另一排同理 再合并. 所以这个算法实际上模拟的这个过程. 下面用数字解释:</p><p>如何创造? 先屏蔽 再移位 比如要创造4位错位, 即12345678换位56781234, 那么先屏蔽5678得到12340000, 移位得到00001234, 同理可得56780000, 再加起来得到56781234; 然后再2位错位, 即屏蔽得到56001200, 移位得到00560012, 同理可得78003400, 加起来得到78563412; 再创造一位错位, 即先屏蔽得到70503010,移位得到07050301, 同理可得80604020, 加起来就是最后结果即87654321.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    n = ((n &amp; <span class="number">0xffff0000</span>) &gt;&gt;&gt; <span class="number">16</span>) | ((n &amp; <span class="number">0x0000ffff</span>) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">    n = ((n &amp; <span class="number">0xff00ff00</span>) &gt;&gt;&gt; <span class="number">8</span>) | ((n &amp; <span class="number">0x00ff00ff</span>) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    n = ((n &amp; <span class="number">0xf0f0f0f0</span>) &gt;&gt;&gt; <span class="number">4</span>) | ((n &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span>);</span><br><span class="line">    n = ((n &amp; <span class="number">0xcccccccc</span>) &gt;&gt;&gt; <span class="number">2</span>) | ((n &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    n = ((n &amp; <span class="number">0xaaaaaaaa</span>) &gt;&gt;&gt; <span class="number">1</span>) | ((n &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><p>用一个变量 <code>res</code> 去存储结果，依次得到要转换数字的低位，然后依次保存到 <code>res</code> 中。<code>res</code> 每得到一位后进行左移腾出位置保存下一位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (count &lt; <span class="number">32</span>) &#123;</span><br><span class="line">        res &lt;&lt;= <span class="number">1</span>;  <span class="comment">//res 左移一位空出位置</span></span><br><span class="line">        res |= (n &amp; <span class="number">1</span>); <span class="comment">//得到的最低位加过来</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;<span class="comment">//原数字右移一位去掉已经处理过的最低位</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第190题颠倒二进制位&lt;/p&gt;
&lt;p&gt;颠倒给定的 32 位无符号整数的二进制位。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="位运算" scheme="http://yorxika.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>将有序数组转化为二叉搜索树</title>
    <link href="http://yorxika.github.io/2020/01/16/%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://yorxika.github.io/2020/01/16/%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2020-01-16T06:58:43.000Z</published>
    <updated>2020-01-16T07:02:54.674Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第108题将有序数组转化为二叉搜索树</p><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定有序数组: [<span class="number">-10</span>,<span class="number">-3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],</span><br><span class="line"></span><br><span class="line">一个可能的答案是：[<span class="number">0</span>,<span class="number">-3</span>,<span class="number">9</span>,<span class="number">-10</span>,<span class="literal">null</span>,<span class="number">5</span>]，它可以表示下面这个高度平衡二叉搜索树：</span><br><span class="line"></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">     / \</span><br><span class="line">   <span class="number">-3</span>   <span class="number">9</span></span><br><span class="line">   /   /</span><br><span class="line"> <span class="number">-10</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="中点作为根节点"><a href="#中点作为根节点" class="headerlink" title="中点作为根节点"></a>中点作为根节点</h3><p>数组的中点就是根节点，然后将数组截断，以此类推</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span> || nums == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = nums.length / <span class="number">2</span>;</span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">    <span class="keyword">if</span>(mid &gt; <span class="number">0</span>) </span><br><span class="line">        root.left = sortedArrayToBST(Arrays.copyOfRange(nums,<span class="number">0</span>,mid));</span><br><span class="line">    <span class="keyword">if</span>(mid &lt; nums.length - <span class="number">1</span>)</span><br><span class="line">    root.right = sortedArrayToBST(Arrays.copyOfRange(nums,mid + <span class="number">1</span>,nums.length));</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第108题将有序数组转化为二叉搜索树&lt;/p&gt;
&lt;p&gt;将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。&lt;/p&gt;
&lt;p&gt;本题中，一个高度平衡二叉树是指一个二叉树&lt;em&gt;每个节点&lt;/em&gt; 的左右两个子树的高度差的绝对值不超过 1。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树</title>
    <link href="http://yorxika.github.io/2020/01/16/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yorxika.github.io/2020/01/16/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-01-16T06:33:49.000Z</published>
    <updated>2020-01-16T07:04:57.341Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第110题平衡二叉树</p><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过1。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><p>返回 <code>true</code> 。</p><h3 id="自底向上的递归"><a href="#自底向上的递归" class="headerlink" title="自底向上的递归"></a>自底向上的递归</h3><p>这道题和求树的高度是一样的，只是在递归求解的时候需要判断树的左右高度是否是平衡的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    hlper(root);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hlper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height_l = <span class="number">0</span>,height_r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)</span><br><span class="line">        height_l = <span class="number">1</span> + hlper(root.left);</span><br><span class="line">    <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">        height_r = <span class="number">1</span> + hlper(root.right);</span><br><span class="line">    <span class="keyword">if</span>(Math.abs(height_l - height_r) &gt; <span class="number">1</span>)</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> Math.max(height_l,height_r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分支-限界"><a href="#分支-限界" class="headerlink" title="分支 - 限界"></a>分支 - 限界</h3><p>当递归求解出现左右子树高度相差大于1的情况时，记返回值为-1，这样遇到-1，就可以一路返回上一层，避免了多余的计算。<br>来自<a href="https://leetcode-cn.com/problems/balanced-binary-tree/solution/ti-qian-zu-duan-fa-gei-da-lao-de-xie-fa-xie-zhu-sh/" target="_blank" rel="noopener">题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//-1 即为存在层数相差大于1</span></span><br><span class="line"><span class="keyword">return</span> depth(root)!=-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以当前节点为根节点的树的层数</span></span><br><span class="line"><span class="comment"> * 返回-1的话说明 不满足要求不用求了直接 -1 退出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="comment">//当前节点不存在其层数为0</span></span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//获取左节点的层数</span></span><br><span class="line"><span class="keyword">int</span> left = depth(root.left);</span><br><span class="line">        <span class="comment">//如果层数为-1直接截断</span></span><br><span class="line"><span class="keyword">if</span>(left==-<span class="number">1</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//获取右节点的层数</span></span><br><span class="line"><span class="keyword">int</span> right = depth(root.right);</span><br><span class="line"><span class="comment">//如果层数为-1直接退出</span></span><br><span class="line">        <span class="keyword">if</span>(right==-<span class="number">1</span>)<span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//如果左右节点层数相差大于1 直接返回-1 否则返回真实层数</span></span><br><span class="line">        <span class="keyword">return</span> Math.abs(left-right)&lt;<span class="number">2</span>?Math.max(left,right)+<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第110题平衡二叉树&lt;/p&gt;
&lt;p&gt;给定一个二叉树，判断它是否是高度平衡的二叉树。&lt;/p&gt;
&lt;p&gt;本题中，一棵高度平衡二叉树定义为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个二叉树&lt;em&gt;每个节点&lt;/em&gt; 的左右两个子树的高度差的绝对值不超过1。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>C++学习笔记I</title>
    <link href="http://yorxika.github.io/2020/01/16/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yorxika.github.io/2020/01/16/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-16T03:36:47.000Z</published>
    <updated>2020-01-22T17:41:46.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p><a id="more"></a><p>C++ 引用 vs 指针</p><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><p>引用的好处之一就是在函数调用时在内存中不会生成副本。</p><p>引用总结</p><ul><li>在引用的使用中，单纯给某个变量取个别名是毫无意义的，引用的目的主要用于在函数参数传递中，解决大块数据或对象的传递效率和空间不如意的问题。</li><li>用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过<strong>const</strong>的使用，保证了引用传递的安全性。</li><li>引用与指针的区别是，指针通过某个指针变量指向一个对象后，对它所指向的变量间接操作。程序中使用指针，程序的可读性差；而引用本身就是目标变量的别名，对引用的操作就是对目标变量的操作。</li><li>使用引用的时机。流操作符<strong>&lt;&lt;</strong>和<strong>&gt;&gt;</strong>、赋值操作符<strong>=</strong>的返回值、拷贝构造函数的参数、赋值操作符<strong>=</strong>的参数、其它情况都推荐使用引用。</li><li>声明引用时，必须同时对其进行初始化。</li><li>引用声明完毕后，相当于目标变量名有两个名称，即该目标原名称和引用名，且不能再把该引用名作为其他变量名的别名。ra=1; 等价于 a=1; </li><li>声明一个引用，不是新定义了一个变量，它只表示该引用名是目标变量名的一个别名，它本身不是一种数据类型，因此引用本身不占存储单元，系统也不给引用分配存储单元。故：对引用求地址，就是对目标变量求地址。&amp;ra与&amp;a相等。</li><li>不能建立数组的引用。因为数组是一个由若干个元素所成的集合，所以无法建立一个数组的别名。</li><li>不能建立引用的引用，不能建立指向引用的指针。因为引用不是一种数据类型！！所以没有引用的引用，没有引用的指针。<br>引用就是某一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。</li></ul><p>引用的声明方法：类型标识符<strong>&amp;</strong>引用名=目标变量名；</p><h3 id="引用应用"><a href="#引用应用" class="headerlink" title="引用应用"></a>引用应用</h3><h4 id="引用作为参数"><a href="#引用作为参数" class="headerlink" title="引用作为参数"></a>引用作为参数</h4><p>引用的一个重要作用就是作为函数的参数。以前的C语言中函数参数传递是值传递，如果有大块数据作为参数传递的时候，采用的方案往往是指针，因为这样可以避免将整块数据全部压栈，可以提高程序的效率。但是现在（C++中）又增加了一种同样有效率的选择（在某些特殊情况下又是必须的选择），就是引用。</p><p>递引用给函数与传递指针的效果是一样的。这时，被调函数的形参就成为原来主调函数中的实参变量或对象的一个别名来使用，所以在被调函数中对形参变量的操作就是对其相应的目标对象（在主调函数中）的操作。</p><p>使用引用传递函数的参数，在内存中并没有产生实参的副本，它是直接对实参操作；而使用一般变量传递函数的参数，当发生函数调用时，需要给形参分配存储单元，形参变量是实参变量的副本；如果传递的是对象，还将调用拷贝构造函数。因此，当参数传递的数据较大时，用引用比用一般变量传递参数的效率和所占空间都好。</p><p>使用指针作为函数的参数虽然也能达到与使用引用的效果，但是，在被调函数中同样要给形参分配存储单元，且需要重复使用”*指针变量名”的形式进行运算，这很容易产生错误且程序的阅读性较差；另一方面，在主调函数的调用点处，必须用变量的地址作为实参。而引用更容易使用，更清晰。</p><h4 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h4><p>常引用声明方式：const 类型标识符 &amp;引用名=目标变量名；</p><p>用这种方式声明的引用，不能通过引用对目标变量的值进行修改,从而使引用的目标成为const，达到了引用的安全性。</p><h4 id="引用作为返回值"><a href="#引用作为返回值" class="headerlink" title="引用作为返回值"></a>引用作为返回值</h4><p>要以引用返回函数值，则函数定义时要按以下格式：<br>类型标识符 &amp;函数名（形参列表及类型说明）<br>{函数体}</p><p>说明：<br>（1）以引用返回函数值，定义函数时需要在函数名前加&amp;<br>（2）用引用返回一个函数值的最大好处是，在内存中不产生被返回值的副本。</p><p>引用作为返回值，必须遵守以下规则：<br>（1）不能返回局部变量的引用。这条可以参照Effective C++[1]的Item 31。主要原因是局部变量会在函数返回后被销毁，因此被返回的引用就成为了”无所指”的引用，程序会进入未知状态。 </p><p>（2）不能返回函数内部new分配的内存的引用。这条可以参照Effective C++[1]的Item 31。虽然不存在局部变量的被动销毁问题，可对于这种情况（返回函数内部new分配内存的引用），又面临其它尴尬局面。例如，被函数返回的引用只是作为一个临时变量出现，而没有被赋予一个实际的变量，那么这个引用所指向的空间（由new分配）就无法释放，造成memory leak(内存泄露)。</p><p>（3）可以返回类成员的引用，但最好是const。这条原则可以参照Effective C++[1]的Item 30。主要原因是当对象的属性是与某种业务规则（business rule）相关联的时候，其赋值常常与某些其它属性或者对象的状态有关，因此有必要将赋值操作封装在一个业务规则当中。如果其它对象可以获得该属性的非常量引用（或指针），那么对该属性的单纯赋值就会破坏业务规则的完整性。</p><p>（4）引用与一些操作符的重载：流操作符&lt;&lt;和&gt;&gt;，这两个操作符常常希望被连续使用，例如：cout &lt;&lt; “hello” &lt;&lt; endl;　因此这两个操作符的返回值应该是一个仍然支持这两个操作符的流引用。可选的其它方案包括：返回一个流对象和返回一个流对象指针。但是对于返回一个流对象，程序必须重新（拷贝）构造一个新的流对象，也就是说，连续的两个&lt;&lt;操作符实际上是针对不同对象的！这无法让人接受。对于返回一个流指针则不能连续使用&lt;&lt;操作符。因此，返回一个流对象引用是惟一选择。这个唯一选择很关键，它说明了引用的重要性以及无可替代性，也许这就是C++语言中引入引用这个概念的原因吧。 赋值操作符=。这个操作符象流操作符一样，是可以连续使用的，例如：x = j = 10;或者(x=10)=100;赋值操作符的返回值必须是一个左值，以便可以被继续赋值。因此引用成了这个操作符的惟一返回值选择。</p><p>（5）在另外的一些操作符中，却千万不能返回引用：+-*/ 四则运算符。它们不能返回引用，Effective C++[1]的Item23详细的讨论了这个问题。主要原因是这四个操作符没有side effect，因此，它们必须构造一个对象作为返回值，可选的方案包括：返回一个对象、返回一个局部变量的引用，返回一个new分配的对象的引用、返回一个静态对象引用。根据前面提到的引用作为返回值的三个规则，第2、3两个方案都被否决了。静态对象的引用又因为((a+b) == (c+d))会永远为true而导致错误。所以可选的只剩下返回一个对象了。</p><h4 id="引用和多态"><a href="#引用和多态" class="headerlink" title="引用和多态"></a>引用和多态</h4><p>引用是除指针外另一个可以产生多态效果的手段。这意味着，一个基类的引用可以指向它的派生类实例。</p><p>【例7】：<br>class 　A;<br>class 　B：public A{……};<br>B 　b;<br>A 　&amp;Ref = b;  // 用派生类对象初始化基类对象的引用<br>Ref 只能用来访问派生类对象中从基类继承下来的成员，是基类引用指向派生类。如果A类中定义有虚函数，并且在B类中重写了这个虚函数，就可以通过Ref产生多态效果。</p><h2 id="顶层const与底层const"><a href="#顶层const与底层const" class="headerlink" title="顶层const与底层const"></a>顶层const与底层const</h2><p>2.4.3.Top-Level const<br>As we’ve seen, a pointer is an object that can point to a different object. As a result,we can talk independently about whether a pointer is const and whether the objects to which it can point are const. We use the term <strong>top-level const</strong> to indicate that the pointer itself is a const. When a pointer can point to a const object, we refer to that const as a <strong>low-level const</strong>.</p><p>指针本身是一个对象，因为，指针实际对应着内存单元的一段存储空间，然而，指针所指向的也是一个数据对象，因此，指针是一个常量与指针所指向的是一个常量是两个完全不同的概念， <strong>顶层 const</strong> 表示的是 <strong>指针本身是一个常量</strong>， <strong>底层 const</strong> 表示的是 <strong>指针所指的对象是一个常量</strong>，更一般情况下， <strong>顶层 const 可以表示任意对象是一个常量</strong>，这对于算术类型、类、指针等任何数据类型都是成立的， <strong>底层 const 则与指针和引用等复合类型的基本类型部分有关</strong> ，比较特殊的是，指针既可以是顶层 const 也可以是底层 const ，这一点与其他类型区别明显。</p><p>顶层和底层的翻译很容易让人误解为就只有两层，实际上当然是不是的。首先我们假设有这样的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> Const = <span class="keyword">const</span> T;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> Ptr = T*;</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *** <span class="keyword">const</span> shit = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>要怎么看呢？很简单，不要用const和*，用Const和Ptr来表达，马上明白：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Const&lt;Ptr&lt;Ptr&lt;Ptr&lt;Const&lt;<span class="keyword">int</span>&gt;&gt;&gt;&gt;&gt; shit = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>从右向左读，星号读作pointer，没多一层加一个to，然后最前面加上declare就行。比如对const int *** const shit;，可以读作：declare shit as const pointer to pointer to pointer to const int。</p><h2 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h2><p><code>constexpr</code> 说明符声明可以在编译时求得函数或变量的值。然后这些变量和函数（若给定了合适的函数实参）即可用于仅允许编译时<a href="https://zh.cppreference.com/w/cpp/language/constant_expression" target="_blank" rel="noopener">常量表达式</a>之处。用于对象或非静态成员函数 (C++14 前)声明的 constexpr 说明符蕴含 const。用于函数声明的 constexpr 说明符或 <a href="https://zh.cppreference.com/w/cpp/language/static" target="_blank" rel="noopener">static</a> 成员变量 (C++17 起)蕴含 inline。若函数或函数模板的任何声明拥有 <code>constexpr</code> 说明符，则每个声明必须都含有该说明符。</p><p><strong>constexpr 变量</strong>必须满足下列要求：</p><ul><li>其类型必须是<a href="https://zh.cppreference.com/w/cpp/named_req/LiteralType" target="_blank" rel="noopener"><em>字面类型</em> (<em>LiteralType</em>) </a>。</li><li>它必须被立即初始化</li><li>其初始化的<a href="https://zh.cppreference.com/w/cpp/language/eval_order" target="_blank" rel="noopener">全表达式</a>，包括所有隐式转换、构造函数调用等，都必须是<a href="https://zh.cppreference.com/w/cpp/language/constant_expression" target="_blank" rel="noopener">常量表达式</a></li></ul><p><strong>constexpr 函数</strong>必须满足下列要求：</p><ul><li>它必须非<a href="https://zh.cppreference.com/w/cpp/language/virtual" target="_blank" rel="noopener">虚</a> </li></ul><h2 id="显示强制转换"><a href="#显示强制转换" class="headerlink" title="显示强制转换"></a>显示强制转换</h2><h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><p>用法：static_cast &lt; type-id &gt; ( expression )，</p><p>该运算符把expression转换为type-id类型，但没有运行时类型检查来保证转换的安全性，它主要有如下几种用法：</p><ol><li>用于基本数据类型之间的转换，如把int转换为char，把int转换成enum，但这种转换的安全性需要开发者自己保证（这可以理解为保证数据的精度，即程序员能不能保证自己想要的程序安全），如在把int转换为char时，如果char没有足够的比特位来存放int的值（int&gt;127或int&lt;-127时），那么static_cast所做的只是简单的截断，及简单地把int的低8位复制到char的8位中，并直接抛弃高位。</li><li>把空指针转换成目标类型的空指针</li><li>把任何类型的表达式类型转换成void类型</li><li>用于类层次结构中父类和子类之间指针和引用的转换。</li></ol><p>对于以上第（4）点，存在两种形式的转换，即上行转换（子类到父类）和下行转换（父类到子类）。对于static_cast，上行转换时安全的，而下行转换时不安全的，为什么呢？因为static_cast的转换时粗暴的，它仅根据类型转换语句中提供的信息（尖括号中的类型）来进行转换，这种转换方式对于上行转换，由于子类总是包含父类的所有数据成员和函数成员，因此从子类转换到父类的指针对象可以没有任何顾虑的访问其（指父类）的成员。而对于下行转换为什么不安全，是因为static_cast只是在编译时进行类型坚持，没有运行时的类型检查，具体原理在dynamic_cast中说明。</p><p><strong>一句话概括：</strong></p><p>仅当类型之间可隐式转换时（除类层次间的下行转换以外），static_cast的转换才是合法的，否则将产生错误。（基类指针或引用转换成子类指针或引用为下行转换）</p><p>类层次间的下行转换不能通过隐式转换完成，但是可以通过static_cast完成，但是由于没有动态类型检查，所以是不安全的。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> i=d;    <span class="comment">//编译器的隐式转换，等价于下面这条语句</span></span><br><span class="line"><span class="keyword">int</span> i= <span class="keyword">static_cast</span> &lt;<span class="keyword">int</span>&gt;(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*指针之间的转换*/</span></span><br><span class="line"><span class="keyword">char</span> str[]=<span class="string">"good"</span>;</span><br><span class="line"><span class="keyword">char</span> *ptr=str;</span><br><span class="line"><span class="keyword">int</span> *p=<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span> *&gt;(ptr);<span class="comment">//编译错误，两者之间的转换要显式，如下</span></span><br><span class="line"><span class="keyword">int</span> *p=(<span class="keyword">int</span> *)(ptr);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span>:</span><span class="keyword">public</span> Base&#123;&#125;;</span><br><span class="line">  </span><br><span class="line">Base b;</span><br><span class="line">child c;</span><br><span class="line">c=<span class="keyword">static_cast</span>&lt;child *&gt;(b);  <span class="comment">//下行转换，正确；</span></span><br><span class="line">c=b;    <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure><h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h3><p>只用使用const_cast才能将const性质转换掉。在这种情况下，试图使用其他三种形式的强制转换都会导致编译时的错误。类似地，除了<strong>添加或者删除const特性</strong>，用const_cast符来执行其他任何类型转换，都会引起编译错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> val=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> *ptr=<span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/*为了使ptr指向val，使用const_cast*/</span></span><br><span class="line">ptr=<span class="keyword">const_cast</span>&lt;<span class="keyword">double</span> *&gt;(&amp;val);</span><br></pre></td></tr></table></figure><p>在《C++ primer》（第五版）中是这样介绍const_cast的：</p><p>const_cast只能改变运算对象的底层const</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *pc;</span><br><span class="line"><span class="keyword">char</span> *p=<span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(pc);<span class="comment">//正确但是通过p写值是未定义的行为</span></span><br></pre></td></tr></table></figure><p>对于将常量对象转换成非常量对象的行为，我们一般称其为“去掉const性质（cast away the const）”。一旦我们去掉了某个对象的const性质，编译器就不再阻止我们对该对象进行写操作了。如果对象本身不是一个常量，使用强制类型转换获得写权限是合法的行为。然而如果对象是一个常量，再使用const_cast执行写操作就会产生未定义的后果。</p><p>只有const_cast能改变表达式的常量属性，使用其他形式的命名强制类型转换改变表达式的常量属性都将引发编译器错误。同样的，也不能用const_cast改变表达式的 类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cp;</span><br><span class="line"><span class="comment">//错误：static_cast不能转换const的性质</span></span><br><span class="line"><span class="keyword">char</span> *q=<span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(cp);</span><br><span class="line"><span class="keyword">static_cast</span>&lt;<span class="built_in">string</span>&gt;(cp);<span class="comment">//正确：字符串字面值转换为string类型</span></span><br><span class="line"><span class="keyword">const_cast</span>&lt;<span class="built_in">string</span>&gt;(cp);<span class="comment">//const_cast只改变常量属性</span></span><br></pre></td></tr></table></figure><h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><p>从语法上看，这个操作符仅用于指针类型的转换（返回值是指针）。它用来将一个类型指针转换为另一个类型指针，它只需在编译时重新解释指针的类型。这个操作符基本不考虑转换类型之间是否是相关的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *ip=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *pc=<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(ip);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/*注：必须牢记pc所指的真实对象是一个int而非字符，如果把pc当成普通的字符指针使用</span></span><br><span class="line"><span class="comment">*就可能在运行时发生错误*/</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>滥用 reinterpret_cast 运算符可能很容易带来风险。 除非所需转换本身是低级别的，否则应使用其他强制转换运算符之一。</p><p>在《C++ Primer（中文 第五版 ）》指出reinterpret_cast很危险，不建议使用。</p><h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><p>该运算符把expression转换成type类型的对象。type必须是类型的指针、类的引用或者void*。type和expression的形式要对应，如果type是指针类型，那么expression也必须是一个指针，如果type是一个引用，那么expression也必须是一个引用。</p><p>static_cast只在编译时进行类型检查，与其他强制类型转换不同，dynamic_cast涉及运行时类型检查。dynamic_cast运行时类型检查需要运行时类型信息，而这个信息存储在类的虚函数表中，只有定义了虚函数的类才有虚函数表，故对没有虚函数表的类使用会导致dynamic_cast编译错误。</p><p>所以dynamic_cast主要用于类层次结构中父类和子类之间指针和引用的转换，由于具有运行时类型检查，因此可以保证下行转换的安全性，何为安全性？即转换成功就返回转换后的正确类型指针，如果转换失败，则返回NULL（如果是转换到引用类型的dynamic_cast失败，则抛出bad_cast类型的异常），之所以说static_cast在下行转换时不安全，是因为即使转换失败，它也不返回NULL。</p><p>另外，若绑定到引用或指针的对象类型不是目标类型，则dynamic_cast会失败（这点下面细说）。若转换到指针的失败，dynamic_cast的结果是0值，若转换到引用类型的失败，则抛出一个bad_cast类型的异常。</p><p>dynamic_cast主要符主要用于类层次间的上行转换和下行转换。</p><ol><li>在类层次间上行转换时，dynamic_cast和static_cast的效果一样。因为在公有继承方式（保护继承、私有继承，不能隐式转换）下，派生类的对象/对象指针/对象引用可以赋值给基类的对象/对象指针/对象引用（发生隐式转换），反过来则不行。</li><li>若发生下行转换是安全的，也就是，如果基类指针或者引用的确指向一个派生类对象，这个运算符会传回转型过的指针，若不安全，则会传回空指针。</li></ol><p>针对下行转换，换句话说：向下转换的成功与否还与将要转换的类型有关，即要转换的指针指向的对象的实际类型与转换以后的对象类型一定要相同，否则转换失败。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     Base():b(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">     <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">     <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     Derived():d(<span class="number">2</span>) &#123;&#125;</span><br><span class="line">     <span class="keyword">int</span> d;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Base *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     Derived *pd1=<span class="keyword">static_cast</span>&lt;Derived *&gt;(p);     <span class="comment">//语句1</span></span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;pd1-&gt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;pd1-&gt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     Derived *pd2=<span class="keyword">dynamic_cast</span>&lt;Derived *&gt;(p);    <span class="comment">//语句2</span></span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;pd2-&gt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;pd2-&gt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>若调用函数func的实参p指向一个Derived类型的对象，即<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base *p=<span class="keyword">new</span> Derived;</span><br><span class="line">func(p);</span><br></pre></td></tr></table></figure></li></ol><p>则pd1和pd2是一样的，并且对这两个指针执行 Derived类的任何操作都是安全的，语句1和2都是输出1、2；</p><ol start="2"><li>若p指向的是一个Base类型的对象，即<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base *p=<span class="keyword">new</span> Base;</span><br><span class="line">func(p);</span><br></pre></td></tr></table></figure></li></ol><p>那么pd1指向Base对象的地址，对它进行Derived类型的操作将是不安全的（如访问d），输出d的值时，将会是一个垃圾值；而pd2将是一个空指针，对空指针进行操作，将会发生异常。</p><h2 id="异常处理-try-catch"><a href="#异常处理-try-catch" class="headerlink" title="异常处理(try catch)"></a>异常处理(try catch)</h2><h3 id="C-异常机制概述"><a href="#C-异常机制概述" class="headerlink" title="C++异常机制概述"></a>C++异常机制概述</h3><p>异常是程序在执行期间产生的问题。C++ 异常是指在程序运行时发生的特殊情况，比如尝试除以零的操作。</p><p>异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：<strong>try、catch、throw</strong>。</p><ul><li><strong>throw:</strong> 当问题出现时，程序会抛出一个异常。这是通过使用 <strong>throw</strong> 关键字来完成的。</li><li><strong>catch:</strong> 在您想要处理问题的地方，通过异常处理程序捕获异常。<strong>catch</strong> 关键字用于捕获异常。</li><li><strong>try:</strong> <strong>try</strong> 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。</li></ul><p>如果有一个块抛出一个异常，捕获异常的方法会使用 <strong>try</strong> 和 <strong>catch</strong> 关键字。try 块中放置可能抛出异常的代码，try 块中的代码被称为保护代码。使用 try/catch 语句的语法如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 保护代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName e1 )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// catch 块</span></span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName e2 )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// catch 块</span></span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName eN )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// catch 块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常事件发生时，程序使用throw关键字抛出异常表达式，抛出点称为异常出现点，由操作系统为程序设置当前异常对象，然后执行程序的当前异常处理代码块，在包含了异常出现点的最内层的<strong>try</strong>块，依次匹配catch语句中的异常对象（只进行类型匹配，catch参数有时在catch语句中并不会使用到）。若匹配成功，则执行catch块内的异常处理语句，然后接着执行<strong>try…catch…</strong>块之后的代码。如果在当前的try…catch…块内找不到<strong>匹配</strong>该异常对象的catch语句,则由更外层的try…catch…块来处理该异常；如果当前函数内所有的try…catch…块都不能匹配该异常，则递归回退到调用栈的上一层去处理该异常。如果一直退到主函数main()都不能处理该异常，则调用系统函数terminate()终止程序。</p><p>执行throw语句时，throw表达式将作为对象被复制构造为一个新的对象，称为异常对象。异常对象放在内存的特殊位置，该位置既不是栈也不是堆，在window上是放在线程信息块TIB中。这个构造出来的新对象与本级的try所对应的catch语句进行<strong>类型匹配</strong>，类型匹配的原则在下面介绍。</p><p><img src="/2020/01/16/C-学习笔记/610439-20160117105031678-298323359.png" alt="img"></p><h3 id="异常对象"><a href="#异常对象" class="headerlink" title="异常对象"></a>异常对象</h3><p><strong>异常对象</strong>是一种特殊的对象，编译器依据异常抛出表达式复制构造异常对象，这要求抛出异常表达式不能是一个不完全类型（一个类型在声明之后定义之前为一个不完全类型。不完全类型意味着该类型没有完整的数据与操作描述），而且可以进行复制构造，这就要求异常抛出表达式的复制构造函数（或移动构造函数）、析构函数不能是私有的。</p><p>异常对象不同于函数的局部对象，局部对象在函数调用结束后就被自动销毁，而异常对象将驻留在所有可能被激活的catch语句都能访问到的内存空间中，也即上文所说的TIB。当异常对象与catch语句成功匹配上后，在该catch语句的结束处被自动析构。</p><p>在函数中返回局部变量的引用或指针几乎肯定会造成错误，同样的道理，在throw语句中抛出局部变量的指针或引用也几乎是错误的行为。如果指针所指向的变量在执行catch语句时已经被销毁，对指针进行解引用将发生意想不到的后果。</p><p>throw出一个表达式时，该表达式的静态编译类型将决定异常对象的类型。所以当throw出的是基类指针的解引用，而该指针所指向的实际对象是派生类对象，此时将发生派生类对象切割。</p><p>除了抛出用户自定义的类型外，C++标准库定义了一组类，用户报告标准库函数遇到的问题。这些标准库异常类只定义了几种运算，包括创建或拷贝异常类型对象，以及为异常类型的对象赋值。</p><p>C++ 提供了一系列标准的异常，定义在 **** 中，我们可以在程序中使用这些标准的异常。它们是以父子类层次结构组织起来的，如下所示：</p><p><img src="/2020/01/16/C-学习笔记/exceptions_in_cpp.png" alt="C++ 异常的层次结构"></p><table><thead><tr><th>标准异常类</th><th>描述</th><th>头文件</th></tr></thead><tbody><tr><td>exception</td><td>最通用的异常类，只报告异常的发生而不提供任何额外的信息</td><td>exception</td></tr><tr><td>runtime_error</td><td>只有在运行时才能检测出的错误</td><td>stdexcept</td></tr><tr><td>rang_error</td><td>运行时错误：产生了超出有意义值域范围的结果</td><td>stdexcept</td></tr><tr><td>overflow_error</td><td>运行时错误：计算上溢</td><td>stdexcept</td></tr><tr><td>underflow_error</td><td>运行时错误：计算下溢</td><td>stdexcept</td></tr><tr><td>logic_error</td><td>程序逻辑错误</td><td>stdexcept</td></tr><tr><td>domain_error</td><td>逻辑错误：参数对应的结果值不存在</td><td>stdexcept</td></tr><tr><td>invalid_argument</td><td>逻辑错误：无效参数</td><td>stdexcept</td></tr><tr><td>length_error</td><td>逻辑错误：试图创建一个超出该类型最大长度的对象</td><td>stdexcept</td></tr><tr><td>out_of_range</td><td>逻辑错误：使用一个超出有效范围的值</td><td>stdexcept</td></tr><tr><td>bad_alloc</td><td>内存动态分配错误</td><td>new</td></tr><tr><td>bad_cast</td><td>dynamic_cast类型转换出错</td><td>type_info</td></tr><tr><td>bad_exception</td><td>这在处理 C++ 程序中无法预期的异常时非常有用。</td><td>exception</td></tr><tr><td>bad_typeid</td><td>该异常可以通过 <strong>typeid</strong> 抛出。</td><td>typeinfo</td></tr></tbody></table><h3 id="catch-关键字"><a href="#catch-关键字" class="headerlink" title="catch 关键字"></a>catch 关键字</h3><p>catch语句匹配被抛出的异常对象。如果catch语句的参数是引用类型，则该参数可直接作用于异常对象，即参数的改变也会改变异常对象，而且在catch中<strong>重新抛出异常</strong>时会继续传递这种改变。如果catch参数是传值的，则复制构函数将依据异常对象来构造catch参数对象。在该catch语句结束的时候，先析构catch参数对象，然后再析构异常对象。</p><p>在进行异常对象的匹配时，编译器不会做任何的隐式类型转换或类型提升。除了以下几种情况外，异常对象的类型必须与catch语句的声明类型完全匹配：</p><ul><li>允许从非常量到常量的类型转换。</li><li>允许派生类到基类的类型转换。</li><li>数组被转换成指向数组（元素）类型的指针。</li><li>函数被转换成指向函数类型的指针。</li></ul><p>寻找catch语句的过程中，匹配上的未必是类型完全匹配那项，而在是最靠前的第一个匹配上的catch语句（我称它为最先匹配原则）。所以，派生类的处理代码catch语句应该放在基类的处理catch语句之前，否则先匹配上的总是参数类型为基类的catch语句，而能够精确匹配的catch语句却不能够被匹配上。</p><p>在catch块中，如果在当前函数内无法解决异常，可以继续向外层抛出异常，让外层catch异常处理块接着处理。此时可以使用不带表达式的throw语句将捕获的异常重新抛出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(type x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//做了一部分处理</span></span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被重新抛出的异常对象为保存在TIB中的那个异常对象，与catch的参数对象没有关系，若catch参数对象是引用类型，可能在catch语句内已经对异常对象进行了修改，那么重新抛出的是修改后的异常对象；若catch参数对象是非引用类型，则重新抛出的异常对象并没有受到修改。</p><p>使用catch(…){}可以捕获所有类型的异常，根据最先匹配原则，catch(…){}应该放在所有catch语句的最后面，否则无法让其他可以精确匹配的catch语句得到匹配。通常在catch(…){}语句中执行当前可以做的处理，然后再重新抛出异常。注意，catch中重新抛出的异常只能被外层的catch语句捕获。</p><h3 id="栈展开、RAII"><a href="#栈展开、RAII" class="headerlink" title="栈展开、RAII"></a>栈展开、RAII</h3><p>其实栈展开已经在前面说过，就是从异常抛出点一路向外层函数寻找匹配的catch语句的过程，寻找结束于某个匹配的catch语句或标准库函数terminate。这里重点要说的是栈展开过程中对局部变量的销毁问题。我们知道，在函数调用结束时，函数的局部变量会被系统自动销毁，类似的，throw可能会导致调用链上的语句块提前退出，此时，语句块中的局部变量将按照构成生成顺序的逆序，依次调用析构函数进行对象的销毁。例如下面这个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个没有任何意义的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() :a(<span class="number">0</span>)&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A默认构造函数"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    A(<span class="keyword">const</span>  A&amp; rsh)&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A复制构造函数"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    ~A()&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A析构函数"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>  a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            A a ;</span><br><span class="line">            <span class="keyword">throw</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (A a)</span><br><span class="line">        &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序将输出：<br><img src="/2020/01/16/C-学习笔记/610439-20160117104044460-1503720621.png" alt="img"></p><p>定义变量a时调用了默认构造函数，使用a初始化异常变量时调用了复制构造函数，使用异常变量复制构造catch参数对象时同样调用了复制构造函数。三个构造对应三个析构，也即try语句块中局部变量a自动被析构了。然而，如果a是在自由存储区上分配的内存时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        A * a= <span class="keyword">new</span> A;</span><br><span class="line">        <span class="keyword">throw</span> *a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (A a)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：<br><img src="/2020/01/16/C-学习笔记/610439-20160117104140975-1118592832.png" alt="img"></p><p>同样的三次构造，却只调用了两次的析构函数！说明a的内存在发生异常时并没有被释放掉，发生了内存泄漏。<br><strong>RAII机制有助于解决这个问题</strong>，RAII（Resource acquisition is initialization，资源获取即初始化）。它的思想是<strong>以对象管理资源</strong>。为了更为方便、鲁棒地释放已获取的资源，避免资源死锁，一个办法是把资源数据用对象封装起来。程序发生异常，执行栈展开时，封装了资源的对象会被自动调用其析构函数以释放资源。C++中的智能指针便符合RAII。关于这个问题详细可以看<strong>《Effective C++》条款13.</strong></p><h3 id="异常机制与构造函数"><a href="#异常机制与构造函数" class="headerlink" title="异常机制与构造函数"></a>异常机制与构造函数</h3><p>异常机制的一个合理的使用是在构造函数中。构造函数没有返回值，所以应该使用异常机制来报告发生的问题。更重要的是，构造函数抛出异常表明构造函数还没有执行完，其对应的析构函数不会自动被调用，因此析构函数应该先析构所有所有已初始化的基对象，成员对象，再抛出异常。<br>C++类构造函数初始化列表的异常机制，称为function-try block。一般形式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">myClass::myClass(type1 pa1)</span><br><span class="line">    <span class="keyword">try</span>:  _myClass_val (初始化值)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/*构造函数的函数体 */</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">catch</span> ( exception&amp; err )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 构造函数的异常处理部分 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="异常机制与析构函数"><a href="#异常机制与析构函数" class="headerlink" title="异常机制与析构函数"></a>异常机制与析构函数</h3><p>C++不禁止析构函数向外界抛出异常，但析构函数被期望不向外界函数抛出异常。析构函数中向函数外抛出异常，将直接调用terminator()系统函数终止程序。如果一个析构函数内部抛出了异常，就应该在析构函数的内部捕获并处理该异常，不能让异常被抛出析构函数之外。可以如此处理：</p><ul><li>若析构函数抛出异常，调用std::abort()来终止程序。</li><li>在析构函数中catch捕获异常并作处理。</li></ul><p>关于具体细节，有兴趣可以看《Effective C++》条款08：<strong>别让异常逃离析构函数</strong>。</p><h3 id="noexcept修饰符与noexcept操作符"><a href="#noexcept修饰符与noexcept操作符" class="headerlink" title="noexcept修饰符与noexcept操作符"></a>noexcept修饰符与noexcept操作符</h3><p>noexcept修饰符是C++11新提供的异常说明符，用于声明一个函数不会抛出异常。编译器能够针对不抛出异常的函数进行优化，另一个显而易见的好处是你明确了某个函数不会抛出异常，别人调用你的函数时就知道不用针对这个函数进行异常捕获。在C++98中关于异常处理的程序中你可能会看到这样的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="title">throw</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">double</span> )</span> </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="title">throw</span><span class="params">()</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>这是throw作为函数异常说明，前者表示func（）这个函数可能会抛出int或double类型的异常，后者表示func()函数不会抛出异常。事实上前者很少被使用，在C++11这种做法已经被摒弃，而后者则被C++11的noexcept异常声明所代替：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;...&#125;</span><br><span class="line"><span class="comment">//等价于void func() throw()&#123;...&#125;</span></span><br></pre></td></tr></table></figure><p>在C++11中，编译器并不会在编译期检查函数的noexcept声明，因此，被声明为noexcept的函数若携带异常抛出语句还是可以通过编译的。在函数运行时若抛出了异常，编译器可以选择直接调用terminate()函数来终结程序的运行，因此，noexcept的一个作用是<strong>阻止异常的传播,提高安全性</strong>.</p><p>上面一点提到了，我们不能让异常逃出析构函数，因为那将导致程序的不明确行为或直接终止程序。实际上出于安全的考虑，C++11标准中让类的析构函数默认也是noexcept的。 同样是为了安全性的考虑，经常被析构函数用于释放资源的delete函数，C++11也默认将其设置为noexcept。</p><p>noexcept也可以接受一个常量表达式作为参数，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(常量表达式)</span></span>;</span><br></pre></td></tr></table></figure><p>常量表达式的结果会被转换成bool类型，noexcept(true)表示函数不会抛出异常，noexcept(false)则表示函数有可能会抛出异常。故若你想更改析构函数默认的noexcept声明，可以显式地加上noexcept(false)声明，但这并不会带给你什么好处。</p><h3 id="定义新的异常"><a href="#定义新的异常" class="headerlink" title="定义新的异常"></a>定义新的异常</h3><p>以通过继承和重载 exception 类来定义新的异常。下面的实例演示了如何使用 std::exception 类来实现自己的异常：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyException</span> :</span> <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">what</span> <span class="params">()</span> <span class="keyword">const</span> <span class="title">throw</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"C++ Exception"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">throw</span> MyException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(MyException&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"MyException caught"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(<span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//其他的错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理的性能分析"><a href="#异常处理的性能分析" class="headerlink" title="异常处理的性能分析"></a>异常处理的性能分析</h3><p>异常处理机制的主要环节是运行期类型检查。当抛出一个异常时，必须确定异常是不是从try块中抛出。异常处理机制为了完善异常和它的处理器之间的匹配，需要存储每个异常对象的类型信息以及catch语句的额外信息。由于异常对象可以是任何类型（如用户自定义类型），并且也可以是多态的，获取其动态类型必须要使用运行时类型检查（RTTI），此外还需要运行期代码信息和关于每个函数的结构。</p><p>当异常抛出点所在函数无法解决异常时，异常对象沿着调用链被传递出去，程序的控制权也发生了转移。转移的过程中为了将异常对象的信息携带到程序执行处（如对异常对象的复制构造或者catch参数的析构），在时间和空间上都要付出一定的代价，本身也有不安全性，特别是异常对象是个复杂的类的时候。</p><p>异常处理技术在不同平台以及编译器下的实现方式都不同，但都会给程序增加额外的负担，当异常处理被关闭时，额外的数据结构、查找表、一些附加的代码都不会被生成，正是因为如此，对于明确不抛出异常的函数，我们需要使用noexcept进行声明。</p><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><h3 id="自动对象"><a href="#自动对象" class="headerlink" title="自动对象"></a>自动对象</h3><p>默认情况下，局部变量的生命期局限于所在函数的每次执行期间。只有当定义它的函数被调用时才存在的对象称为自动对象。自动对象在每次调用函数时创建和撤销。该类型局部变量存储在栈上，在动态存储区。<br>局部变量所对应的自动对象在函数控制经过变量定义语句时创建。如果在定义时提供了初始化，那么每次创建对象时，对象都会被赋予指定的初值。对于未初始化的内置类型局部变量，其初值不确定。当函数调用时结束，自动对象就会被撤销。<br>形参也是自动对象，其所占存储空间在函数调用时被创建，在函数结束时撤销。</p><h3 id="局部静态对象"><a href="#局部静态对象" class="headerlink" title="局部静态对象"></a>局部静态对象</h3><p>静态局部变量的意义：</p><ol><li>分配空间在全局数据栈上</li><li>作用域只局限于当前的函数范围内（局部）</li><li>生命周期为整个程序，不会随着当前的函数结束而结束</li><li>首次初始化时赋值生效，以后的初始化赋值自动跳过</li></ol><h3 id="含有可变形参的函数"><a href="#含有可变形参的函数" class="headerlink" title="含有可变形参的函数"></a>含有可变形参的函数</h3><h4 id="initializer-list"><a href="#initializer-list" class="headerlink" title="initializer_list"></a>initializer_list</h4><p>initializer_list是C++11提供的新类型，定义在同名头文件中。<br>用于表示某种特定类型的值的数组，和vector一样，initializer_list也是一种模板类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">initializer_list</span>;</span></span><br></pre></td></tr></table></figure><p>它提供的操作如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">initializer_list</span>&lt;T&gt; lst; </span><br><span class="line"><span class="comment">//默认初始化；T类型元素的空列表</span></span><br><span class="line"><span class="built_in">initializer_list</span>&lt;T&gt; lst&#123;a,b,c...&#125;;</span><br><span class="line"><span class="comment">//lst的元素数量和初始值一样多；lst的元素是对应初始值的副本</span></span><br><span class="line">lst2(lst)   </span><br><span class="line">lst2=lst  </span><br><span class="line"><span class="comment">//拷贝或赋值一个initializer_list对象不会拷贝列表中的元素；拷贝后，原始列表和副本元素共享</span></span><br><span class="line">lst.size()  <span class="comment">//列表中的元素数量</span></span><br><span class="line">lst.begin()  <span class="comment">//返回指向lst中首元素的指针</span></span><br><span class="line">lst.end()   <span class="comment">//返回指向lst中尾元素下一位置的指针</span></span><br></pre></td></tr></table></figure><p>需要注意的是,initializer_list对象中的元素永远是常量值，我们无法改变initializer_list对象中元素的值。并且，拷贝或赋值一个initializer_list对象不会拷贝列表中的元素，其实只是引用而已，原始列表和副本共享元素。</p><p>和使用vector一样，我们也可以使用迭代器访问initializer_list里的元素</p><p>如果想向initializer_list形参中传递一个值的序列，则必须把序列放在一对花括号内：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//expected和actual是string对象</span></span><br><span class="line"><span class="keyword">if</span>(expected != actual)</span><br><span class="line">   error_msg(&#123;<span class="string">"functionX"</span>,expectde,actual&#125;);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   error_msg(&#123;<span class="string">"functionX"</span>,<span class="string">"okay"</span>&#125;);</span><br></pre></td></tr></table></figure><p>而现在c++11添加了initializer_list后，我们可以这样初始化<code>std::vector v = { 1, 2, 3, 4 };</code>,并且，C++11允许构造函数和其他函数把初始化列表当做参数。</p><h4 id="省略符形参"><a href="#省略符形参" class="headerlink" title="省略符形参"></a>省略符形参</h4><p>省略符形参函数定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数求和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x, ...)</span><span class="comment">//用...表示后续参数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个参数列表</span></span><br><span class="line">va_list ap;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> var;</span><br><span class="line"><span class="comment">//请看正文介绍va_start()</span></span><br><span class="line">va_start(ap, x);</span><br><span class="line"><span class="comment">//请看正文介绍va_arg()</span></span><br><span class="line"><span class="keyword">while</span> (var = va_arg(ap, <span class="keyword">int</span>))</span><br><span class="line">&#123;</span><br><span class="line">result += var;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁列表</span></span><br><span class="line">va_end(ap);</span><br><span class="line"><span class="keyword">return</span> result + x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略符形参 <strong>可以接受不同的参数类型</strong>，但是使用起来相对复杂：</p><p><strong>va_list</strong> 在头文件 &lt;stdarg.h&gt; 或 <cstdarg> 中,它是用来存储实参的。<br><strong>va_arg(ap,int)</strong> 方法用来获取实参列表中的实参，“int”是实参的类型。它从首个实参依次获取，将获取到的结果作为返回值返回。<br><strong>va_start(ap,x)</strong> 就是用来设置首个实参，表示取参数的时候从x的下一个参数开始。（不取x）<br><strong>va_end(ap)</strong> 表示用完ap，即要释放内存。</cstdarg></p><p>在获取参数列表的时候，va_list并不能判断实参的总个数，所以需要设置结束参数。<br>在上例中，判断取得的参数是否为0，如果为0，表示参数结尾：while (var = va_arg(ap, int)) 。</p><p>所以在使用函数时，需要以0作为结束参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略符形参不需要用&#123;&#125;，但是要以0做结尾：</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h3><h4 id="返回列表"><a href="#返回列表" class="headerlink" title="返回列表"></a>返回列表</h4><ul><li><p>C++11规定，函数可以返回花括号包围的值的列表</p></li><li><p>如果函数返回的是内置类型，则花括号包围的列表最多包含一个值，而且该值所占空间不应该大于目标类型的空间</p></li><li><p>如果函数返回的是类类型，由类本身定义初始值如何使用</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; func()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"Hello"</span>;</span><br><span class="line">    <span class="built_in">string</span> s2 = <span class="string">"World"</span>;</span><br><span class="line">    <span class="keyword">return</span>&#123; <span class="string">"Info"</span>,s1 ,s2 &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v= func();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = v.begin(); i != v.end(); ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾置返回类型"><a href="#尾置返回类型" class="headerlink" title="尾置返回类型"></a>尾置返回类型</h4><p>尾置返回类型是在C++11标准中新增的语法，可以用于任何函数定义中，旨在方便复杂函数的定义。尾置返回类型跟在形参列表后面并以一个-&gt;符号开头。为了表示函数真正的返回类型跟在形参列表之后，需要在本应该出现返回类型的地方放置一个auto关键字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个返回指向数组的指针的函数</span></span><br><span class="line"><span class="comment">//传统定义</span></span><br><span class="line"><span class="keyword">int</span> (* func1(<span class="keyword">int</span> arr[][<span class="number">3</span>], <span class="keyword">int</span> n))[<span class="number">3</span>] </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;arr[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用尾置返回类型后</span></span><br><span class="line">auto func1(int arr[][3], int n) -&gt; int(*)[3] </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;arr[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用decltype声明函数返回值类型"><a href="#使用decltype声明函数返回值类型" class="headerlink" title="使用decltype声明函数返回值类型"></a>使用decltype声明函数返回值类型</h4><p>有时候我们知道函数的返回值是什么类型，就可以使用decltype来简化函数声明</p><p>例如：下面的arrPtr函数返回一个数组指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> odd[] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> even[] = &#123; <span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">decltype</span>(odd) *arrPtr(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (i%<span class="number">2</span>)? &amp;odd : &amp;even;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> (*arr)[<span class="number">5</span>] =arrPtr(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (end(*arr) - begin(*arr)); ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *(*arr + i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><h3 id="函数指针介绍"><a href="#函数指针介绍" class="headerlink" title="函数指针介绍"></a>函数指针介绍</h3><p>函数指针指向某种特定类型，函数的类型由其参数及返回类型共同决定，与函数名无关。举例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> nLeft,<span class="keyword">int</span> nRight)</span></span>;<span class="comment">//函数定义</span></span><br></pre></td></tr></table></figure><p>该函数类型为int(int,int),要想声明一个指向该类函数的指针，只需用指针替换函数名即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*pf)(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//未初始化</span></span><br></pre></td></tr></table></figure><p>则pf可指向int(int,int)类型的函数。pf前面有*，说明pf是指针，右侧是形参列表，表示pf指向的是函数，左侧为int，说明pf指向的函数返回值为int。则pf可指向int(int,int)类型的函数。而add类型为int(int,int),则pf可指向add函数。</p><h3 id="标准C函数指针"><a href="#标准C函数指针" class="headerlink" title="标准C函数指针"></a>标准C函数指针</h3><h4 id="函数指针定义"><a href="#函数指针定义" class="headerlink" title="函数指针定义"></a>函数指针定义</h4><p>普通函数指针定义<code>int (*pf)(int,int);</code></p><p>使用typedef定义函数指针类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*PF)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;  </span><br><span class="line">PF pf;<span class="comment">//此时，为指向某种类型函数的函数指针类型，而不是具体指针，用它可定义具体指针</span></span><br></pre></td></tr></table></figure><h4 id="函数指针的普通使用"><a href="#函数指针的普通使用" class="headerlink" title="函数指针的普通使用"></a>函数指针的普通使用</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pf = add;  </span><br><span class="line">pf(<span class="number">100</span>,<span class="number">100</span>);<span class="comment">//与其指向的函数用法无异  </span></span><br><span class="line">(*pf)(<span class="number">100</span>,<span class="number">100</span>);<span class="comment">//此处*pf两端括号必不可少</span></span><br></pre></td></tr></table></figure><p>注意：add类型必须与pf可指向的函数类型完全匹配</p><h4 id="函数指针作为形参"><a href="#函数指针作为形参" class="headerlink" title="函数指针作为形参"></a>函数指针作为形参</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二个形参为函数类型，会自动转换为指向此类函数的指针  </span></span><br><span class="line"><span class="function">Void <span class="title">fuc</span><span class="params">(<span class="keyword">int</span> nValue,<span class="keyword">int</span> pf(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//等价的声明，显示的将形参定义为指向函数的指针  </span></span><br><span class="line"><span class="function">Void <span class="title">fuc</span><span class="params">(<span class="keyword">int</span> nValue,<span class="keyword">int</span> (*pf)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span></span>;  </span><br><span class="line"><span class="function">Void <span class="title">fuc</span><span class="params">(<span class="keyword">int</span> nValue,PF)</span></span>;</span><br></pre></td></tr></table></figure><p>形参中有函数指针的函数调用，以fuc为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pf = add;//pf是函数指针  </span><br><span class="line">fuc(1,add);//add自动转换为函数指针  </span><br><span class="line">fuc(1,pf);</span><br></pre></td></tr></table></figure><h4 id="返回指向函数的指针"><a href="#返回指向函数的指针" class="headerlink" title="返回指向函数的指针"></a>返回指向函数的指针</h4><p>使用typedef定义的函数指针类型作为返回参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PF <span class="title">fuc2</span><span class="params">(<span class="keyword">int</span>)</span></span>;<span class="comment">//PF为函数指针类型</span></span><br></pre></td></tr></table></figure><p>直接定义函数指针作为返回参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*fuc2(<span class="keyword">int</span>))(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//显示定义</span></span><br></pre></td></tr></table></figure><p>说明：按照有内向外的顺序阅读此声明语句。fuc2有形参列表，则fuc2是一个函数，其形参为fuc2(int),fuc2前面有*，所以fuc2返回一个指针，指针本身也包含形参列表（int，int），因此指针指向函数，该函数的返回值为int.</p><p>总结：fuc2是一个函数，形参为(int),返回一个指向int(int,int)的函数指针。</p><h3 id="C-函数指针"><a href="#C-函数指针" class="headerlink" title="C++函数指针"></a>C++函数指针</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>由于C++完全兼容C，则C中可用的函数指针用法皆可用于C++</p><p>C++其他函数(指针)定义方式及使用</p><p>typedef与decltype组合定义函数类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(add)</span> add2</span>;</span><br></pre></td></tr></table></figure><p>decltype返回函数类型,add2是与add相同类型的函数，不同的是add2是类型，而非具体函数。</p><p>使用方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add2* pf;<span class="comment">//pf指向add类型的函数指针，未初始化</span></span><br></pre></td></tr></table></figure><p>typedef与decltype组合定义函数指针类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(add)</span>* PF2</span>;<span class="comment">//PF2与1.1PF意义相同  </span></span><br><span class="line">PF2 pf;<span class="comment">// pf指向int(int,int)类型的函数指针，未初始化</span></span><br></pre></td></tr></table></figure><p>使用推断类型关键字auto定义函数类型和函数指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> pf = add;<span class="comment">//pf可认为是add的别名(个人理解)   </span></span><br><span class="line"><span class="keyword">auto</span> *pf = add;<span class="comment">//pf为指向add的指针</span></span><br></pre></td></tr></table></figure><h4 id="函数指针使用"><a href="#函数指针使用" class="headerlink" title="函数指针使用"></a>函数指针使用</h4><p>函数指针形参</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(add)</span> add2</span>;  </span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(add)</span>* PF2</span>;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuc2</span> <span class="params">(add2 add)</span></span>;<span class="comment">//函数类型形参，调用自动转换为函数指针 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuc2</span> <span class="params">(PF2 add)</span></span>;<span class="comment">//函数指针类型形参，传入对应函数(指针)即可</span></span><br></pre></td></tr></table></figure><p>说明：不论形参声明的是函数类型：void fuc2 (add2 add);还是函数指针类型void fuc2 (PF2 add);都可作为函数指针形参声明，在参数传入时，若传入函数名，则将其自动转换为函数指针。</p><p>返回指向函数的指针</p><p>使用auto关键字    </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto fuc2(int)-&gt; int(*)(int,int) //fuc2返回函数指针为int(*)(int,int)</span><br></pre></td></tr></table></figure><p>使用decltype关键字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(add)* fuc2(<span class="keyword">int</span>)<span class="comment">//明确知道返回哪个函数，可用decltype关键字推断其函数类型,</span></span><br></pre></td></tr></table></figure><h4 id="成员函数指针"><a href="#成员函数指针" class="headerlink" title="成员函数指针"></a>成员函数指针</h4><h5 id="普通成员函数指针使用"><a href="#普通成员函数指针使用" class="headerlink" title="普通成员函数指针使用"></a>普通成员函数指针使用</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>//定义类<span class="title">A</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">  </span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> nLeft, <span class="keyword">int</span> nRight)</span>  </span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">       </span>&#123;  </span><br><span class="line">              <span class="keyword">return</span> (nLeft + nRight);  </span><br><span class="line">       &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">  </span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">fuc</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">       </span>&#123;  </span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"Hello  world\n"</span>);  </span><br><span class="line">             </span><br><span class="line">       &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(A::*PF1)</span><span class="params">()</span></span>;<span class="comment">//指针名前需加上类名限定  </span></span><br><span class="line">  </span><br><span class="line">PF1 pf1 = &amp;A::fuc; <span class="comment">//必须有&amp;  </span></span><br><span class="line">  </span><br><span class="line">A a;<span class="comment">//成员函数地址解引用必须附驻与某个对象地址，所以必须创建一个对象</span></span><br><span class="line">  </span><br><span class="line">(a.*pf1)();<span class="comment">//使用成员函数指针调用函数</span></span><br></pre></td></tr></table></figure><h5 id="继承中的函数指针使用"><a href="#继承中的函数指针使用" class="headerlink" title="继承中的函数指针使用"></a>继承中的函数指针使用</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">fuc</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">       </span>&#123;  </span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"Hello fuc()\n"</span>);  </span><br><span class="line">       &#125;  </span><br><span class="line">  </span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">fuc2</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">       </span>&#123;  </span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"Hello A::fuc2()\n"</span>);  </span><br><span class="line">       &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">       <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fuc2</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">       </span>&#123;  </span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"Hello B::fuc2()\n"</span>);  </span><br><span class="line">       &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(A::*PF1)</span><span class="params">()</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(B::*PF2)</span><span class="params">()</span></span>;  </span><br><span class="line">  </span><br><span class="line">PF1 pf1 = &amp;A::fuc;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>         </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">       A a;  </span><br><span class="line">       B b;  </span><br><span class="line">       (a.*pf1)();  <span class="comment">//调用A::fuc  </span></span><br><span class="line">       (b.*pf1)();   <span class="comment">//调用A::fuc  </span></span><br><span class="line">  </span><br><span class="line">       pf1 = &amp;A::fuc2;  </span><br><span class="line">       (a.*pf1)();  <span class="comment">//调用A::fuc2  </span></span><br><span class="line">       (b.*pf1)();  <span class="comment">//调用A::fuc2  </span></span><br><span class="line">  </span><br><span class="line">       PF2 pf2 = &amp;A::fuc2;   </span><br><span class="line">       (b.*pf2)(); <span class="comment">//调用A::fuc2  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C++" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C/"/>
    
    
      <category term="C++" scheme="http://yorxika.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>二叉树展开为链表</title>
    <link href="http://yorxika.github.io/2020/01/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/"/>
    <id>http://yorxika.github.io/2020/01/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</id>
    <published>2020-01-16T01:52:29.000Z</published>
    <updated>2020-01-16T07:05:13.258Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第114二叉树展开为链表</p><p>给定一个二叉树，<a href="https://baike.baidu.com/item/原地算法/8010757" target="_blank" rel="noopener">原地</a>将它展开为链表。</p><p>例如，给定二叉树</p><a id="more"></a><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">5</span></span><br><span class="line"> / \   \</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span></span><br></pre></td></tr></table></figure><p>将其展开为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"> \</span><br><span class="line">  <span class="number">2</span></span><br><span class="line">   \</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">4</span></span><br><span class="line">       \</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">         \</span><br><span class="line">          <span class="number">6</span></span><br></pre></td></tr></table></figure><hr><h3 id="栈的先序遍历"><a href="#栈的先序遍历" class="headerlink" title="栈的先序遍历"></a>栈的先序遍历</h3><p>由题目可知这是一道先序遍历的题目，于是考虑了用栈，通过栈提前保存二叉树的右左子树，然后通过出栈解决。<br>但是与普通的二叉树先序遍历不一样，需要对出栈节点的<strong>左子树赋值为null</strong>，并且保存当前遍历节点。<br>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    TreeNode temp = <span class="keyword">null</span>;</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">        TreeNode tmp = stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            temp.right = tmp;</span><br><span class="line">            temp.left = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>)</span><br><span class="line">            stack.push(tmp.right);</span><br><span class="line">        <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>)</span><br><span class="line">            stack.push(tmp.left);</span><br><span class="line">        temp = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="Morris遍历"></a>Morris遍历</h3><p>来自<a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--26/" target="_blank" rel="noopener">题解</a></p><p>可以发现展开的顺序其实就是二叉树的先序遍历。算法和 94 题中序遍历的 Morris 算法有些神似，我们需要两步完成这道题。</p><ol><li>将左子树插入到右子树的地方</li><li>将原来的右子树接到左子树的最右边节点</li><li>考虑新的右子树的根节点，一直重复上边的过程，直到新的右子树为 null</li></ol><p>可以看图理解下这个过程。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">5</span></span><br><span class="line"> / \   \</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将 1 的左子树插入到右子树的地方</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">2</span>         <span class="number">5</span></span><br><span class="line">     / \         \</span><br><span class="line">    <span class="number">3</span>   <span class="number">4</span>         <span class="number">6</span>        </span><br><span class="line"><span class="comment">//将原来的右子树接到左子树的最右边节点</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">2</span>          </span><br><span class="line">     / \          </span><br><span class="line">    <span class="number">3</span>   <span class="number">4</span>  </span><br><span class="line">         \</span><br><span class="line">          <span class="number">5</span></span><br><span class="line">           \</span><br><span class="line">            <span class="number">6</span></span><br><span class="line">            </span><br><span class="line"> <span class="comment">//将 2 的左子树插入到右子树的地方</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">2</span>          </span><br><span class="line">       \          </span><br><span class="line">        <span class="number">3</span>       <span class="number">4</span>  </span><br><span class="line">                 \</span><br><span class="line">                  <span class="number">5</span></span><br><span class="line">                   \</span><br><span class="line">                    <span class="number">6</span>   </span><br><span class="line">        </span><br><span class="line"> <span class="comment">//将原来的右子树接到左子树的最右边节点</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">2</span>          </span><br><span class="line">       \          </span><br><span class="line">        <span class="number">3</span>      </span><br><span class="line">         \</span><br><span class="line">          <span class="number">4</span>  </span><br><span class="line">           \</span><br><span class="line">            <span class="number">5</span></span><br><span class="line">             \</span><br><span class="line">              <span class="number">6</span>         </span><br><span class="line">  </span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p>于是相应的，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">            root = root.right;  <span class="comment">//左子树为空可以直接进行下一层的遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            TreeNode tmp = root.left;</span><br><span class="line">            <span class="keyword">while</span> (tmp.right != <span class="keyword">null</span>)</span><br><span class="line">                tmp = tmp.right;</span><br><span class="line">            tmp.right = root.right;  <span class="comment">//根节点右子树成为左子树最右节点</span></span><br><span class="line">            root.right = root.left;  <span class="comment">//根节点的右子树成为左子树</span></span><br><span class="line">            root.left = <span class="keyword">null</span>;  <span class="comment">//根节点左子树赋值为空</span></span><br><span class="line">            root = root.right;  <span class="comment">//进行下一个节点的遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>我们可以逆过来进行。</p><p>我们依次遍历 <code>6 5 4 3 2 1</code>，然后每遍历一个节点就将当前节点的右指针更新为上一个节点。</p><p>遍历到 <code>5</code>，把 <code>5</code> 的右指针指向 <code>6</code>。<code>6 &lt;- 5 4 3 2 1</code>。</p><p>遍历到 <code>4</code>，把 <code>4</code> 的右指针指向 <code>5</code>。<code>6 &lt;- 5 &lt;- 4 3 2 1</code>。</p><p>… …</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">5</span></span><br><span class="line"> / \   \</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span></span><br></pre></td></tr></table></figure><p>这样就不会有丢失孩子的问题了，因为更新当前的右指针的时候，当前节点的右孩子已经访问过了。</p><p>而 <code>6 5 4 3 2 1</code> 的遍历顺序其实变形的后序遍历，遍历顺序是右子树-&gt;左子树-&gt;根节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    flatten(root.right);</span><br><span class="line">    flatten(root.left);</span><br><span class="line">    root.right = pre;</span><br><span class="line">    root.left = <span class="keyword">null</span>;</span><br><span class="line">    pre = root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第114二叉树展开为链表&lt;/p&gt;
&lt;p&gt;给定一个二叉树，&lt;a href=&quot;https://baike.baidu.com/item/原地算法/8010757&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原地&lt;/a&gt;将它展开为链表。&lt;/p&gt;
&lt;p&gt;例如，给定二叉树&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="二叉树" scheme="http://yorxika.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>算法导论考试理论部分</title>
    <link href="http://yorxika.github.io/2020/01/07/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E8%80%83%E8%AF%95%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86/"/>
    <id>http://yorxika.github.io/2020/01/07/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E8%80%83%E8%AF%95%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86/</id>
    <published>2020-01-07T13:16:30.000Z</published>
    <updated>2020-01-07T13:31:00.810Z</updated>
    
    <content type="html"><![CDATA[<p>算法的基本概念和性质：</p><p>算法就是任何良定义（well-defined）的计<br>算过程，该过程取某个值或值的集合作为输入（input），并<br>产生某个值或者值的集合作为输出（output）。<br>   —— 算法就是把输入转换成输出的计算步骤。<br>   —— 在计算机科学中，算法是使用计算机解一类问题的精确、有效方法的代名词；<br>   算法是一组有穷的规则，它规定了解决某一特定类型问题 的一系列运算。 （选自《计算机算法基础》） </p><hr><p>渐近表示：O、Ω、Θ记号的定义和相关性质及其证明。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算法的基本概念和性质：&lt;/p&gt;
&lt;p&gt;算法就是任何良定义（well-defined）的计&lt;br&gt;算过程，该过程取某个值或值的集合作为输入（input），并&lt;br&gt;产生某个值或者值的集合作为输出（output）。&lt;br&gt;   —— 算法就是把输入转换成输出的计算步骤。&lt;br&gt;
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法导论" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
      <category term="算法" scheme="http://yorxika.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>主存管理</title>
    <link href="http://yorxika.github.io/2020/01/05/%E4%B8%BB%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yorxika.github.io/2020/01/05/%E4%B8%BB%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2020-01-05T00:43:48.000Z</published>
    <updated>2020-01-05T01:20:04.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主存管理概述"><a href="#主存管理概述" class="headerlink" title="主存管理概述"></a>主存管理概述</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>现代操作系统将主存区分为物理主存和逻辑主存2类。<br>物理主存是共享的物质基础。</p></blockquote><a id="more"></a><h3 id="主存共享方式–分片共享"><a href="#主存共享方式–分片共享" class="headerlink" title="主存共享方式–分片共享"></a>主存共享方式–分片共享</h3><ul><li>大小不等的区域<br>① 分区存储管理<br>② 段式存储管理</li><li>大小相等的区域<br>页式存储管理</li><li>二者结合<br>段页式存储管理</li></ul><p>现代操作系统的主存管理必须实现主存分配、主存保护、虚拟主存等功能，即：</p><ol><li>将逻辑地址映射为物理主存地址</li><li>在多用户之间分配物理主存</li><li>对各用户区的信息提供保护措施</li><li>扩充逻辑主存区</li></ol><h3 id="程序的逻辑组织"><a href="#程序的逻辑组织" class="headerlink" title="程序的逻辑组织"></a>程序的逻辑组织</h3><p>一维地址结构</p><ul><li>一个程序是一个连续、线性的地址结构；</li><li>确定线性地址空间中的指令地址或操作数地址只需要一个信息。</li></ul><p>二维地址结构 </p><ul><li>一个程序由若干个分段组成，每个分段是一个连续的地址区； </li><li>确定线性地址空间中的指令地址或操作数地址需要两个 信息，一是该信息所在的分段，另一个是该信息在段内的偏移量。</li></ul><p><img src="/2020/01/05/主存管理/image-20200105085223070.png" alt="image-20200105085223070"></p><h2 id="主存管理功能"><a href="#主存管理功能" class="headerlink" title="主存管理功能"></a>主存管理功能</h2><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h3><ul><li>物理地址 (绝对地址、实地址)<br>物理地址是计算机主存单元的真实地址，又称为绝对地址或实地址。</li><li>主存空间<br>物理地址的集合所对应的空间组成了主存空间。</li><li>逻辑地址 (相对地址、虚地址)<br>用户的程序地址 (指令地址或操作数地址)均为逻辑地址。 </li><li>程序地址空间<br>用户程序所有的逻辑地址集合对应的空间。</li></ul><h3 id="主存管理功能-1"><a href="#主存管理功能-1" class="headerlink" title="主存管理功能"></a>主存管理功能</h3><ul><li>地址映射——实现逻辑地址到物理主存地址的映射</li><li>主存分配 ——在多用户之间分配物理主存</li><li>存储保护——对各用户区的信息提供保护措施</li><li>主存扩充/虚拟主存——扩充逻辑主存区</li></ul><h4 id="地址映射"><a href="#地址映射" class="headerlink" title="地址映射"></a>地址映射</h4><p>什么是地址映射 ：将程序地址空间中使用的逻辑地址变换成主存中的物理地 址的过程，称为地址映射。</p><p>地址映射的时机和类别<br>① 编程或编译时确定地址映射关系<br>在程序编写或程序编译时确定虚、实地址之间的对应关系，结果是一 个不能浮动的程序模块。<br>② 在程序装入时确定地址映射关系<br>在程序装入过程中随即进行的地址变换方式称为静态地址映射<br>在这种情况下，一个已开始执行的程序是无法在主存中移动的；同时，如果该程序因某种原因暂时放在辅存，若再调入主存时，还必须把它放回到主存的同一位置上。<br><img src="/2020/01/05/主存管理/image-20200105091248853.png" alt="image-20200105091248853"><br>③ 在程序运行时确定地址映射关系 在程序执行期间，随着每条指令和数据的访问自动地连续 地进行地址映射，这种地址变换方式称为动态地址映射。<br>经过动态重定位的程序，可以不经过任何改变而装入主存单元。<br>可满足以下目标：</p><ol><li>具有给用户程序分配一个主存区域的能力</li><li>在改变系统设备时，具有不需要重新编程和重新编辑的能力</li><li>具有在任何时刻，在主存可用空间中重新分配一个程序的能力</li><li>对于一个用户程序，具有以间断方式分配主存的能力</li><li>具有只装入用户程序的部分代码即可投入运行的能力</li></ol><p><img src="/2020/01/05/主存管理/image-20200105091228936.png" alt="image-20200105091228936"></p><table><thead><tr><th>静态地址映射</th><th>动态地址映射</th></tr></thead><tbody><tr><td>在程序装入过程中进行地址映射</td><td>在程序执行期间进行地址映射</td></tr><tr><td>需软件(重定位装入程序)</td><td>需硬件地址变换机构(重定位寄存器)</td></tr><tr><td>需花费较多CPU时间</td><td>地址变换快</td></tr><tr><td>不灵活</td><td>灵活</td></tr></tbody></table><h3 id="主存分配"><a href="#主存分配" class="headerlink" title="主存分配"></a>主存分配</h3><p>构造分配用的数据结构<br>主存资源信息块：等待队列；空闲区队列；主存分配程序</p><p>制定策略<br>① 分配策略 —— 在众多个请求者中选择一个请求者的原则<br>② 放置策略 —— 在可用资源中，选择一个空闲区的原则<br>③ 调入策略 —— 决定信息装入主存的时机<br>预调策略：预先将信息调入主存<br>请调策略：当需要信息时，将信息调入主存<br>④ 淘汰策略 —— 在主存中没有可用的空闲区 (对某一程序 而言)时，决定哪些信息从主存中移走，即确定淘汰已占用的内存区的原则。</p><h3 id="主存分配-1"><a href="#主存分配-1" class="headerlink" title="主存分配"></a>主存分配</h3><p>构造分配用的数据结构<br>主存资源信息块：等待队列；空闲区队列；主存分配程序</p><p>制定策略<br>① 分配策略 —— 在众多个请求者中选择一个请求者的原则<br>② 放置策略 —— 在可用资源中，选择一个空闲区的原则<br>③ 调入策略 —— 决定信息装入主存的时机<br>预调策略：预先将信息调入主存<br>请调策略：当需要信息时，将信息调入主存<br>④ 淘汰策略 —— 在主存中没有可用的空闲区 (对某一程序 而言)时，决定哪些信息从主存中移走，即确定淘汰已占 用的内存区的原则。</p><p>实施主存分配与回收</p><h3 id="主存扩充"><a href="#主存扩充" class="headerlink" title="主存扩充"></a>主存扩充</h3><p>可行性 局部性特征</p><p>实现方法</p><ul><li>程序的全部代码和数据存放在辅存中；</li><li>将程序当前执行所涉及的那部分程序代码放入主存中；</li><li>程序执行时，当所需信息不在主存，由操作系统和硬件相配合来完成主存从辅存中调入信息，程序继续执行。</li></ul><p>虚拟存储器：由操作系统和硬件相配合来完成主存和辅存之间的信息的动态调度。这样的计算机系统好像为用户提供了一个其存储容量比实际主存大得多的存储器，这个存储器称为虚拟存储器<br>虚拟存储器的核心</p><ul><li>逻辑地址与物理地址分开</li><li>存储空间与虚地址空间分开</li><li>提供地址变换机构 </li></ul><p>实现虚拟存储器的物质基础</p><ul><li>有相当容量的辅存： 足以存放应用程序的虚地址空间</li><li>有一定容量的主存： 存放进入主存的多进程的信息</li><li>地址变换机构</li></ul><h3 id="存储保护"><a href="#存储保护" class="headerlink" title="存储保护"></a>存储保护</h3><p>什么是存储保护 ：在多用户环境中，主存储器按区分配给各用户程序使用。 为了互不影响，必须由硬件 (软件配合)保证各用户程序只 能在给定的存储区域内活动，这种措施叫做存储保护。</p><p>实现方法</p><ol><li>界地址保护<ol><li>上下界防护  物理地址<br><img src="/2020/01/05/主存管理/image-20200105091048112.png" alt="image-20200105091048112"></li><li>基地址、限长防护 逻辑地址<br><img src="/2020/01/05/主存管理/image-20200105091157055.png" alt="image-20200105091157055"></li></ol></li><li>存储键保护</li></ol><h2 id="分区存储管理"><a href="#分区存储管理" class="headerlink" title="分区存储管理"></a>分区存储管理</h2><h3 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h3><p>什么是动态分区分配：在处理程序的过程中，建立分区，依用户请求的大小分配分区。</p><p>分区分配数据结构<br>① 主存资源信息块 (M_RIB)<br>② 分区描述器 (PD)<br>flag： 为 0  —— 空闲区<br>     为 1  —— 已分配区<br>size： 分区大小<br>next：空闲区——自由主存队列中的勾链字<br>     已分配区——此项为零</p><p>M_RIB</p><table><thead><tr><th>等待队列头指针</th></tr></thead><tbody><tr><td>空闲区队列头指针</td></tr><tr><td>主存分配程序入口地址</td></tr></tbody></table><p>PD</p><table><thead><tr><th>分配标志</th><th>flag</th></tr></thead><tbody><tr><td>大小</td><td>size</td></tr><tr><td>勾链字</td><td>next</td></tr></tbody></table><p><img src="/2020/01/05/主存管理/image-20200105091701189.png" alt="image-20200105091701189"></p><h3 id="分区的分配与回收"><a href="#分区的分配与回收" class="headerlink" title="分区的分配与回收"></a>分区的分配与回收</h3><p>分区分配思路<br>① 寻找空闲块<br>依申请者所要求的主存区的大小，分区分配程序在自由主存队列中找一个满足用户需要的空闲块；<br>② 若找到了所需的空闲区，有两种情况<br>ⅰ 空闲区与要求的大小相等，将该空闲区分配并从队列中摘除；<br>ⅱ 空闲区大于所要求的的大小，将空闲区分为两部分：一 部分成为已分配区，建立已分配区的描述器；剩下部分 仍为空闲区。返回所分配区域的首址；<br>③ 否则，告之不能满足要求。</p><p>分区回收思路<br>① 检查释放分区 (即为回收分区)在主存中的邻接情况<br>若上、下邻接空闲区，则合并，成为一个连续的空闲区<br>② 若回收分区不与任何空闲区相邻接<br>建立一个新的空闲区，并加入到空闲区队列中。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主存管理概述&quot;&gt;&lt;a href=&quot;#主存管理概述&quot; class=&quot;headerlink&quot; title=&quot;主存管理概述&quot;&gt;&lt;/a&gt;主存管理概述&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;现代操作系统将主存区分为物理主存和逻辑主存2类。&lt;br&gt;物理主存是共享的物质基础。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yorxika.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="内存" scheme="http://yorxika.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>处理机的调度</title>
    <link href="http://yorxika.github.io/2020/01/04/%E5%A4%84%E7%90%86%E6%9C%BA%E7%9A%84%E8%B0%83%E5%BA%A6/"/>
    <id>http://yorxika.github.io/2020/01/04/%E5%A4%84%E7%90%86%E6%9C%BA%E7%9A%84%E8%B0%83%E5%BA%A6/</id>
    <published>2020-01-04T14:18:12.000Z</published>
    <updated>2020-01-04T15:42:20.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="处理机的多级调度"><a href="#处理机的多级调度" class="headerlink" title="处理机的多级调度"></a>处理机的多级调度</h2><ul><li>作业调度(宏观)：决定哪些程序调入计算机系统</li><li>进程调度(微观)：决定哪个（些）进程占用CPU，使用多长时间等<a id="more"></a><h2 id="作业调度"><a href="#作业调度" class="headerlink" title="作业调度"></a>作业调度</h2></li></ul><h3 id="作业及作业调度的功能"><a href="#作业及作业调度的功能" class="headerlink" title="作业及作业调度的功能"></a>作业及作业调度的功能</h3><p>一般来说，计算机系统把用户要求处理的一项工作称为一个作业。</p><p>作业有四种状态：<br>1.提交状态 用户将程序和数据提交计算中心；<br>2.后备状态 将作业录入到后援存储设备；<br>3.执行状态 作业调入计算机系统内存；<br>4.完成状态 作业计算完成的善后处理。</p><p><img src="/2020/01/04/处理机的调度/image-20200104223306933.png" alt="image-20200104223306933"></p><p>作业调度的主要任务是完成作业从后备状态到执行状态和从执行状态到完成状态的转变。<br>功能：<br>1.确定数据结构，记录已进入系统的各作业的情况（JCB，Job Control Block）；<br>2.按一定的调度算法，从后备作业中选择一个或几个作业进入内存；<br>3.分配资源，为被选中的作业创建进程，并为其申请系统资源；<br>4.作业结束后作善后处理。</p><p>每个作业进入系统时由系统为其建立一个作业控制块JCB（Job Control Block)，它是存放作业控制和管理信息的数据结构，主要信息见下表。</p><table><thead><tr><th align="center">作业名</th><th align="center"></th></tr></thead><tbody><tr><td align="center">资源要求</td><td align="center">估计运行时间</td></tr><tr><td align="center"></td><td align="center">最迟完成时间</td></tr><tr><td align="center"></td><td align="center">要求的主存量</td></tr><tr><td align="center"></td><td align="center">要求外设的类型及台数</td></tr><tr><td align="center"></td><td align="center">要求文件量和输出量</td></tr><tr><td align="center">资源使用情况</td><td align="center">进入系统的时间</td></tr><tr><td align="center"></td><td align="center">开始运行的时间</td></tr><tr><td align="center"></td><td align="center">已运行的时间</td></tr><tr><td align="center"></td><td align="center">内存地址</td></tr><tr><td align="center"></td><td align="center">外设台号</td></tr><tr><td align="center">类型</td><td align="center">控制方式</td></tr><tr><td align="center"></td><td align="center">作业类型</td></tr><tr><td align="center">优先级</td><td align="center"></td></tr><tr><td align="center">状态数</td><td align="center"></td></tr></tbody></table><h3 id="性能的衡量"><a href="#性能的衡量" class="headerlink" title="性能的衡量"></a>性能的衡量</h3><p>作业调度算法规定了从后备作业中选择作业进入系统内存的原则。</p><p>确定调度算法时应考虑的因素<br>1.应与系统的整体设计目标一致<br>2.考虑系统中各种资源的负载均匀<br>3.保证作业的执行<br>4.对一些专用资源的使用特性的考虑</p><p>平均周转时间和带权平均周转时间<br><img src="/2020/01/04/处理机的调度/image-20200104225107056.png" alt="image-20200104225107056"></p><h3 id="作业调度算法"><a href="#作业调度算法" class="headerlink" title="作业调度算法"></a>作业调度算法</h3><ul><li><p>先来先服务调度算法（FCFS）</p><ul><li>先来先服务算法是按作业来到的先后次序进行调度的，换句话说，调度程序每次选择的作业是等待时间最久的，而不管作业的运行时间的长短。这种调度算法突出的优点是实现简单，效率较低，在一些实际的系统和一般应用程序中采用这种算法的较多。</li></ul></li><li><p>短作业优先调度算法（SJF）</p><ul><li>短作业优先调度算法考虑作业的运行时间，每次总是选择一个运行时间最小的作业调入内存（系统） </li><li>在一般情况下这种调度算法比先来先服务调度算法的效率要高一些。实现相对先来先服务调度算法要困难些，如果作业的到来顺序及运行时间不合适，会出现饿死现象。</li></ul></li><li><p>响应比高者优先调度算法</p><ul><li>先来先服务和短作业优先算法都有其片面性，先来先服务调度算法只考虑作业的等待时间，而忽视了作业的运行时间，短作业优先算法则相反，只考虑了作业的运行时间，而忽视了作业的等待时间。响应比高者优先调度算法是介于这两种算法之间的一种拆衷的算法。<br><img src="/2020/01/04/处理机的调度/image-20200104225428235.png" alt="image-20200104225428235"></li><li>响应比高者优先调度算法从理论上讲是比较完备的，但需要作业调度程序：<ul><li>统计作业的等待时间</li><li>使用用户估计的运行时间</li><li>作浮点运算（这是系统程序最忌讳的）</li><li>复杂，开销大</li></ul></li></ul></li><li><p>优先数调度算法（Priority Scheduling）</p><ul><li>优先数调度算法是终合考虑各方面的因素（作业等待时间、运行时间、缓急程度，系统资源使用等），给每个作业设置一个优先数，调度程序总是选择一个优先数最大（或者最小）的作业调入（系统）内存。</li><li>这种算法的关键：<ul><li>如何终合考虑多种因素及其关系确定优先数</li><li>优先数是否动态变化</li><li>优先数什么时候变化</li></ul></li></ul></li></ul><h2 id="进程-线程调度"><a href="#进程-线程调度" class="headerlink" title="进程/线程调度"></a>进程/线程调度</h2><h3 id="进程调度-分派"><a href="#进程调度-分派" class="headerlink" title="进程调度/分派"></a>进程调度/分派</h3><p>处理机分配由调度和分派两个功能组成：</p><ul><li>调度：依照确定的策略将一批进程排序，排在首位的进程一定是满足调度原则，可被选择的进程；组织和维护就绪进程队列。包括确定调度算法、按调度算法组织和维护就绪进程队列。</li><li>分派：是指当处理机空闲时，从就绪队列队首中移一个PCB，并将该进程投入运行。  </li></ul><p>调度与进程控制和进程通信的功能有密切的联系，当一个进程阻塞时，这种进程将进入相应的等待队列中，并让出CPU，调用进程分派程序选择一个就绪进程占用CPU；当一进程被唤醒时，这种进程将插入到就绪进程队列中。<br>在一般的操作系统教材中把上述功能称为进程调度。</p><p>功能：</p><ul><li>记录和保持系统中所有进程的有关情况和状态特征<br>进程调度的信息记录在PCB中，包括进程的状态、调度优先级（优先数）、就绪进程队列等。</li><li>决定分配（处理机）策略<ul><li>先来先服务</li><li>优先数调度策略</li><li>调度策略的不同，组织就绪进程队列的方式不同</li></ul></li><li>实施处理机的分配和回收<ul><li>调度算法的选择（调度算法）<ul><li>先来先服务算法（FCFS）</li><li>短进程优先算法（SPF）</li><li>高响应比优先调度算法（HRRN）</li><li><strong>优先级调度算法（PSA）</strong></li><li><strong>基于时间片的轮转调度算法（RR）</strong></li></ul></li><li>调度时机的选择（调度时机）<br>和调度方式相关</li><li>实施进程调度（调度程序）</li></ul></li></ul><p>进程调度方式<br>若一个进程正在处理机上运行，若有一个更为紧迫的进程来到，系统的处理方式有：<br>(1) 非剥夺方式(不可抢先，non-preemptive)：进程已执行，若一个更为紧迫的进程来到，必须该进程执行完或时间片到，才让更紧迫的进程执行。<br>(2) 可剥夺方式(可抢先，preemptive)：有更紧迫的进程到来，中止当前进程的执行，立即让更紧迫的进程执行。</p><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><h4 id="进程优先数调度算法"><a href="#进程优先数调度算法" class="headerlink" title="进程优先数调度算法"></a>进程优先数调度算法</h4><ul><li>优先数调度算法赋予每个进程一个优先数，在处理机空闲时，进程调度程序就从就绪进程中选择一个优先数最大（或者最小）的进程占用CPU。</li><li>如何确定进程的优先数？</li><li>优先数是固定的，还是随着该进程运行的情况的变化而变化？</li></ul><p>进程优先数调度算法优先数的确定</p><ul><li>静态优先数<ul><li>进程的优先数在进程创建时确定后就不再变化。</li><li>系统确定（运行时间、使用资源，进程的类型）</li><li>用户确定（紧迫程度，计费有关）</li><li>系统与用户结合</li><li>缺点：很多计算优先数所依赖的特征都将随进程的推进改变，静态优先数并非自始至终都能准确地反映出这些特性。</li></ul></li><li>动态进程优先数<ul><li>系统在运行的过程中，根据系统的设计目标，不断地调整进程的优先数，这种方法的优点是能比较客观地反映进程的实际情况和保证达到系统设计目标。</li></ul></li></ul><h4 id="循环轮转调度算法（Round-Robin）"><a href="#循环轮转调度算法（Round-Robin）" class="headerlink" title="循环轮转调度算法（Round Robin）"></a>循环轮转调度算法（Round Robin）</h4><ul><li>把系统的响应时间分成若干时间片（ Time Quantum or Time Slice）</li><li>进程被调度到后，占用一个时间片</li><li>多个进程循环轮转占用CPU</li></ul><p>时间片长度的选择</p><ul><li>轮转法的性能取决于时间片（记为q,q = t / n ,t 为用户能接收的响应时间，n为进入系统的进程数）长度的选择，进程间在CPU上的切换需要时间。</li><li>q足够大到每一进程执行完，FCFS (先到先服务)</li><li>q 适当 ––– 进程均匀执行</li><li>q 太小 ––– 开销太大，有切换时间，CPU利用率低。</li><li>通常来说，选择时间片为10~100毫秒左右比较适宜，上下文切换时间少于10微秒。</li></ul><p>与时间片大小有关的因素</p><ul><li>系统响应时间(进程等待时间)</li><li>就绪进程个数（就绪队列长度）</li><li>轮换时间 (切换时间) </li></ul><p>简单循环轮转虽然比较简单，但由于采用固定时间片和仅有一个就绪队列，可对其进行改性：</p><ul><li>将固定时间片改为可变时间片</li><li>将单就绪队列改为多就绪队列</li></ul><h4 id="多级反馈队列"><a href="#多级反馈队列" class="headerlink" title="多级反馈队列"></a>多级反馈队列</h4><p>设有N个队列（Q1,Q2….QN），其中各个队列对于处理机的优先级是不一样的，也就是说位于各个队列中的作业(进程)的优先级也是不一样的。一般来说，优先级Priority(Q1) &gt; Priority(Q2) &gt; … &gt; Priority(QN)。怎么讲，位于Q1中的任何一个作业(进程)都要比Q2中的任何一个作业(进程)相对于CPU的优先级要高（也就是说，Q1中的作业一定要比Q2中的作业先被处理机调度），依次类推其它的队列。</p><p>对于优先级最低的队列来说，里面是遵循时间片轮转法。也就是说，位于队列QN中有M个作业，它们的运行时间是通过QN这个队列所设定的时间片来确定的；对于其他队列，遵循的是先来先服务算法，每一进程分配一定的时间片，若时间片运行完时进程未结束，则进入下一优先级队列的末尾。</p><p>各个队列的时间片是一样的吗？不一样，这就是该算法设计的精妙之处。各个队列的时间片是随着优先级的增加而减少的，也就是说，优先级越高的队列中它的时间片就越短。同时，为了便于那些超大作业的完成，最后一个队列QN(优先级最低的队列)的时间片一般很大(不需要考虑这个问题)。</p><p>算法描述：<br>1、进程在进入待调度的队列等待时，首先进入优先级最高的Q1等待。<br>2、首先调度优先级高的队列中的进程。若高优先级中队列中已没有调度的进程，则调度次优先级队列中的进程。例如：Q1,Q2,Q3三个队列，当且仅当在Q1中没有进程等待时才去调度Q2，同理，只有Q1,Q2都为空时才会去调度Q3。<br>3、对于同一个队列中的各个进程，按照FCFS分配时间片调度。比如Q1队列的时间片为N，那么Q1中的作业在经历了N个时间片后若还没有完成，则进入Q2队列等待，若Q2的时间片用完后作业还不能完成，一直进入下一级队列，直至完成。<br>4、在最后一个队列QN中的各个进程，按照时间片轮转分配时间片调度。<br>5、在低优先级的队列中的进程在运行时，又有新到达的作业，此时须立即把正在运行的进程放回当前队列的队尾，然后把处理机分给高优先级进程。换而言之，任何时刻，只有当第1~i-1队列全部为空时，才会去执行第i队列的进程（抢占式）。特别说明，当再度运行到当前队列的该进程时，仅分配上次还未完成的时间片，不再分配该队列对应的完整时间片。</p><p><img src="/2020/01/04/处理机的调度/500fd9f9d72a6059d09c84e42334349b023bba44@wm_1,g_7,k_d2F0ZXIvYmFpa2U4MA==,xp_5,yp_5.jfif" alt="img"></p><h2 id="UNIX系统进程调度"><a href="#UNIX系统进程调度" class="headerlink" title="UNIX系统进程调度"></a>UNIX系统进程调度</h2><p>优先数的确定</p><ul><li>系统设置<br>在sleep（）中设置将要进入睡眠状态进程的优先数，如果是等待较紧迫的事件，优先数设置较小，一般为负数，当该进程被唤醒后，就以系统给它设置的优先数去参与处理机的竟争。例如0＃进程（－100优先数）；<br> +所有处于用户态运行进程同步（一般情况下为大于0）。</li><li>优先数的计算<br>p_pri = min{127, (p_cpu/16+p_nice+PUSER)}<br>其中：<br>p_cpu:  进程占用CPU的程度<br>p_nice: 用户通过系统调用nice(priority)设置的进程优先数<br>PUSER: 常数，其值为100</li></ul><h2 id="Linux系统的进程调度"><a href="#Linux系统的进程调度" class="headerlink" title="Linux系统的进程调度"></a>Linux系统的进程调度</h2><h3 id="Linux进程调度目标和特点"><a href="#Linux进程调度目标和特点" class="headerlink" title="Linux进程调度目标和特点"></a>Linux进程调度目标和特点</h3><ul><li>进程调度程序是内核的组成部分，负责选择下一个要运行的进程。</li><li>进程调度可看作在可运行态进程之间分配有限的处理器间资源的内核子系统。</li><li>进程调度程序是如Linux这样的多任务操作系统的基础。</li><li>Linux进程调度策略<ul><li>基于动态优先级和可变时间片的调度</li><li>调度方式为可抢占式调度</li></ul></li></ul><p>调度目标</p><ul><li>实现算法复杂度为O(1)级的调度<ul><li>进程调度算法保证在恒定的时间内完成</li><li>算法执行时间与系统中处于就绪(可运行)状态的进程个数无关</li></ul></li><li>提高交互性能<ul><li>提高交互性能，保证系统能快速响应</li></ul></li><li>保证公平<ul><li>在合理设定的时间范围内，没有进程会出现饥饿状态，</li><li>也不会有进程获得大量的时间片 </li></ul></li><li>实现对称多处理器（SMP）可扩展性</li></ul><p>I/O消耗型和处理器消耗型的进程</p><ul><li>I/O消耗型进程<br>   大部分时间是使用外部设备，交互式进程具有此特征</li><li>处理器消耗型进程<br>   大部分时间是使用CPU，计算进程具有此特征</li></ul><p>交互式的程序都是I/O消耗型的。<br>Linux为了保证交互式应用，优化了进程的响应，更倾向于优先调度I/O消耗型进程，但并未忽略处理器消耗型程序。</p><p>进程调度的特点</p><ul><li>Linux系统实现了基于进程过去行为的启发式算法；</li><li>Linux系统选择优先级高的进程先运行，相同优先级的进程按循环方式调度；</li><li>动态优先级依进程占有CPU的情况、休眠时间的长短来增、减 ；</li><li>系统根据进程优先级调整分配给它的时间片； </li><li>实施可抢占调度方式 </li></ul><p>动态优先级</p><ul><li>基于优先级的调度<br>优先级高的进程先运行，低的后运行，相同优先级的进程按轮转方式进行调度。</li><li>静态优先级<ul><li>静态优先级在进程创建时确定，新创建的进程继承父进程的静态优先级;</li><li>静态优先级的取值范围是100(最高优先级)  139(最低优先级)，取值越小，优先级越高;</li><li>用户可以通过系统调用改变nice值，从而改变自己拥有的静态优先级。</li></ul></li><li>动态优先级<ul><li>每个进程有一个动态优先级，它是进程调度程序选择可运行进程所使用的参数，<br>其取值范围是100(最高优先级) ~ 139(最低优先级) </li><li>动态优先级的计算<br> 动态优先级 = max(100，min(静态优先级－ bonus + 5，139))<br> bonus是范围 0 ～ 10的值，<pre><code>值小于5表示降低动态优先级以示惩罚值大于5表示增加动态优先级以示奖励</code></pre>进程调度使用的是动态优先级，通过effective_prio( )函    数来计算一个进程的动态优先级。</li></ul></li></ul><p>确定I/O消耗型和处理器消耗型进程的方法</p><ul><li>依据 —— 进程睡眠时间的长短<br>   若进程睡眠时间长 —— I/O消耗型<br>   若进程睡眠时间短 ——处理器消耗型</li><li>方法<br>   Linux记录进程睡眠和执行时间 (存放在task_struct的sleep_avg域中)，范围：0 ～ MAX_SLEEP_AVG，默认值为10ms<ul><li>当进程从开始休眠到要恢复执行这一时间内，sleep_avg增加，直到达到MAX_SLEEP_AVG为止；</li><li>进程每执行一个时钟节拍， sleep_avg递减，直到0为止</li></ul></li></ul><p>进程休眠时间与bonus值的关系</p><table><thead><tr><th>平均休眠时间</th><th>bonus值</th></tr></thead><tbody><tr><td>大于或等于0，  小于 100ms</td><td>0</td></tr><tr><td>大于或等于100，小于 200ms</td><td>1</td></tr><tr><td>大于或等于200，小于 300ms</td><td>2</td></tr><tr><td>大于或等于300，小于 400ms</td><td>3</td></tr><tr><td>大于或等于400，小于 500ms</td><td>4</td></tr><tr><td>大于或等于600，小于 700ms</td><td>6</td></tr><tr><td>大于或等于700，小于 800ms</td><td>7</td></tr><tr><td>大于或等于800，小于 900ms</td><td>8</td></tr><tr><td>大于或等于900，小于 1000ms</td><td>9</td></tr><tr><td>大于1s</td><td>10</td></tr></tbody></table><p>可变时间片<br>Linux系统的目标</p><ul><li>对交互式进程,系统提供较长的时间片</li><li>调度程序根据进程的优先级动态调整分配给它的时间片</li></ul><p>时间片处理的时机</p><ul><li>创建新进程时的处理<ul><li>新创建的子进程和父进程均分父进程剩余的时间片 </li></ul></li><li>进程用完时间片时的处理<ul><li>当一个进程的时间片用完时，依任务的静态优先级重新计算时间片；</li><li>task_timeslice()函数为给定任务返回一个新的时间片</li></ul></li></ul><p>时间片的使用</p><ul><li>一个进程拥有的时间片可分多次使用，放弃CPU时进入活动队列</li><li>当一个进程的时间片耗尽时，认为是过期进程，进入过期队列</li></ul><p>时间片的计算</p><ul><li>基本时间片<pre><code>静态优先级本质上决定了进程的基本时间片 (140 －静态优先级) ×20    若静态优先级 ＜ 120 (140 －静态优先级) ×5      若静态优先级 ≥ 120静态优先级越高(值越小)，基本时间片越长。</code></pre></li></ul><p>活动队列和过期队列<br>每个处理器维护两个优先级数组—— 活动数组和过期数组</p><ul><li>活动数组上的可执行队列中的进程都有剩余时间片</li><li>过期数组上的可执行队列中的进程都已耗尽时间片<br>   当一个进程的时间片耗尽时，被移至过期队列中；<br>   当活动数组上的可执行队列中的所有进程都已耗尽时时间片，这时，在活动数组和过期数组之间切换指针。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;处理机的多级调度&quot;&gt;&lt;a href=&quot;#处理机的多级调度&quot; class=&quot;headerlink&quot; title=&quot;处理机的多级调度&quot;&gt;&lt;/a&gt;处理机的多级调度&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作业调度(宏观)：决定哪些程序调入计算机系统&lt;/li&gt;
&lt;li&gt;进程调度(微观)：决定哪个（些）进程占用CPU，使用多长时间等&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yorxika.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>资源分配与调度</title>
    <link href="http://yorxika.github.io/2020/01/04/%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D%E4%B8%8E%E8%B0%83%E5%BA%A6/"/>
    <id>http://yorxika.github.io/2020/01/04/%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D%E4%B8%8E%E8%B0%83%E5%BA%A6/</id>
    <published>2020-01-04T12:53:01.000Z</published>
    <updated>2020-01-04T15:40:00.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资源管理概述"><a href="#资源管理概述" class="headerlink" title="资源管理概述"></a>资源管理概述</h2><p>资源 ：应用程序执行时所需要的全部硬件、软件和数据。 </p><p>为什么要对资源进行管理？ </p><ul><li>管理好各种资源是计算机系统的重要职责。 <a id="more"></a></li><li>随着软硬件的发展，操作系统要管理的软硬件资源和种类越来越多； </li><li>用户的需求和应用量也在不断增长。</li></ul><p>资源管理的目标</p><ul><li>保证资源的高利用率。 </li><li>在“合理”时间内使所有顾客有获得所需资源的机会。 </li><li>对不可共享的资源实施互斥使用。</li><li>防止由资源分配不当而引起的死锁。</li><li>这些目标之间需要<strong>平衡</strong>！</li></ul><p>资源管理的任务</p><ul><li>资源数据结构的描述<br>应包含该类资源最小分配单位的描述信息，如资源的物理名、逻辑名、类型、地址、分配状态等信息。 </li><li>确定资源的分配原则 (调度原则)<br>决定资源应分给谁，何时分配，分配多少等问题。</li><li>实施资源分配<br>执行资源分配；资源收回工作。 </li><li>存取控制和安全保护<br>对资源的存取进行控制并对资源实施安全保护措施。</li></ul><p>资源资源的静态分配和动态分配</p><ul><li>资源的静态分配<br>系统对作业一级采用资源静态分配方法。系统在调度作业时，根据作业所需资源进行分配；并在作业运行完毕 时，收回所分配的全部资源。这种分配通常称为资源的静态分配。 </li><li>资源的动态分配<br>系统对进程一级采用资源动态分配方法。 系统在进程运行中，根据进程提出的资源需求，进行资源的动态分配和回收。这种分配通常称为资源的动态分配。</li></ul><p>虚拟资源<br>操作系统对资源区分二种不同的概念</p><ul><li>物理资源 (实资源)</li><li>虚拟资源 (逻辑资源) ：用户使用的逻辑资源，这是经过操作系统改造的、使用方便的虚资源，而不是物理的、 实际的资源。</li></ul><p>目的</p><ul><li>方便用户使用</li><li>资源可动态分配，提高资源利用率</li></ul><p>计算机系统中的物理资源与虚拟资源分析</p><table><thead><tr><th>资源表格</th><th>物理资源</th><th>虚拟(逻辑)</th><th>映射</th></tr></thead><tbody><tr><td>处理机</td><td>CPU</td><td>进程</td><td>进程调度</td></tr><tr><td>存储器</td><td>主存</td><td>虚存（程序地址空间）</td><td>地址映射</td></tr><tr><td>设备</td><td>外部设备</td><td>逻辑设备、虚拟设备</td><td>设备分配、动态映射</td></tr><tr><td>信息</td><td>文件物理结构</td><td>文件逻辑结构</td><td>磁盘空间分配、文件目录查找</td></tr></tbody></table><h2 id="资源分配结构和策略"><a href="#资源分配结构和策略" class="headerlink" title="资源分配结构和策略"></a>资源分配结构和策略</h2><p>资源管理的实质</p><ul><li>资源管理的实质是<strong>资源管理的机制</strong>和<strong>资源管理的策略</strong>。</li><li>机制：进行资源分配所必须的基本设施和部件，包括描述资源状态的数据结构、保证不可共享资源互斥使用的同步机构以及对不能立即得到满足的资源请求进行排队的各种资源队列的结构。</li><li>策略：给出了实现该功能的内涵，设计资源分配的原则。</li></ul><h3 id="资源分配的机构"><a href="#资源分配的机构" class="headerlink" title="资源分配的机构"></a>资源分配的机构</h3><h4 id="资源描述器"><a href="#资源描述器" class="headerlink" title="资源描述器"></a>资源描述器</h4><p>资源描述器 定义：描述描述各类资源的最小分配单位的数 据结构称为资源描述器 rd（resource descriptor）。 如：主存分区分配方法中， 最小分配单位为主存分区。</p><p>资源描述器内容 ：资源名、资源类型、最小分配单位的大 小、地址、分配标志、描述器链接信息、 存取权限、密级、存取时间。</p><ul><li>若它具有N个资源分配器，则有N个资源描述器。这些描述器的组织是个重要问题。</li><li>描述器的组织方式取决于资源分配单位的数量和数量是否可变这一特征。<ul><li>如果数量不可变，使用表结构。</li><li>如果数量可变，使用队列结构。</li><li>如果数目变化范围可知且不大，使用数组。</li></ul></li></ul><h4 id="资源信息块（rib-resource-information-block）"><a href="#资源信息块（rib-resource-information-block）" class="headerlink" title="资源信息块（rib, resource information block）"></a>资源信息块（rib, resource information block）</h4><p>资源信息块定义：描述某类资源的请求者、可用资源和该类资源分配程序等必要信息的数据结构。</p><p>资源信息块内容<img src="/2020/01/04/资源分配与调度/image-20200104211547478.png" alt="image-20200104211547478"></p><p>资源信息块示例：<img src="/2020/01/04/资源分配与调度/image-20200104211709887.png" alt="image-20200104211709887"></p><h3 id="资源分配策略"><a href="#资源分配策略" class="headerlink" title="资源分配策略"></a>资源分配策略</h3><ul><li>对某类资源而言，在多个资源有多个请求者申请的情况下，资源分配的策略包括<strong>选择请求者的策略</strong>和<strong>选择资源的策略</strong>两种。</li><li>选择请求者的策略：即资源分配策略，即在众多请求者中选一个满足条件的请求者的原则。</li><li>选择资源的策略：是在同等资源间选择一个满足条件的资源的原则。</li><li>具体实现：体现在队列的排队原则上。</li></ul><p>资源分配的时机</p><ul><li>请求者发出一个明确的资源请求命令时；</li><li>当处理机空闲时；</li><li>当一个存储区被释放变为空闲时；</li><li>当一个外存设备发生完成中断时。</li></ul><p>常用的资源分配策略</p><ul><li>先请求先服务<ul><li>每一个新产生的请求均排在队尾； </li><li>当资源可用时，取队首元素，并满足其需要。 排序原则：按请求的先后次序排序。（有饿死现象！）<br><img src="/2020/01/04/资源分配与调度/image-20200104212028817.png" alt="image-20200104212028817"></li></ul></li><li>优先调度<ul><li>对每一个进程指定一个优先级，优先级反映了进程要求处理的紧迫程度；</li><li>每一个新产生的请求，按其优先级的高低插到相应的位置；</li><li>当资源可用时，取队首元素，并满足其需要。<br>排序原则：按优先级的高低排序。</li></ul></li><li>针对设备特性的调度策略<ul><li>移臂调度 ：总是选取与当前移动臂前进方向上最近的那个I/O请求，<br>使移臂距离最短。</li><li>旋转调度 ：总是选取与当前读写头最近的那个I/O请求，使旋转圈 数最少。</li></ul></li></ul><p>几种移臂调度算法</p><ul><li>最短寻道时间优先算法（SSTF） <ul><li>从等待访问者中挑选寻找时间最短的那个请求先执行 </li><li>缺点：可能会引起读写头在盘面上的大范围移 动，可能会推迟请求的服务导致无限拖延 </li></ul></li><li>扫描算法（SCAN，即电梯调度算法） <ul><li>磁头前进方向上的最短查找时间优先算法 </li><li>很大程度上消除了SSTF的不公平性</li><li>不仅要己组读写磁头的位置，还必须记住移动臂的当前前进方向</li><li>当磁头刚从里向外移动过某一磁道时，恰有一进程访问此磁道，必须等待。</li></ul></li><li>循环扫描算法(CSCAN)<ul><li>规定磁头单向移动，如果只是从里向外移动，当磁头移到最外的磁道并访问时，磁头立即返回到最里的欲访问磁道，即将最小磁道号紧接着最大磁道号循环，进行循环扫描。</li></ul></li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="死锁及起因"><a href="#死锁及起因" class="headerlink" title="死锁及起因"></a>死锁及起因</h3><p>什么是死锁<br>在两个或多个并发进程中，如果每个进程持有某种资源而又都等待着别的进程释放它或它们现在保持着的资源，否 则就不能向前推进。此时，称这一组进程产生了死锁。</p><p>引起死锁的原因</p><ul><li>系统资源不足</li><li>进程推进顺序非法</li></ul><p>产生死锁的必要条件</p><ul><li><p>互斥条件<br>涉及的资源是非共享的，即为临界资源。</p></li><li><p>不剥夺条件<br>进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走。</p></li><li><p>部分分配<br>进程每次申请它所需要的一部分资源。在等待一新资源的 同时，进程继续占用已分配到的资源。 </p></li><li><p>环路条件<br>存在一种进程的循环链，链中的每一个进程已获得的资 源同时被链中下一个进程所请求。 </p><p><img src="/2020/01/04/资源分配与调度/20180317174724920.png" alt="img"><br>利用资源分配图可判断死锁。<br>若图没有环，系统没有发生死锁；如果图有环，可能存在死锁。如果环涉及一组资源类型，而每个资源类型只有一个实例，呢么有环就意味着出现死锁，即环所涉及的进程发生了死锁。在这种情况下，环就是死锁存在的充分必要条件。</p></li></ul><p>解决死锁问题的策略——破坏产生死锁的四个必要条件之一</p><ul><li>采用静态资源分配方法——预防死锁。</li><li>采用有控资源分配方法——避免死锁</li><li>死锁的检测与忽略</li></ul><h3 id="死锁的预防"><a href="#死锁的预防" class="headerlink" title="死锁的预防"></a>死锁的预防</h3><ul><li><p>破坏互斥条件</p><ul><li>就是在系统里取消互斥。若资源不被一个进程独占使用，那么死锁是肯定不会发生的。但一般“互斥”条件是无法破坏的。因此，在死锁预防里主要是破坏其他三个必要条件，而不去涉及破坏“互斥”条件。</li></ul></li><li><p>破坏请求并保持条件</p><ul><li>在系统中不允许进程在已获得某种资源的情况下，申请其他资源。即要想出一个办法，阻止进程在持有资源的同时申请其他资源。有两种方法：</li><li>方法一：所有进程在运行之前，必须一次性地申请在整个运行过程中所需的全部资源。这样，该进程在整个运行期间，便不会再提出资源请求，从而破坏了“请求”条件。系统在分配资源时，只要有一种资源不能满足进程的要求，即使其它所需的各资源都空闲也不分配给该进程，而让该进程等待。由于该进程在等待期间未占有任何资源，于是破坏了“保持”条件。</li><li>该方法优点：简单、易行且安全。</li><li>缺点：<br>a.资源被严重浪费，严重恶化了资源的利用率。<br>b.使进程经常会发生饥饿现象。</li><li>方法二：要求每个进程提出新的资源申请前，释放它所占有的资源，然后再尝试一次获得所需的全部资源。</li></ul></li><li><p>破环不可抢占条件</p><ul><li>允许对资源实行抢占。</li><li>方法一：如果占有某些资源的一个进程进行进一步资源请求被拒绝，则该进程必须释放它最初占有的资源，如果有必要，可再次请求这些资源和另外的资源。</li><li>方法二：如果一个进程请求当前被另一个进程占有的一个资源，则操作系统可以抢占另一个进程，要求它释放资源。只有在任意两个进程的优先级都不相同的条件下，该方法才能预防死锁。</li></ul></li><li><p>破坏环路等待条件</p><ul><li>保证每一个进程在任何时刻只能占用一个资源，若要请求另外一个资源，它必须先释放第一个资源。</li><li>将系统中的所有资源统一编号，进程可在任何时刻提出资源申请，但所有申请必须按照资源的编号顺序（升序）提出。这样做就能保证系统不出现死锁。</li></ul></li><li><p>静态预防死锁的方法</p><ul><li>在作业调度时为选中的作业分配它所需要的所有资源，当资源一旦分配给该作业后，在其整个运行期间这些资源为它独占。</li><li>一个用户在作业运行之前可能提不出其作业将要使用的全部设备</li><li>用户作业的所有资源满足后才投入运行，实际上某些资源可能要到运行后期才会用到</li><li>一个作业运行期间，某些设备的使用时间很少，甚至不会用到。 </li></ul></li><li><p>动态避免死锁的方法</p><ul><li>有序资源分配法<br>系统中所有资源都给定一个唯一的编号，所有分配请求必须以上升的次序进行。当遵守上升次序的规则时，若资源可用，则予以分配；否则，请求者等待。（缺点：资源浪费！当有资源序列1234，实际访问序列为4321时，需要先请求1，在2，在3、4，但是123是较长时间后运行的，造成了资源的浪费。）</li><li>银行家算法<br>申请者事先说明对各类资源的最大需求量。在进程活动期间动态申请某类资源时，由系统审查现有该类资源的数目是否能满足当前进程的最大需求量，如能满足就予以分配，否则拒绝（缺点：要求每个进程必须事先说明对各类资源的最大需求，而且在系统运行过程中，考察每个进程对各类资源的申请需要花费较多的时间。此外，由于银行家算法总是考虑最坏情况，有时为了避免死锁，可能拒绝某一请求，实际上，即使该请求得到满足也不会出现死锁。<strong>过于谨慎</strong>以及<strong>开销较大</strong>是银行家算法的主要障碍）</li></ul></li></ul><h3 id="死锁的检测和恢复"><a href="#死锁的检测和恢复" class="headerlink" title="死锁的检测和恢复"></a>死锁的检测和恢复</h3><h4 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a>死锁检测</h4><p>首先针对每种资源类型只有一个实例的情况。</p><p>构建资源分配图，采用深度优先遍历算法确定是否存在环路：依次将每一个节点作为一棵树的根节点，并进行深度优先搜索，如果再次碰到已经遇到过的节点，那么就算找到了一个环。如果从任何给定的节点出发的弧都被穷举了，那么就回溯到前面的节点。如果回溯到根并且不能再深入下去，那么从当前节点出发的子图中就不包含任何环。如果所有的节点都是如此，那么整个图就不存在环也就是说系统不存在死锁。</p><p>第二种情况是每种资源类型还有多个实例的情况。</p><p>构建向量矩阵，利用向量矩阵算法模拟资源分配。这种算法的第一步是寻找可以运行完毕的进程Pi，该进程的特点是它有资源请求并且该请求可被当前的可用资源满足(R矩阵第i行向量小于A)。这一选中的进程随后就被运行完毕，在这段时间内它释放自己持有的所有资源并将它们返回到可用资源库中（将C矩阵的第i行向量加到A）。然后这一进程被标记为完成。如果所有的进程最终都能运行完毕的话，就不存在死锁的情况。</p><p>假设n个进程，m种资源：</p><p>E=（E1,E2,…,Em）现有资源向量，</p><p>A=（A1,A2,…,Am）可用资源向量，</p><p>Cn*m当前分配矩阵，Rn*m请求矩阵，C(ij)表示进程i所持有的资源j的数量，R(ij)表示进程i所需要的资源j的数量。</p><p>Ej=Aj+C11+C21+……+Cn1</p><p>死锁检测：算法复杂，开销很大<br>忽略则后患无穷</p><h4 id="死锁恢复"><a href="#死锁恢复" class="headerlink" title="死锁恢复"></a>死锁恢复</h4><p>抢占：不通知原进程的情况下，将某一资源从一个进程强行取走给另一个进程使用，接着送回。</p><p>回滚：周期性对进程进行检查点检查，即将进程的状态写入一个文件以备以后重启，包括存储映象、资源状态，即哪些资源分配给了哪些进程。新的检查点不覆盖原有的文件，而是写到新文件中。检测到死锁时，从一个较早的检查点开始，将该进程复位到更早的状态。</p><p>杀死进程：杀死环中的一个或多个进程；杀死一个环外的进程以释放该进程的资源。（最好杀死可以从头开始重新运行且不会带来副作用的进程）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;资源管理概述&quot;&gt;&lt;a href=&quot;#资源管理概述&quot; class=&quot;headerlink&quot; title=&quot;资源管理概述&quot;&gt;&lt;/a&gt;资源管理概述&lt;/h2&gt;&lt;p&gt;资源 ：应用程序执行时所需要的全部硬件、软件和数据。 &lt;/p&gt;
&lt;p&gt;为什么要对资源进行管理？ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理好各种资源是计算机系统的重要职责。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yorxika.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>进程及进程管理</title>
    <link href="http://yorxika.github.io/2020/01/04/%E8%BF%9B%E7%A8%8B%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://yorxika.github.io/2020/01/04/%E8%BF%9B%E7%A8%8B%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2020-01-04T11:13:08.000Z</published>
    <updated>2020-01-04T14:20:37.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程引入"><a href="#进程引入" class="headerlink" title="进程引入"></a>进程引入</h2><h3 id="顺序程序及特点"><a href="#顺序程序及特点" class="headerlink" title="顺序程序及特点"></a>顺序程序及特点</h3><ul><li>计算：程序的一次执行过程称为一个计算，它由许多简单操作所组成。</li><li>程序的顺序执行：一个计算的若干操作必须按照严格的先后次序顺序地执行，这类计算过程就是程序的顺序执行过程。<a id="more"></a></li></ul><p>单道系统的工作情况：对用户作业的处理 —— 首先输入用户的程序和数据；然后进行计算；最后打印计 算结果，即有三个顺序执行的操作。 I：输入操作 C：计算操作 P：输出操作</p><p>特点：</p><ul><li>顺序性 —— 处理机的操作严格按照程序所规定的 顺序执行。</li><li>封闭性 —— 程序一旦开始执行，其计算结果不受 外界因素的影响。</li><li>可再现性 —— 程序执行的结果与它的执行速度无 关 (即与时间无关)，而只与初始条件有关。</li></ul><h3 id="并发程序"><a href="#并发程序" class="headerlink" title="并发程序"></a>并发程序</h3><p>若干个程序段同时在系统中运行，这些程序段的执行在时间上是重叠的，一个程序段的执行尚未结束，另一个程序段的执行已经开始，即使这种重叠是很小的一部分，也称这几个程序段是并发执行的。</p><p>特点：</p><ul><li>失去程序的封闭性和可再现性<br> 若一个程序的执行可以改变另一个程序的变量，那么，后 者的输出就可能有赖于各程序执行的相对速度，即失去了 程序的封闭性特点。 </li><li>程序与计算不再一一对应<br>一个程序可以对应多个计算。</li><li>程序并发执行的相互制约<ul><li>间接的相互制约关系 —— 资源共享</li><li>直接的相互制约关系 —— 公共变量</li></ul></li></ul><h3 id="与时间有关的错误"><a href="#与时间有关的错误" class="headerlink" title="与时间有关的错误"></a>与时间有关的错误</h3><p>程序并发执行时，若共享了公共变量，其执行结果与各并发程序的相对速度有关，即给定相同的初始条件，若不加以控制，也可能得到不同的结果，此为与时间有关的错误。<br>为了保证得到唯一的正确结果，需要实现并发程序执行时的<strong>互斥和同步</strong>。</p><h2 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h2><h3 id="进程定义"><a href="#进程定义" class="headerlink" title="进程定义"></a>进程定义</h3><p>什么是进程？<br>所谓进程，就是一个程序在给定活动空间和初始环境下， 在一个处理机上的执行过程。</p><p>进程与程序的区别</p><ul><li>程序是指令的有序计合，是一个静态的概念，进程是程序在处理及上的一次执行过程，是动态的概念；</li><li>进程是一个独立运行的活动单位，能与其他进程并行的活动；</li><li>进程是竞争计算机系统资源的基本单位，也是进行处理机调度的基本单位；</li><li>一个程序可以对应多个进程，一个进程至少包含一个程序。</li></ul><h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><p>进程的基本状态 </p><ul><li>运行状态(running) 该进程已获得运行所必需的资源，它的程序正在处理机上 执行。</li><li>等待状态(wait) 进程正等待着某一事件的发生而暂时停止执行。这时， 即使给它CPU控制权，它也无法执行。 </li><li>就绪状态(ready) 进程已获得除CPU之外的运行所必需的资源，一旦得到 CPU控制权，立即可以运行。</li></ul><p><img src="/2020/01/04/进程及进程管理/image-20200104193543416.png" alt="image-20200104193543416"></p><h3 id="进程描述"><a href="#进程描述" class="headerlink" title="进程描述"></a>进程描述</h3><p>什么是进程控制块<br>描述进程与其他进程、系统资源的关系以及进程在各个不同时期所处的状态的数据结构，称为进程控制块 PCB (process control block)。 </p><p>进程的组成</p><ul><li><p>程序与数据<br> 描述进程本身所应完成的功能</p></li><li><p>PCB<br> 进程的动态特征，该进程与其他进 程和系统资源的关系。</p><p> <img src="/2020/01/04/进程及进程管理/image-20200104193922671.png" alt="image-20200104193922671"></p></li></ul><p>进程控制块的主要内容</p><ul><li>进程标识符 进程符号名或内部 id号 </li><li>进程当前状态 本进程目前处于何种状态</li><li>当前队列指针next 该项登记了处于同一状态的下一个进程的 PCB地址。 </li><li>进程优先级 反映了进程要求CPU的紧迫程度。 </li><li>CPU现场保护区 当进程由于某种原因释放处理机时，CPU现场信息被保存在PCB的该区域中。 </li><li>通信信息 进程间进行通信时所记录的有关信息。 </li><li>家族联系 指明本进程与家族的联系 </li><li>占有资源清单</li></ul><p><img src="/2020/01/04/进程及进程管理/image-20200104194258703.png" alt="image-20200104194258703"></p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>进程控制的职责 ：对系统中的进程实施有效的管理，负责进程状态的改变。<br>常用的进程控制原语：创建原语creat、撤消原语kill、阻塞原语susp、唤醒原语wakeup</p><h2 id="进程之间的约束关系"><a href="#进程之间的约束关系" class="headerlink" title="进程之间的约束关系"></a>进程之间的约束关系</h2><h3 id="进程竞争与合作"><a href="#进程竞争与合作" class="headerlink" title="进程竞争与合作"></a>进程竞争与合作</h3><p>进程之间的约束关系可分为两种情况：</p><ul><li>由于竞争系统资源而引起的间接相互制约关系</li><li>由于进程之间存在共享数据而引起的直接相互制约关系<ul><li>进程协作：信息共享和并行处理</li></ul></li></ul><h3 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h3><p>临界资源：一次仅允许一个进程使用的<strong>资源</strong>称为临界资源。 硬件：如输入机、打印机、磁带机等 软件：如公用变量、数据、表格、队列等 。</p><p>临界区是进程中对公共变量 (或存储区)进行审查与修改的<strong>程序段</strong>，称为相对于该公共变量的临界区。<br>注意：</p><ul><li>临界区是针对某一临界资源而言的</li><li>相对于某临界资源的临界区个数就是共享该临界资源的进程个数</li><li>相对于同一个公共变量的若干个临界区，必须是互斥地进入</li></ul><p>互斥：在操作系统中，当某一进程正在访问某一存储区域时，就 不允许其他进程来读出或者修改存储区的内容，否则，就 会发生后果无法估计的错误。进程间的这种相互制约关系 称为互斥。</p><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>什么是进程同步：并发进程在一些关键点上可能需要互相等待与互通消息， 这种相互制约的等待与互通消息称为进程同步。 同步意味着两个或多个进程之间根据它们一致同意的协议进行相互作用。同步的实质是使各合作进程的行为保持某种一致性或不变关系。</p><p>进程同步示例：</p><ul><li>病员就诊</li><li>共享缓冲区的计算进程与打印进程的同步</li></ul><h2 id="同步机构"><a href="#同步机构" class="headerlink" title="同步机构"></a>同步机构</h2><h3 id="锁和上锁、开锁操作"><a href="#锁和上锁、开锁操作" class="headerlink" title="锁和上锁、开锁操作"></a>锁和上锁、开锁操作</h3><p>什么是锁：用变量w代表某种资源的状态，w称为“锁” 。用<strong>1</strong>表示资源已经被<strong>占用</strong>。</p><p>上锁操作和开锁操作</p><ul><li>检测w的值 (是0还是1)；</li><li>如果w的值为1，继续检测；</li><li>如果w的值为0，将锁位置1 (表示占用资源)，进入临界区执行。 (此为上锁操作)</li><li>临界资源使用完毕，将锁位置0。 (此为开锁操作)</li></ul><h3 id="信号灯和P、V操作"><a href="#信号灯和P、V操作" class="headerlink" title="信号灯和P、V操作"></a>信号灯和P、V操作</h3><p>什么是信号灯<br>信号灯是一个确定的二元组 (s，q)，s是一个具有非负初值的整型变量，q是一个初始状态为空的队列。操作系统利用信号灯的状态对并发进程和共享资源进行控制和管理。<br><strong>信号灯是整型变量。</strong><br>变量值 ≥ 0 时，表示绿灯，进程执行； 变量值 ＜ 0 时，表示红灯，进程停止执行。<br>注意：创建信号灯时，应准确说明信号灯 s 的意义和初值<br><strong>(这个初值绝不能为负值)</strong>。</p><p>P 操作 定义：对信号灯s的 p操作记为 p(s)。p(s)是一个不可分割的原语操作，即取信号灯值减1，若相减结果为负，则调用p(s)的进程被阻，并插入到<br>该信号灯的等待队列中，否则可以继续执行。 </p><p>V 操作 定义：对信号灯s的 v操作记为 v(s)。v(s)是一个不可分割的原语操作，即取信号灯值加1，若相加结果大于零，进程继续执行，否则，要帮助唤醒在信号灯等待队列上的一个进程。 </p><h2 id="同步机构-1"><a href="#同步机构-1" class="headerlink" title="同步机构"></a>同步机构</h2><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><p>生产者与消费者的同步关系</p><ul><li>生产者：<ul><li>当有界缓冲区中无空位置时，要等待； </li><li>向有界缓冲区放入物品后，要发消息。 </li></ul></li><li>消费者：<ul><li>当有界缓冲区中无物品时，要等待；</li><li>从有界缓冲区取出物品后，要发消息。</li></ul></li></ul><p>信号灯设置</p><ul><li>两个同步信号灯——<ul><li>sb ：表示空缓冲区的数目，初值 = n </li><li>sa ： 表示满缓冲区 (即信息)的数目，初值 = 0</li></ul></li><li>一个互斥信号灯——<ul><li>mutex：表示有界缓冲区是否被占用，初值 = 1</li></ul></li></ul><p>程序描述<br>程序 prod_cons</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">main( )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> sa=<span class="number">0</span>； ∕/满缓冲区数目  </span><br><span class="line">   <span class="keyword">int</span> sb=n； ∕/空缓冲区数目</span><br><span class="line">   <span class="keyword">int</span>  mutex=<span class="number">1</span>； ∕/对有界缓冲区进行操作 </span><br><span class="line">   cobegin </span><br><span class="line">   p1 ( )； p2 ( )；… pm ( )； </span><br><span class="line">   c1 ( )； c2 ( )；… ck ( )； </span><br><span class="line">   coend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pi( )                                                     </span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">while</span>(生产未完成)</span><br><span class="line">   &#123;</span><br><span class="line">      M</span><br><span class="line">      生产一个产品;</span><br><span class="line">      p(sb)；</span><br><span class="line">      p(mutex)； </span><br><span class="line">      送一个产品到有界缓冲区；</span><br><span class="line">      v(mutex)；</span><br><span class="line">      v(sa)；</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cj( ) </span><br><span class="line">&#123; </span><br><span class="line">   <span class="keyword">while</span>(还要继续消费)</span><br><span class="line">   &#123;</span><br><span class="line">        p(sa)； </span><br><span class="line">        p(mutex)；</span><br><span class="line">        从有界缓冲区中取产品</span><br><span class="line">        v(mutex)； </span><br><span class="line">        v(sb)； </span><br><span class="line">        消费一个产品； </span><br><span class="line">        M</span><br></pre></td></tr></table></figure><h3 id="理发师睡觉问题"><a href="#理发师睡觉问题" class="headerlink" title="理发师睡觉问题"></a>理发师睡觉问题</h3><p>理发店里有一位理发师、一把理发椅和n把供等候理发的顾客坐的椅子。如果没有顾客，则理发师便在理发椅上睡觉。当一个顾客到来时，他必须先叫醒理发师，如果理发师正在理发时又有顾客来到，则如果有空椅子可坐，他们就坐下来等。如果没有空椅子，他就离开。</p><ul><li><p>一个理发师，一把理发椅，n把等候理发的顾客椅子。 </p><ul><li>如果没有顾客，则理发师在理发椅上睡觉；</li><li>当有一个顾客到达时，首先看理发师在干什么， 如果理发师在睡觉，则唤醒理发师理发； 如果理发师正在理发，则查看是否有空的顾客椅子可 坐； 如果有顾客椅子可坐，则坐下等待，如果没有，则 离开。 </li><li>理发师为一位顾客理完发后，查看是否有人在等待， 如果有则唤醒下一位顾客理发，没有则理发师去睡觉。</li></ul></li><li><p>理发师和顾客之间的同步关系<br> 当理发师睡觉时，顾客进来需要唤醒理发师为其理发；<br> 当有顾客时理发师为其理发，没有的时候理发师睡觉。</p></li><li><p>理发师与顾客、顾客与顾客之间的互斥关系<br> 由于每次理发师只能为1个人理发，且可供等侯的椅子只有n把，即理发师和椅子是临界资源，顾客之间是互斥的关系。</p></li></ul><p>信号灯设置<br>引入3个信号量和一个控制变量： </p><ul><li>控制变量waiting用来记录等候理发的顾客数，初值均为0; 进入理发店的顾客必须先看等候的顾客数，如果少于椅子数， 他留下来等，否则他就离开。</li><li>信号量customers用来记录等候理发的顾客数，并用作阻塞理发师进程，初值为0; </li><li>信号量barbers用来记录正在等候顾客的理发师数，并用作 阻塞顾客进程，初值为0; </li><li>信号量mutex用于互斥，初值为1. </li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> CHAIRS 5 <span class="comment">/*为等待的顾客准备的椅子数*/</span> </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphone ; <span class="comment">/*信号灯类型*/</span> </span><br><span class="line">semaphore customers=<span class="number">0</span>; <span class="comment">/*等待服务的顾客数*/</span> </span><br><span class="line">semaphore barbers=<span class="number">0</span>; <span class="comment">/*等待顾客的理发师数*/</span> </span><br><span class="line">semaphore mutex=<span class="number">1</span>; <span class="comment">/*用于互斥*/</span></span><br><span class="line"><span class="keyword">int</span> waiting=<span class="number">0</span>; <span class="comment">/*等待的顾客(还没理发的)，waiting是一个共享变量，对它操作时必须加锁，用mutex加以保护*/</span></span><br><span class="line"></span><br><span class="line">main() </span><br><span class="line">&#123;   </span><br><span class="line">   …… </span><br><span class="line">   cobegin </span><br><span class="line">      barber（）； </span><br><span class="line">      customers（）； </span><br><span class="line">   coend </span><br><span class="line">   …… </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">barber</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="keyword">while</span>(TRUE) <span class="comment">/*理完1人,还有顾客吗?*/</span> </span><br><span class="line">   &#123; </span><br><span class="line">      p(customers); <span class="comment">/*如果顾客数是0，则理发师睡眠*/</span> </span><br><span class="line">      p(mutex); <span class="comment">/*要求进程等待*/</span> </span><br><span class="line">         waiting=waiting<span class="number">-1</span>; <span class="comment">/*等待顾客数减1*/</span> </span><br><span class="line">      v(barbers); <span class="comment">/*一个理发师现在开始理发了*/</span> </span><br><span class="line">      v(mutex); <span class="comment">/*释放等待*/</span> </span><br><span class="line">      cut_hair(); <span class="comment">/*理发(非临界区操作)*/</span> </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customers</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;       </span><br><span class="line">   p(mutex);<span class="comment">/*进入临界区*/</span> </span><br><span class="line">   <span class="keyword">if</span> (waiting &lt; CHAIRS) </span><br><span class="line">   &#123;<span class="comment">/*如果没有空椅子，就离开*/</span> </span><br><span class="line">      waiting = waiting + <span class="number">1</span>;<span class="comment">/*等待顾客数加1*/</span> </span><br><span class="line">      v(customers); <span class="comment">/*如果必要的话，唤醒理发师*/</span> </span><br><span class="line">      v(mutex); <span class="comment">/*释放访问等待*/</span> </span><br><span class="line">      p(barbers); <span class="comment">/*无理发师, 顾客坐着养神*/</span> </span><br><span class="line">      get_haircut();<span class="comment">/*一个顾客坐下等理发*/</span> </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">else</span> </span><br><span class="line">      v(mutex); <span class="comment">/*店里人满了，走吧*/</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>进程通信(Interprocess Communication, IPC)是指进程之间直 接以较高的效率传递较多数据的信息交互方式。</p><p>IPC机制：指消息（message）从一个进程的地址空间拷贝到另一个进程 的地址空间的过程，而不使用共享存储器。</p><p><img src="/2020/01/04/进程及进程管理/image-20200104202215510.png" alt="image-20200104202215510"></p><h3 id="进程通信方式"><a href="#进程通信方式" class="headerlink" title="进程通信方式"></a>进程通信方式</h3><p>消息缓冲通信 </p><ul><li>在消息通信中，接收方和发送方之间有明确的协议和消息格式 。<ul><li>大多数使用消息头：发送/接收进程的ID、被传消息的字节数……</li></ul></li><li>消息缓冲通信方式包括消息缓冲、发送原语和接收原语。<ul><li>发送进程先形成一个消息缓冲区（含消息头和消息内容），然后用发送原语发出。</li><li>接收进程在接收前，在本进程的主存空间设置一个接收区，然后用接收原语接收。</li></ul></li></ul><p>信箱通信</p><ul><li>在信箱通信中，需要定义信箱结构，还包括消息发送和接收功能模块，提供发送原语和接收原语。</li><li>信箱通信中，所使用的信箱可以位于用户空间中，是接收进程地址空间的一部分；也可以放置在操作系统的空间中。</li></ul><p>使用用户空间中的信箱实现消息传递<br>信箱由用户管理，进程可以直接访问信息<br><img src="/2020/01/04/进程及进程管理/image-20200104202506290.png" alt="image-20200104202506290"><br>缺点：</p><ul><li>编译器和加载程序必须为每一个进程分配信箱空间 ；</li><li>接收进程有可能覆盖信息的部分内容，从而造成错误。</li></ul><p>使用系统空间中的信箱实现消息传递<br>信箱由OS管理，任何进程不能直接访问<br><img src="/2020/01/04/进程及进程管理/image-20200104202546621.png" alt="image-20200104202546621"><br>缺点：要求OS为所有的进程分配主存信箱，受系统限制，可 能对通信进程数限制。</p><h2 id="线程概念及特点"><a href="#线程概念及特点" class="headerlink" title="线程概念及特点"></a>线程概念及特点</h2><p>为什么引入线程？</p><ul><li>为了避免多处理机系统在进行远程访问期间的等待现象。</li><li>线程就是进程的一个执行路径，一个进程可以有多条执行路径。这样，一个进程内部就有多个可 以独立活动的单位，可以加快进程处理的速度， 进一步提升并行处理能力。</li></ul><p>线程 定义：线程是比进程更小的活动单位，它是进程中的一个执行路径。</p><p>线程可以这样来描述</p><ul><li>进程中的一条执行路径；</li><li>它有自己私用的堆栈和处理机执行环境 ；</li><li>它与父进程共享分配给父进程的主存；</li><li>它是单个进程所创建的许多个同时存在的线程中的一个。</li></ul><p>线程的特点</p><ul><li>线程是比进程更小的活动单位，它是进程中的一个执 行路径。创建一个线程比创建一个进程开销要小得多。</li><li>实现线程间通信十分方便，因为一个进程创建的多个 线程可以共享地址区域和数据。</li><li>线程是一个动态的概念。</li><li>在进程内创建多线程，可以提高系统的并行处理能力， 加快进程的处理速度。</li></ul><p>进程是任务调度的单位，也是系统资源的分配单位；而线程是进程中的一条执行路径，当系统支持多线程处理时，线程是任务调度的单位，但不是系统资源的分配单位。线程完全继承父进程占有的资源，当它活动时，具有自己的运行现场。</p><p><img src="/2020/01/04/进程及进程管理/image-20200104203133664.png" alt="image-20200104203133664"></p><p>用户线程和内核线程</p><ul><li>用户线程 <ul><li>在内核的支持下，在用户层通过线程库实现 </li><li>创建和调度在用户空间进行，无需内核干预 </li><li>优点：能快速创建和管理 </li><li>缺点：如果内核是单线程的，一旦一个用户线程执行了等待的系统调用，则整个进程阻塞 </li></ul></li><li>内核线程 <ul><li>由OS管理，创建和调度在OS主存空间内完成 </li><li>当一个线程执行时阻塞，内核能调度另一个线 程运行</li></ul></li></ul><h2 id="操作系统的并发机制实例"><a href="#操作系统的并发机制实例" class="headerlink" title="操作系统的并发机制实例"></a>操作系统的并发机制实例</h2><h3 id="创建进程及应用实例"><a href="#创建进程及应用实例" class="headerlink" title="创建进程及应用实例"></a>创建进程及应用实例</h3><p>调用形式 （UNIX/LINUX系统）：pid=fork();<br>功能：创建一个子进程，被创建的子进程是父进程的进程映像的一个副本 (除proc结构外)，在UNIX系统中，除了0#进程外，其它进程都是通过调用进程创建系统调用创建的。</p><p>系统调用 fork 完成的操作<br>UNIX/Linux系统的核心为系统调用fork 完成下列操作：<br>① 为新进程分配一个新的pcb结构；<br>② 为子进程赋一个唯一的进程标识号 (PID)；<br>③ 做一个父进程上下文的逻辑副本。由于进程的正文区 (代码段)可被几个进程所共享，所以核心只要增加某个正文区的引用数即可，而不是真的将该区拷贝到一个新的内存物理区。这就意味着父子进程将执行相同的代码。数据段和堆栈段属于进程的私有数据，需要拷贝到 新的内存区中。<br>④ 增加d与该进程相关联的文件表和索引节点表的引用数。这就意味 着父进程打开的文件子进程可以继续使用。<br>⑤ 对父进程返回子进程的进程号，对子进程返回零。</p><p>如何启动一个新的程序的执行？</p><ul><li>父进程为了启动一个新的程序的执行，在 UNIX/LINUX系统中需要用到exec()类函数</li><li>Exec()类函数很多 作用是根据参数指定的文件名找到可执行文件 ，并用它来取代调用进程的内容，即在调用进 程内部执行一个可执行文件。</li></ul><h3 id="创建线程及应用实例"><a href="#创建线程及应用实例" class="headerlink" title="创建线程及应用实例"></a>创建线程及应用实例</h3><ul><li>LINUX下的多线程程序，需要使用pthread.h，连接时需要使用库libpthread.a。</li><li>Clone( )是LINUX特有的系统调用，用来实现 pthread。与fork( )类似。</li></ul><p>调用形式 ：<code>pthread_create(pthread_t *thread, pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);</code></p><p>等待进程终止 wait(); waitpid();<br>① wait() 语法格式<br>pid=wait(stat_addr);<br>wait()函数使父进程暂停执行，直到它的一个子进程结束为止，该函数的返回值是终止运行的子进程的PID。参数status所指向的变量存放子进程的退出码，即从子进程的main函数返回的值或子进程中exit()函数的参数。如果status不是一个空指针，状态信息将被写入它指向的变量。<br>② waitpid() 语法格式<br>pid=wait(stat_addr);<br>waitpid(pid_t pid,int * status,int options)<br>用来等待子进程的结束，但它用于等待某个特定进程结束。参数pid指明要等待的子进程的PID，参数status的含义与wait()函数中的status相同。</p><h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><h3 id="进程调度的功能"><a href="#进程调度的功能" class="headerlink" title="进程调度的功能"></a>进程调度的功能</h3><p>调度：在众多处于就绪状态的进程中，按一定的原则选择一个进程。</p><p>分派：当处理机空闲时，移出就绪队列中第一个进程，并赋予它使用处理机的权利。</p><p><img src="/2020/01/04/进程及进程管理/image-20200104204241996.png" alt="image-20200104204241996"></p><p>进程调度的功能</p><ul><li>记录进程的有关情况</li><li>决定调度策略<ul><li>优先调度<br>就绪队列按进程优先级高低排序</li><li>先来先服务<br>就绪队列按进程来到的先后次序排序</li></ul></li><li>实施处理机的分配和回收</li></ul><p>进程调度的方式</p><ul><li>什么是调度方式：当一进程正在处理机上执行时，若有某个更为“重要而紧迫” 的进程需要运行，系统如何分配处理机。</li><li>非剥夺方式：当“重要而紧迫”的进程来到时，让正在执行的进程继续执行，直到该进程完成或发生某事件而进入“完成”或“阻塞” 状态时，才把处理机分配给“重要而紧迫”的进程。 </li><li>剥夺方式 当“重要而紧迫”的进程来到时，便暂停正在执行的进程， 立即把处理机分配给优先级更高的进程。</li></ul><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><h4 id="进程优先数调度算法"><a href="#进程优先数调度算法" class="headerlink" title="进程优先数调度算法"></a>进程优先数调度算法</h4><p>什么是进程优先数调度算法<br>预先确定各进程的优先数，系统把处理机的使用权赋予就绪队列中具备最高优先权 (优先数和一定的优先级相对应) 的就绪进程。</p><p>优先数的分类及确定</p><ul><li>静态优先数<br>在进程被创建时确定，且一经确定后在整个进程运行 期间不再改变。</li><li>静态优先数的确定<ul><li>优先数根据进程所需使用的资源来计算</li><li>优先数基于程序运行时间的估计</li><li>优先数基于进程的类型</li></ul></li><li>动态优先数<br>进程优先数在进程运行期间可以改变。</li><li>动态优先数的确定<ul><li>进程使用CPU超过一定数值时，降低优先数</li><li>进程I/O操作后，增加优先数</li><li>进程等待时间超过一定数值时，提高优先数</li></ul></li></ul><h4 id="循环轮转调度算法"><a href="#循环轮转调度算法" class="headerlink" title="循环轮转调度算法"></a>循环轮转调度算法</h4><p>什么是循环轮转调度算法<br>当CPU空闲时，选取就绪队列首元素，赋予一个时间片，当时间片用完时，该进程转为就绪态并进入就绪队列末端。</p><p><img src="/2020/01/04/进程及进程管理/image-20200104204715905.png" alt="image-20200104204715905"></p><p>简单循环轮转调度算法<br>就绪队列中的所有进程以等速度向前进展。<br>q = t/n<br>t 为用户所能接受的响应时间，n为进入系统的进程数目。</p><p>循环轮转调度算法的发展</p><ul><li>可变时间片轮转调度</li><li>多重时间片循环调度</li></ul><h3 id="调度用的进程状态变迁图"><a href="#调度用的进程状态变迁图" class="headerlink" title="调度用的进程状态变迁图"></a>调度用的进程状态变迁图</h3><p><img src="/2020/01/04/进程及进程管理/image-20200104204758996.png" alt="image-20200104204758996"></p><ul><li>进程状态<ul><li>运行状态</li><li>低优先就绪状态</li><li>高优先就绪状态</li><li>因I/O而等待状态</li></ul></li><li>队列结构<ul><li>低优先就绪队列</li><li>高优先就绪队列</li><li>因I/O而等待队列</li></ul></li><li>进程调度算法<br> 优先调度与时间片调度相结合的调度算法<ul><li>当CPU空闲时，若高优先就绪队列非空，则从高优先就绪队列中选择一个进程运行，分配时间片为100ms。</li><li>当CPU空闲时，若高优先就绪队列为空，则从低优先就绪队列中选择一个进程运行，分配时间片为500ms。</li></ul></li><li>调度效果<br>优先照顾I∕O量大的进程；适当照顾计算量大的进程。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进程引入&quot;&gt;&lt;a href=&quot;#进程引入&quot; class=&quot;headerlink&quot; title=&quot;进程引入&quot;&gt;&lt;/a&gt;进程引入&lt;/h2&gt;&lt;h3 id=&quot;顺序程序及特点&quot;&gt;&lt;a href=&quot;#顺序程序及特点&quot; class=&quot;headerlink&quot; title=&quot;顺序程序及特点&quot;&gt;&lt;/a&gt;顺序程序及特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;计算：程序的一次执行过程称为一个计算，它由许多简单操作所组成。&lt;/li&gt;
&lt;li&gt;程序的顺序执行：一个计算的若干操作必须按照严格的先后次序顺序地执行，这类计算过程就是程序的顺序执行过程。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yorxika.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="进程" scheme="http://yorxika.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CH1 算法</title>
    <link href="http://yorxika.github.io/2020/01/02/CH1-%E7%AE%97%E6%B3%95/"/>
    <id>http://yorxika.github.io/2020/01/02/CH1-%E7%AE%97%E6%B3%95/</id>
    <published>2020-01-02T00:48:56.000Z</published>
    <updated>2020-01-02T00:58:16.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法导论"><a href="#算法导论" class="headerlink" title="算法导论"></a>算法导论</h2><h3 id="What-are-algorithms"><a href="#What-are-algorithms" class="headerlink" title="What are algorithms?"></a>What are algorithms?</h3><p>非形式地说，算法就是任何良定义（well-defined）的计算过程，该过程取某个值或值的集合作为输入（input），并产生某个值或者值的集合作为输出（output）。 <a id="more"></a></p><ul><li>算法就是把输入转换成输出的计算步骤。     </li><li>在计算机科学中，算法是使用计算机解一类问题的精确、有效方法的代名词；        </li><li>算法是一组有穷的规则，它规定了解决某一特定类型问题 的一系列运算。 （选自《计算机算法基础》） </li></ul><ul><li>算法由运算组成 <ul><li>算术运算、逻辑运算、关系运算、赋值运算、过程调用 </li></ul></li><li>算法有其特殊性 <ul><li>解决不同问题的算法是不相同的，没有万能的算法 </li></ul></li><li>算法是有穷的计算过程 <ul><li>静态上：规则/运算/语句的数量有穷 </li><li>动态上：计算过程/计算时间有限 </li></ul></li></ul><h3 id="作为一种技术的算法"><a href="#作为一种技术的算法" class="headerlink" title="作为一种技术的算法"></a>作为一种技术的算法</h3><ul><li>算法不仅强调其正确性 </li><li>算法也有好坏之分    <ul><li>效率（Efficiency）对于算法的有效性有非常重要的影响。     </li><li>现实应用中，时间和空间都是有限的资源，因此我们应选择时间和空间方面有效的算法来求解问题 </li></ul></li></ul><h2 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h2><h3 id="循环不变式"><a href="#循环不变式" class="headerlink" title="循环不变式"></a>循环不变式</h3><p>INSERTION-SORT 的for循环中，循环变量为j（j代表当前正要被插入到<br>序列中的元素的下标）。循环过程具有以下性质：<br>        *<em>子数组A[1~j-1]是已经被排好序的子序列。 *</em><br>这一性质，在j被赋予初值2，首次进入循环之前成立，而且每次循环之<br>后（j加了1）、进入下一次循环之前也成立。<br>   ——把这种在第一次进入循环之前成立、每次循环之后还成立的关系称为“循环不变式”或“循环不变性质” 。  </p><ul><li>插入排序for循环的循环不变式可以描述为：在第1<del>8行的for循环的每次迭代开始时，子数组A[1</del>j-1]由原来在 A[1~j-1]中的元素组成，且已按序排列。 </li></ul><p>可以利用循环不变关系证明循环的正确性。<br>分三步走：<br>1）初始化：证明初始状态时循环不变式成立，即证明循环不变式在循 环开始之前为真；<br>2）保持：证明每次循环之后、下一次循环开始之前循环不变式仍为真；<br>3）终止：证明循环可以在有限次循环之后终止。<br>证明循环正确性的思路：<br>第1）和2）步类似于数学归纳法的证明策略<br>第3）步保证算法可以终止<br>如果1）~3）都满足，则说明循环过程正确 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法导论&quot;&gt;&lt;a href=&quot;#算法导论&quot; class=&quot;headerlink&quot; title=&quot;算法导论&quot;&gt;&lt;/a&gt;算法导论&lt;/h2&gt;&lt;h3 id=&quot;What-are-algorithms&quot;&gt;&lt;a href=&quot;#What-are-algorithms&quot; class=&quot;headerlink&quot; title=&quot;What are algorithms?&quot;&gt;&lt;/a&gt;What are algorithms?&lt;/h3&gt;&lt;p&gt;非形式地说，算法就是任何良定义（well-defined）的计算过程，该过程取某个值或值的集合作为输入（input），并产生某个值或者值的集合作为输出（output）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法导论" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
      <category term="算法" scheme="http://yorxika.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>一些讨论</title>
    <link href="http://yorxika.github.io/2019/12/26/%E4%B8%80%E4%BA%9B%E8%AE%A8%E8%AE%BA/"/>
    <id>http://yorxika.github.io/2019/12/26/%E4%B8%80%E4%BA%9B%E8%AE%A8%E8%AE%BA/</id>
    <published>2019-12-26T12:52:23.000Z</published>
    <updated>2019-12-26T13:49:17.897Z</updated>
    
    <content type="html"><![CDATA[<p>计算机系统的性能能被准确测量吗？</p><p>不能，计算机的性能与很多因素有关，比如指令集、程序自身等，是一个综合的考量。所以是没法用一个统一的指标来描述计算机系统的性能，这是不够全面不够客观的。<a id="more"></a>且各种测量的标准，比如MIPS、MFLOPS等等，都是针对某一个或者某一类测试程序而言，但实际上，每一个计算机系统进行的工作都不一样，很难出现像测试程序中设想的样子，所以测试的结果并不能准确衡量一个实际应用中的计算机系统的性能。</p><hr><p>浮点数零与浮点数溢出之间的关系</p><p>浮点数零是阶位E为0且小数位M为0的情况。浮点数溢出有两种情况：上溢和下溢。上溢是指数据绝对值太大，机器无法表示；下溢是指数据绝对值太小，机器无法表示。如果运算结果落在上溢区，则产生溢出错误，机器停止运算；如果运算结果落在下溢区，由于数据绝对值很小，常作零处理。</p><hr><p>什么条件下对CRC检测出的错误可以按照CRC的纠错原理进行纠错</p><p>如果没有总校验位的，CRC至多能检测出一位错，并可以进行纠正。如果增设总校验位，可以判断出一位错和两位错，对于判断出两位错的情况，选择丢弃当前数据，发送送重传信号给传输方。</p><hr><p>如何检测程序运行中的数据溢出错误</p><p>无符号数根据最高进位是否溢出进行判断，具体说来，加法看进位是为1，减法看是否为0<br>有符号数有三种方法：<br>1.两个操作数的符号位相同时判断结果的符号是否与操作数相同<br>2.次高位和最高位进位异或<br>3.利用双符号运算，10负溢出，01正溢出</p><hr><p>为什么计算机采用二进制？</p><p>1.对于计算机而言，数据表示方便使用高低电平表示1,0<br>2.运算规则简单<br>3.利于数据纠错，只需要找出是哪一位错了就能纠错<br>4.可以使用逻辑门进行算数运算</p><hr><p>数据存放的大、小端方式对程序设计有何影响？</p><p>数据存放的大小端方式对程序员透明。一般来说，在同一机器，程序员不用考虑这一问题（因为在统一要么大端要么小端）。而且原则上，不同机器在传输过程中一定会考虑大小端问题（网络的表示层进行转化），但是也有可能会在传输过程中有的机器做的不够好，产生高低字节反转或者未识别大小端的情况。</p><hr><p>为什么动态存储器比精态存储器慢</p><p>DRAM读之前需要预充电<br>DRAM需要每隔一段时间进行刷新<br>DRAM存储体的行列地址线复用，导致每次需要分时传送</p><hr><p>为什么计算机需要使用多种数据寻址方式</p><p>从数据的存放特点上看，计算机需要处理的数据的存储方式是多种多样的，可以是存储在寄存器中的一些中间结果，可以是调入到内存中的一些变量，也可以是存放在主存设备中的数据，要将这些不同存储方式的数据调入CPU内进行运算，仅采用单一的寻址方式是很难实现的；<br>从程序设计的角度上看，多种的数据寻址方式能为程序设计很高的灵活性，例如对数组或结构成员的访问，可采用基址寻址，对指针对象进行访问可以用寄存器间接寻址，等等；<br>从执行的效率角度上看，寄存器寻址速度很快，但不能访问主存，寄存器间接寻址速度较慢，但可以访问主存，立即寻址较快，但寻址范围受限，为了使程序能够获得较高的性能但又不失方便性，多种的数据寻址方式能够均衡这两个矛盾。</p><hr><p>系统总线能否用作存储总线</p><p>原理上可以，但会降低系统并行性，增加复杂度</p><hr><p>总线性能分析 试从总线的性能指标分析，为什么目前串行总线比较流行。</p><p>串行传输所需要的传输线少，成本低，适合远距离传输。缺点：每次只能传输一位数据，所以传输速度很慢。并行传输的需要的传输线与信息位有关，所有位同时传输，传输速度非常快，但是要求的线路多，成本很高，适用于短距离传输。实际使用过程中，使用串行传输，用户基本感觉不到太大的延迟，所以串行传输在成本上比较占据优势。</p><hr><p>单级总线结构 为什么嵌入式处理器系统通常采用单级总线结构？</p><p>程序和数据共同使用一个存储空间，程序指令存储器地址和数据存储地址指向同一个存储器的不同物理位置。该结构的程序指令宽度相同，采用单一的地址及数据总线，比较典型的例子就是MIPS</p><hr><p>总线仲裁 试分析什么情况下需要进行总线仲裁。</p><p>系统中多个设备或模块可能同时申请对总线的使用权，为避免产生总线冲突，需由总线仲裁机构合理地控制和管理系统中需要占用总线的申请者，在多个申请者同时提出总线请求时，以一定的优先算法仲裁哪个应获得对总线的使用权。</p><hr><p>总线标准  能否预测一下，下一代总线标准会是怎样的。</p><p>1、面向存储器的双总线结构信息传送效率较高，这是它的主要优点。但CPU与I/O接口都要访问存储器时，仍会产生冲突。所以下一步是解决或减少这样的冲突。<br>2、CPU与高速的局部存储器和局部I/O接口通过高传输速率的局部总线连接，速度较慢的全局存储器和全局I/O接口与较慢的全局总线连接，从而兼顾了高速设备和慢速设备，使它们之间不互相牵扯。<br>3、简化了硬件的设计。便于采用模块化结构设计方法，面向总线的微型计算机设计只要按照这些规定制作cpu插件、存储器插件以及I/O插件等，将它们连入总线就可工作，而不必考虑总线的详细操作。<br>4、简化了系统结构。整个系统结构清晰。连线少，底板连线可以印制化。<br>5、系统扩充性好。一是规模扩充，规模扩充仅仅需要多插一些同类型的插件。二是功能扩充，功能扩充仅仅需要按照总线标准设计新插件，插件插入机器的位置往往没有严格的限制。<br>6、系统更新性能好。因为cpu、存储器、I/O接口等都是按总线规约挂到总线上的，因而只要总线设计恰当，可以随时随着处理器的芯片以及其他有关芯片的进展设计新的插件，新的插件插到底板上对系统进行更新，其他插件和底板连线一般不需要改。<br>7、便于故障诊断和维修。用主板测试卡可以很方便找到出现故障的部位，以及总线类型。</p><hr><p>存储IO和通信IO  举例分析存储IO和通信IO的异同。</p><p>存储IO是在缓存与磁盘阵列之间进行数据交换的过程，涉及IO接口和读写性能，存储IO的速度取决于磁盘的速度。<br>通信IO是通过网络进行数据交换，比如socket，执行阻塞IO，通过应用层，运输层，网络层，数据链路层，物理层的五级网络架构进行数据的封装和交换。</p><hr><p>中断IO方式  为什么中断IO方式的应用最广泛。</p><p>可以让CPU避免忙于查询各个外部设备的状态，提高CPU利用率;<br>中断除了传输数据还可以处理异常;<br>软硬件结合的方式也让使用成本变得不是那么高。<br>因而应用广泛。</p><p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。 同步IO模式，程序暂停执行后续代码，等待数据写入磁盘，再接着往下执行； 异步IO模式，CPU不等待，只是告诉磁盘继续读写，后续代码可以立刻接着执行。 当有新的IO请求时，设备发出中断请求，CPU收到请求后，进行IO请求中断响应，完成响应后恢复现场，回到原来的地方继续执行。 当IO完成时，设备发出完成IO的中断信号，CPU进入中断处理读写完成的数据和缓存。 采用中断IO的方式，大大提高了有IO需求时，CPU的工作效率</p><hr><p>中断优先级  中断优先级低的中断请求能否优先处理完成，为什么？</p><p>在中断处理程序中设置新的中断屏蔽字。为了能根据需要，改变实际的中断处理次序，很多机器都设置了中断屏蔽寄存器硬件，以决定是否让某级中断请求进入中断优先权电路进行优先权比较。级别高的中断请求优先得到响应。只要将每一类中断处理程序的各级中断屏蔽位设置成不同的状态，就可以得到所希望的中断处理次序。因此，可以通过设置中断屏蔽字实现低优先级的中断先处理，实际上，可以任意改变处理次序，这为中断处理带来了灵活性。</p><hr><p>DMA传输模式  你觉得DMA传输模式的控制可由什么部件来实现的。</p><p>当外围设备要求传送一批数据时，由<strong>DMA控制器</strong>发一个停止信号给CPU，要求CPU放弃对地址总线、数据总线和有关控制总线的使用权。DMA控制器获得总线控制权以后，开始进行数据传送。在一批数据传送完毕后，DMA控制器通知CPU可以使用内存，并把总线控制权交还给CPU在这种DMA传送过程中，CPU基本处于不工作状态或者说保持状态。DMA传输方式无需CPU直接控制传输，也没有中断处理方式那样保留现场和恢复现场的过程，通过硬件为RAM与I/O设备开辟一条直接传送数据的通路，使CPU的效率大为提高。</p><hr><p>实验中的所选用的生成多项式对编码求余数的循环周期是多少？为什么？</p><p>CRC-5，余数为5位，只有全为0时表示正确，剩余31种状态表示错误，也就是出错的状态有31种。</p><hr><p>Logisim中的毛刺如何消除？</p><p>增加冗余项、增加惯性延时环节（logisim中可以增加缓冲器），选通法</p><hr><p>逻辑门组件最多可以有32个输入，实际电路中有这样的逻辑门吗？</p><p>理论上有，但是实际实验时输入太多会使逻辑变得非常复杂，而且输入增多, 门电路里的晶体管也会增多, 本身即会增大门电路时延, 同时多晶体管也不利于电平的稳定控制，需要更大的电压。</p><hr><p>如果合并LW，SW指令第三个状态，微程序控制器需要如何修改？<br>本次实验中，LW指令，SW指令的第三个时钟周期的状态进行了分离，简化了设计，如果不进行状态分离，微程序控制器需要做什么修改？给出你的方案。</p><p>增加一个判断位，假设判断位不为00时使用下址字段给出的地址，判断位为其他值时使用地址转移逻辑给出的地址（判断位为01表示计算地址状态），更改地址转移逻辑，增加判断位为地址转移逻辑输入，当判断位为01时，地址转移逻辑根据指令的不同给出不同的下址</p><hr><p>硬件cache机制设计实验研讨<br>1）如果采用软件程序来实现cache，哪种映射方法更有效？<br>2）如果采用软件程序实现cache，LRU算法采用什么数据结构实现更加方便？<br>3）软件实现中不可能实现全相联查找的并发查找机制，如何提升查找速度？</p><p>我个人回答：全相连，哈希链表，哈希</p><hr><p>MIPS 寄存器文件设计实验研讨  零号寄存器的值为什么要恒零，这样做有什么好处？</p><p>汇编代码中有大量赋值为0或者与0比较的指令，设置一个恒0的寄存器可以避免这类指令中装载立即数0的过程，可以提高效率</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机系统的性能能被准确测量吗？&lt;/p&gt;
&lt;p&gt;不能，计算机的性能与很多因素有关，比如指令集、程序自身等，是一个综合的考量。所以是没法用一个统一的指标来描述计算机系统的性能，这是不够全面不够客观的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>输入输出系统</title>
    <link href="http://yorxika.github.io/2019/12/26/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yorxika.github.io/2019/12/26/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2019-12-26T11:22:46.000Z</published>
    <updated>2019-12-26T12:51:55.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入输出接口概述"><a href="#输入输出接口概述" class="headerlink" title="输入输出接口概述"></a>输入输出接口概述</h2><p>输入/输出系统组成：外部设备、接口部件、总线以及相应的管理软件统称为计算机的 输入/输出系统，简称I/O系统。<a id="more"></a><br><img src="/2019/12/26/输入输出系统/image-20191226193057280.png" alt="image-20191226193057280"></p><p>I/O系统基本功能：</p><ul><li>完成计算机内部二进制信息与外部多种信息形式间的交流；</li><li>保证CPU能够正确选择输入输出设备并实现对其控制，传输大量数据、 避免数据出错；</li><li>利用数据缓冲、选择合适的数据传送方式等，实现主机与外设间 速度的匹配。</li></ul><p>I/O系统特点：</p><ul><li>异步性：外围设备相对于处理机通常是异步工作的；</li><li>实时性：当外围设备与处理机交互时，由于设备的类型不同，它们的工 作步调是不同的，处理机必须按照不同设备所要求传送方式和传输速率 不失时机地为设备提供服务，这就要求实时性控制；</li><li>与设备无关性：各种外部设备必须根据其特点和要求选择一种标准接口 和处理机进行连接，它们之间的差别必须由设备本身的控制器通过硬件 和软件来填补；这样，处理机本身无须了解外设的具体细节，可以采用 统一的硬件和软件对其管理。</li></ul><h3 id="输入-输出设备同CPU交换数据的过程"><a href="#输入-输出设备同CPU交换数据的过程" class="headerlink" title="输入/输出设备同CPU交换数据的过程"></a>输入/输出设备同CPU交换数据的过程</h3><p>输入过程：</p><ul><li>CPU把一个地址值放在地址总线上，这一步将选择某一输入设备；</li><li>CPU等候输入设备的数据成为有效；</li><li>CPU从数据总线读入数据，并放在一个相应的寄存器中</li></ul><p>输出过程：</p><ul><li>CPU把一个地址值放在地址总线上，选择输出设备</li><li>CPU把数据放在数据总线上；</li><li>输出设备认为数据有效，从而把数据取走</li></ul><h3 id="I-O系统性能"><a href="#I-O系统性能" class="headerlink" title="I/O系统性能"></a>I/O系统性能</h3><p>按照主要完成的工作可以分为以下二类：存储 I/O  通信 I/O</p><p>I/O系统的性能对CPU的性能有很大的影响，若两者的性能不匹配，I/O系统就有可能成为整个系统的瓶颈。</p><p>评价I/O系统性能的主要参数：</p><ul><li>连接特性：哪些I/O设备可以和计算机系统相连接</li><li>I/O系统的容量：I/O系统可以容纳的I/O设备数 </li><li>响应时间和吞吐率等</li><li>系统的响应时间：从用户输入命令开始，到得到结果所花费的时间； 由I/O系统的响应时间和CPU的处理时间两部分构成，单位通常用秒（s）表示。</li><li>I/O的吞吐率：单位时间完成的I/O操作次数，单位通常用IOP表示。</li></ul><h2 id="输入输出方式"><a href="#输入输出方式" class="headerlink" title="输入输出方式"></a>输入输出方式</h2><p>输入/输出方式：</p><ul><li>无条件I/O方式</li><li>程序控制I/O方式</li><li>中断I/O方式</li><li>DMA（Direct Memory Access）方式</li><li>通道方式</li><li>I/O处理机方式</li></ul><h3 id="无条件I-O方式"><a href="#无条件I-O方式" class="headerlink" title="无条件I/O方式"></a>无条件I/O方式</h3><ul><li>在程序的适当位置直接安排 I/O指令，当程序执行到这些 I/O指令时，CPU默认外设始终是准备就绪的（I/O总是准备好接收CPU的输出数据，或 总是准备好向CPU输入数据）， 无需检查I/O的状态，就进行数据的传输；</li><li>硬件接口电路和软件控制程序都比较简单。输入时，必须确保CPU执行 I/O指令读取数据时，外设已将数据 准备好；输出时，必须确保外部设备 的数据锁存器为空，即外设已将上次 的数据取走，等待接收新的数据，否 则会导致数据传送出错，但一般的外设难以满足这种要求。</li></ul><h3 id="程序控制方式"><a href="#程序控制方式" class="headerlink" title="程序控制方式"></a>程序控制方式</h3><p>一种早期计算机采用的输入/输出方式，数据在计算机和外设之 间的传送全部靠计算机程序控制；计算机执行I/O指令时，先获取外设状态，并根据外设的状态决定下一步操作。</p><p>程序查询的I/O原理：</p><ul><li>程序先向I/O设备发出I/O命令字； </li><li>读取I/O设备工作状态信息； </li><li>检查状态字中的标志，看是否可以进行数据交换； </li><li>若设备未准备就绪，则返回到上步，重复查询；否则，发出设备准备就绪信号； </li><li>CPU与I/O接口的数据缓冲寄存器进行数据交换，与此同时，将接口中的状态标志复位<br><img src="/2019/12/26/输入输出系统/image-20191226194626791.png" alt="image-20191226194626791"></li></ul><p>设备状态字寄存器：</p><ul><li>用来标志设备的工作状态，以便接口对外部设备进行监视。 </li><li>CPU通过程序查询设备状态位来判断设备的状态。 </li><li>因此，设备状态寄存器是设备对主机的窗口，主机通过它了解设备的 状态，并对设备设置操作方式。 </li><li>设备状态寄存器又叫设备状态字（DSW）是设备所有状态的集合，每 种状态均用一个触发器来表示。</li></ul><p>特点：何时对何设备进行输入输出操作完全受CPU控制， 外围设备与CPU处于异步工作关系，数据的输入/输出都要经过CPU。<br>优点：计算机和外设之间能够同步，控制简单，硬件简单。<br>缺点：CPU的大量时间用来查询外设的状态</p><h3 id="中断I-O方式"><a href="#中断I-O方式" class="headerlink" title="中断I/O方式"></a>中断I/O方式</h3><ul><li>当外设准备好后，主动通知CPU并进行接收或输出数据的方法；</li><li>CPU接到外设的通知后暂停现行的工作，转入中断服务程序，和外设交换数据， 等中断程序处理完毕后，再返回到被中断的原程序中继续以前被暂停的工作。</li></ul><p>优点：节约CPU时间，实时性好。<br>缺点：控制电路相对复杂，服务开销较大（现场和断点的保护）。<br>应用场合：实时性要求高，且数据传输量又不大的场合</p><h3 id="DMA方式"><a href="#DMA方式" class="headerlink" title="DMA方式"></a>DMA方式</h3><ul><li>是一种完全由硬件执行的I/O交换方式</li><li>当外设准备好后，通知DMA控制器，DMA控制器从CPU接管总线，并完成外 设和内存之间的大量数据传输；传输完成后DMA控制器将总线控制权交还给 CPU，整个数据交换的过程不需要CPU参与。</li></ul><p>优点：既有中断的优点，同时又降低了服务开销。<br>缺点：控制电路更加复杂。<br>应用场合：高速、大批量数据传输。</p><h3 id="通道和I-O处理机方式"><a href="#通道和I-O处理机方式" class="headerlink" title="通道和I/O处理机方式"></a>通道和I/O处理机方式</h3><ul><li>复杂的计算机系统中，外围设备的台数一般比较多，设备的种类、工作方式 和工作速度的差别很大，为了把对外围设备的管理工作从CPU中分离出来，采 用通道或I/O处理机方式。</li><li>通道是能够专门执行I/O指令的处理机，它可以实现对外围设备的统一管理， 以及外设与主存之间的数据传输。</li><li>I/O处理机是通道方式的进一步发展，它的结构更接近于一般处理机。</li></ul><h2 id="中断请求与响应"><a href="#中断请求与响应" class="headerlink" title="中断请求与响应"></a>中断请求与响应</h2><p>中断：是指CPU在正常运行程序时，由于内部/外部事 件（或由程序）引起CPU中断正在运行的程序，而转到 为中断事件服务的程序中去，服务完毕，再返回执行原 程序的这一过程。<br>中断的特征：具有随机性。</p><p>中断的作用：</p><ul><li><p>实现主机与外设之间的并行工作</p></li><li><p>故障处理：中断系统能使计算机在运行过程中出现故障的时候， 调用相应的中断服务程序处理故障。</p></li><li><p>实时处理<br><img src="/2019/12/26/输入输出系统/image-20191226200348777.png" alt="image-20191226200348777"></p><h3 id="中断的类型"><a href="#中断的类型" class="headerlink" title="中断的类型"></a>中断的类型</h3><ul><li>内部中断</li><li>软件中断</li><li>异常<ul><li>故障(Fault)</li><li>自陷(Trap)</li><li>终止(Abort)</li></ul></li></ul></li><li><p>外部中断</p><ul><li>可屏蔽中断INTR</li><li>不可屏蔽中断NMI</li></ul></li><li><p>内部中断：来自于CPU内部的指令中断请求，分为软件中断和异常。</p></li><li><p>外部中断：中断请求来自CPU外部，又分为可屏蔽和不可屏蔽中断。</p></li><li><p>不可屏蔽中断NMI：由系统内部硬件引发的中断，优先级高于外部硬 件中断，且不受中断允许标志位的影响，所以是不可屏蔽中断。</p></li><li><p>可屏蔽中断：由外设通过中断请求线向处理器申请而产生的中断，处 理器可以用指令来屏蔽（禁止），即不响应它的中断请求。</p></li></ul><h3 id="中断系统的基本功能"><a href="#中断系统的基本功能" class="headerlink" title="中断系统的基本功能"></a>中断系统的基本功能</h3><ul><li>中断请求信号保持与清楚</li><li>中断优先级</li><li>中断源识别</li><li>中断的处理</li><li>中断控制</li></ul><h4 id="中断请求信号保持与清除"><a href="#中断请求信号保持与清除" class="headerlink" title="中断请求信号保持与清除"></a>中断请求信号保持与清除</h4><ul><li>中断号：是系统分配给每个中断源的代号，以便识别和处理。中断号在中断处理过程中起到很重要的作用。</li><li>中断号的获取：CPU对系统中不同类型的中断源，获取它们的中断号 的方法是不同的。</li></ul><p><img src="/2019/12/26/输入输出系统/image-20191226200930087.png" alt="image-20191226200930087"></p><h4 id="中断控制"><a href="#中断控制" class="headerlink" title="中断控制"></a>中断控制</h4><p>中断触发方式：是指外设以什么逻辑信号去申请中断，即边沿触发和电 平触发两种方式。<br>中断排队方式：当系统有多个中断源时，就可能出现同时有几个中断源 都申请中断，而处理器在一个时刻只能响应并处理一个中断请求；为此， 要进行中断排队。处理器按“优先级高的先服务”的原则提供服务。</p><ul><li>按优先级排队：根据任务的轻重缓急，给每个中断源指定CPU响应的 优先级，任务紧急的先响应，可以暂缓的后响应。 </li><li>循环轮流排队：不分级别高低，CPU轮流响应各个中断源的中断请求。</li></ul><p>中断嵌套：</p><ul><li>当CPU正在处理某个中断时，会出现优先级更高的 中断源申请中断；为了使更紧急的、级别更高的中断源及时得到服务，需要暂时打断（挂起）当前正 在执行的中断服务程序，去处理级别更高的中断请 求，处理完成后再返回被打断了的中断服务程序继 续执行。 </li><li>但级别相同或级别低的中断源不能打断级别高的中 断服务，这就是所谓的中断嵌套。 </li><li>可屏蔽中断可以进行中断嵌套。NMI不可以进行中断嵌套。</li></ul><p>中断屏蔽：</p><ul><li>处理器用指令来控制中断屏蔽触 发器的状态，从而控制是否接受 某个特殊外设的中断请求。</li><li>处理器内部也有一个中断允许触 发器，只有当其为“1”（即开中 断），CPU才能响应外部中断。</li></ul><p>中断优先级：是指CPU响应和处理中断请求的先后次序<br>为了兼顾中断响应的时效与配置的灵活，通常采用两套机制结合组成 中断优先序管理体系：</p><ul><li>硬件响应优先序：未被屏蔽的几个中断源同时提出申请时， CPU选择服务对象的顺序由硬件电路实现，用户不能修改。 </li><li>软件服务优先序：在各中断服务程序开头，用软件设置自己 的中断屏蔽字，以此改变实际服务顺序。</li></ul><h4 id="中断处理"><a href="#中断处理" class="headerlink" title="中断处理"></a>中断处理</h4><ul><li>中断响应周期：当CPU收到外设的中断请求后，如果当前一条指令已执行完，且允许中断， CPU进入中断响应周期，发出中断应 答信号完成一个中断响应周期。</li><li>中断响应：读取中断源的中断号，完成中断申请与中断响应的握手过程。</li></ul><p>中断处理：</p><ul><li><p>标志位的处理与断点保存<br>处理器获得外部中断源的中断号后，保存断点（返回地址），关闭中断，保护现场。</p></li><li><p>向中断服务程序转移并执行中断服务程序</p></li><li><p>返回断点<br>中断服务程序执行完毕后，恢复断点和现场， 要返回主程序。</p><p>单级中断处理流程：<br><img src="/2019/12/26/输入输出系统/image-20191226201407259.png" alt="image-20191226201407259"></p><p>多级中断处理流程：<br><img src="/2019/12/26/输入输出系统/image-20191226201438871.png" alt="image-20191226201438871"></p><h2 id="DMA方式-1"><a href="#DMA方式-1" class="headerlink" title="DMA方式"></a>DMA方式</h2></li></ul><p>DMA方式的基本原理：数据的传送不经过CPU，由DMA控制器实现内存和外设、外设和外 设之间的直接快速传送。<br>用于需要高速大批量数据传送的系统中。<br><img src="/2019/12/26/输入输出系统/image-20191226202606347.png" alt="image-20191226202606347"></p><p>DMA传输计算机系统构成：</p><ul><li>DMA控制器作为主设备之一<br><img src="/2019/12/26/输入输出系统/image-20191226202653346.png" alt="image-20191226202653346"></li><li>DMA控制器与I0接口集成<br><img src="/2019/12/26/输入输出系统/image-20191226202732946.png" alt="image-20191226202732946"></li><li>DMA控制器提供专门I/O中间<br><img src="/2019/12/26/输入输出系统/image-20191226202757677.png" alt="image-20191226202757677"></li></ul><p>DMA控制器(DMAC)：<br>DMA控制器的两种工作状态</p><ul><li>被动态（受控器）：未取得总线控制权，受CPU的控制。</li><li>主动态（主控器）：接管并取得总线控制权，取代CPU而成为系统的主控者。</li></ul><h3 id="DMA传输步骤"><a href="#DMA传输步骤" class="headerlink" title="DMA传输步骤"></a>DMA传输步骤</h3><ul><li>申请阶段：一个设备接口试图通过总线直接向另一个设备发送数据(一般是大批量的数据)，它会先向 CPU发送DMA请求信号；</li><li>响应阶段：CPU收到DMA请求信号后，在当前的总线周期结束后，会按DMA信号的优先级和提出 DMA请求的先后顺序响应DMA信号；</li><li>数据传送阶段 CPU对某个设备接口响应DMA请求时，会让出总线控制权；于是在DMA控制器的管理下，外设和存储器直接进行数据交换，而不需CPU干预；</li><li>传送结束阶段 ：数据传送完毕后，设备接口会向CPU发送DMA结 束信号，交还总线控制权。</li></ul><h3 id="DMA操作类型"><a href="#DMA操作类型" class="headerlink" title="DMA操作类型"></a>DMA操作类型</h3><ul><li>数据传送：把源地址的数据传输到目的地址去（存储器或I/O）。</li><li>数据校验：不进行数据传输，只对数据块内部的每个字节进行某种校验； 这种数据校验一般安排在读数据块之后，以便校验所读的数据是否有效。</li><li>数据检索：不进行数据传输，只是在指定的内存区域内查找某个关键字节 或某几个数据位是否存在</li></ul><h3 id="DMA操作方式"><a href="#DMA操作方式" class="headerlink" title="DMA操作方式"></a>DMA操作方式</h3><ul><li>单字节传输模式：每次DMA操作传送一个字节后，接着释放总线。</li><li>块传输模式：连续传送多个字节，每传输一个字节，当前字节计数器 减1，当前地址寄存器加1或减1，直到所要求的字节数传输完（当前 字节计数器减至0），然后释放总线。</li><li>请求传输模式：DMA控制器要询问外设，当外设请求信号无效时， 暂停传输（不释放总线）；当请求信号再次有效后，继续进行传输。</li><li>级联传输模式：多片DMA控制器级联，构成主从式DMA系统。</li></ul><h3 id="DMA传输模式"><a href="#DMA传输模式" class="headerlink" title="DMA传输模式"></a>DMA传输模式</h3><h4 id="停止CPU访问内存"><a href="#停止CPU访问内存" class="headerlink" title="停止CPU访问内存"></a>停止CPU访问内存</h4><p>当需要传送一批数据时，DMA控制器首先要求CPU放弃对总线的控制权；然后开始进行数据传送。在一批数据传送完毕后，DMA控制器通知CPU可以使用内存，并把总线控制权交还给CPU。<br>在这种DMA传送过程中，CPU基本处于不工作状态或者说保持状态。<br>优点：控制简单，它适用于数据传输率很高的设备进行成组传送。<br>缺点：在DMA控制器访内存阶段，内存的效能没有充分发挥，相当一部分内存 工作周期是空闲的。这是因为，传送两个数据之间的间隔一般总是大于内 存存储周期，即使高速I/O设备也是如此。 </p><h4 id="请求传输模式——周期挪用"><a href="#请求传输模式——周期挪用" class="headerlink" title="请求传输模式——周期挪用"></a>请求传输模式——周期挪用</h4><p>当I/O设备没有DMA请求时，CPU按程序要求访问内存；一旦I/O设备有DMA请求，则由I/O设备挪用一个或几个内存周期。<br>I/O设备要求DMA传送时可能遇到两种情况： </p><ul><li>当CPU不需要访内时，此时I/O访内与CPU访内没有冲突，即 I/O设备挪用一二个内存周期对CPU执行程序没有任何影响； </li><li>CPU也同时要求访问内存，这就产生了访存冲突，在这种情况 下I/O设备访存优先。<br>优点：既实现了I/O传送，又较好地发挥了内存和CPU的效率，是一种广泛采 用的方法。<br>缺点：I/O设备每一次周期挪用都有申请、建立、归还总线控制权的过程，所 以传送一个字对内存来说要占用一个周期，但对DMA控制器来说一般要2-5个内存周期；因此，周期挪用方法适用于I/O设备读写周期大于内存存储周期的 情况。</li></ul><h4 id="请求传输模式——DMA与CPU交替访存"><a href="#请求传输模式——DMA与CPU交替访存" class="headerlink" title="请求传输模式——DMA与CPU交替访存"></a>请求传输模式——DMA与CPU交替访存</h4><p>如果CPU的工作周期比内存存取周期长很多，此时采用交替访存的方法，可以使DMA传送和CPU同时发挥最高的效率。<br>这种方式不需要总线使用权的申请、建立和归还过 程，总线使用权是通过分 时进行的，这种总线控制权的转移几乎不需要什么时间，所以对DMA传送来讲效率是很高的。<br>这种传送方式又称为”透明的DMA”方式，在透 明的DMA方式下工作，CPU既不停止主程序的 运行，也不进入等待状态，同样是一种高效率的 工作方式。<br>缺点：相应的硬件逻辑也就更加复杂。 </p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>采用DMA方式传送数据时，每传送一个数据就要用一个（<strong>存储周期</strong>）时间。</p><hr><p>通道对CPU的请求形式是(<strong>中断</strong>)</p><hr><p>描述PCI总线中基本概念正确的句子是（<strong>ACD</strong>）。<br>A.HOST 总线不仅连接主存，还可以连接多个CPU<br>B.以桥连接实现的PCI总线结构不允许许多条总线并行工作<br>C.PCI 总线体系中有三种桥，它们都是PCI 设备<br>D.桥的作用可使所有的存取都按CPU 的需要出现在总线上</p><hr><p>中断向量地址是<strong>中断服务例行程序入口地址的指示器</strong></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;输入输出接口概述&quot;&gt;&lt;a href=&quot;#输入输出接口概述&quot; class=&quot;headerlink&quot; title=&quot;输入输出接口概述&quot;&gt;&lt;/a&gt;输入输出接口概述&lt;/h2&gt;&lt;p&gt;输入/输出系统组成：外部设备、接口部件、总线以及相应的管理软件统称为计算机的 输入/输出系统，简称I/O系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>系统总线</title>
    <link href="http://yorxika.github.io/2019/12/26/%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF/"/>
    <id>http://yorxika.github.io/2019/12/26/%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF/</id>
    <published>2019-12-26T08:40:21.000Z</published>
    <updated>2019-12-26T10:35:14.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总线的特性及其应用"><a href="#总线的特性及其应用" class="headerlink" title="总线的特性及其应用"></a>总线的特性及其应用</h2><p>总线的概念：是计算机体系结构的重要组成部分，通过它可以将计算机系统中各个功能部件连接起来，构成一个完整的系统。</p><a id="more"></a><p>总线的作用：</p><ul><li>是各功能部件间传递各类信息的通道；</li><li>是系统中各部件间的物理接口，能够减少各部件通信的复杂程度； </li><li>提供信息交换时所需的数据、地址、时序和控制信息； </li><li>提供一个共同遵循的协议或标准； </li><li>不应成为整个计算机性能的瓶颈； </li><li>方便计算机系统的集成、扩展和进化。</li></ul><p>总线的分类：总线分类的方式有很多，如被分为外部总线和内部 总线、系统总线和非系统总线、片内总线和PCB板级总线、串行总线 和并行总线、高速总线和低速总线、同步总线和异步总线，专用总线 和通用总线等等。</p><h3 id="按用途分"><a href="#按用途分" class="headerlink" title="按用途分"></a>按用途分</h3><ul><li>存储总线：短距离、 高速总线，与存储器 的特性相匹配，尽最 大可能提高处理器与 存储器之间的数据带 宽，针对Cache块数 据传输进行性能优化；</li><li>系统总线：又称内 部总线或板级总线， 是计算机系统中最 重要的总线，也是 连接存储总线和I/O 总线的中间总线；</li><li>I/O总线：通常连 接距离较远、速度 相对较慢，用于连 接多种外部设备， 同时与系统总线或 存储总线连接。</li></ul><h3 id="按位置分"><a href="#按位置分" class="headerlink" title="按位置分"></a>按位置分</h3><p>按照总线所在的位置，总线可以分为：</p><ul><li>外部总线：USB、火线（IEEE-1394）等</li><li>内部总线：PCI、AGP等</li><li>片内总线：AMBA</li></ul><h3 id="总线的组成"><a href="#总线的组成" class="headerlink" title="总线的组成"></a>总线的组成</h3><ul><li>数据总线：用于传送数据信息，通常是双向三态形式的总线；</li><li>地址总线：专门用来传送地址，地址总线总是单向三态的;</li><li>控制总线：用来传送控制信号和时序信号。</li><li>电源线和地</li></ul><h2 id="总线性能和总线事物"><a href="#总线性能和总线事物" class="headerlink" title="总线性能和总线事物"></a>总线性能和总线事物</h2><h3 id="总线性能参数："><a href="#总线性能参数：" class="headerlink" title="总线性能参数："></a>总线性能参数：</h3><p>总线性能参数：</p><ul><li>总线频率：反映总线工作的速率（f），通常单位是MHz； </li><li>总线宽度：数据总线的位数（w），单位是b（位）， 是微型计算机的一个重要指标，通常与处理器的字长相一致； </li><li>总线传输速率：总线上可传输的数据总量（BW），单位是MB/s； 总线传输速率＝（总线宽度÷8位）×总线频率 BW = （w÷8）× f </li><li>同步方式：同步、异步</li><li>多路复用：地址线和数据线能否共用一条物理线；</li><li>信号线数量：数据线、控制线和地址线的总和；</li><li>总线控制方式：传输方式、配置方式、中断分配和仲裁方式等。</li></ul><h3 id="总线事物"><a href="#总线事物" class="headerlink" title="总线事物"></a>总线事物</h3><ul><li>总线事务：从请求总线到完成总线使用的操作序列称 为总线事务（Bus Transaction），它是在一个总线周 期中发生的一系列活动。</li><li>典型的总线事务包括：请求操作、裁决操作、地址传 输、数据传输和总线释放。</li></ul><p>主设备（master）：能够提出申请并获得总线控制权的设备；<br>从设备（slave）   ：只能被动接受总线控制传送数据的设备。</p><p><img src="/2019/12/26/系统总线/image-20191226170508498.png" alt="image-20191226170508498"></p><h3 id="总线传输过程"><a href="#总线传输过程" class="headerlink" title="总线传输过程"></a>总线传输过程</h3><ul><li>总线传输：在主设备（如CPU、DMA控制器等）控制 下通过总线进行的信息传送（数据读写）操作。 </li><li>总线完成一次数据传输操作，一般经过如下四个阶段：<ul><li>申请与仲裁阶段</li><li>寻址阶段</li><li>传输阶段</li><li>结束阶段</li></ul></li></ul><p>常见总线操作：</p><ul><li>读操作（Read）</li><li>写操作（Write）</li><li>读修改写操作（Read-modify-Write）</li><li>写后读操作（Read-after-Write）</li><li>块操作（Block）等</li></ul><h2 id="总线连接方式"><a href="#总线连接方式" class="headerlink" title="总线连接方式"></a>总线连接方式</h2><h3 id="单总线结构"><a href="#单总线结构" class="headerlink" title="单总线结构"></a>单总线结构</h3><ul><li>访问存储器和访问外设指令相同，由地址来区分；</li><li>总线简单，使用灵活，易于扩展；</li><li>任意两设备之间理论上都可以直接交换信息；</li><li>所有设备分时工作，仅适用于慢速的计算机系统中。</li></ul><p><img src="/2019/12/26/系统总线/image-20191226171940833.png" alt="image-20191226171940833"></p><h3 id="双级总线结构"><a href="#双级总线结构" class="headerlink" title="双级总线结构"></a>双级总线结构</h3><ul><li>由于外设和内存分处于不同的总线，需要增加I/O指令；</li><li>存储总线的增加减轻了系统总线的负担，提高了并行性； </li><li>仍然保持了单总线结构的系统简单、易于扩充的优点。</li></ul><p><img src="/2019/12/26/系统总线/image-20191226172026248.png" alt="image-20191226172026248"></p><h3 id="多级总线结构"><a href="#多级总线结构" class="headerlink" title="多级总线结构"></a>多级总线结构</h3><ul><li>在双级总线结构的基础上增加I/O总线构成； </li><li>并行性进一步提高，并可以通过增加通道或IO处理机来分担部分CPU 的I/O功能，但是总线结构得越来越复杂。</li></ul><p><img src="/2019/12/26/系统总线/image-20191226172053836.png" alt="image-20191226172053836"></p><h3 id="总线示例"><a href="#总线示例" class="headerlink" title="总线示例"></a>总线示例</h3><h4 id="多级总线示例"><a href="#多级总线示例" class="headerlink" title="多级总线示例"></a>多级总线示例</h4><p>总线桥：是不同速率总线 之间的连接器件，起信号 速度缓冲、电平转换、控 制协议转换等作用。</p><p><img src="/2019/12/26/系统总线/image-20191226172131126.png" alt="image-20191226172131126"></p><h4 id="单级总线示例"><a href="#单级总线示例" class="headerlink" title="单级总线示例"></a>单级总线示例</h4><p><img src="/2019/12/26/系统总线/image-20191226172214936.png" alt="image-20191226172214936"></p><h3 id="总线结构对计算机系统性能的影响"><a href="#总线结构对计算机系统性能的影响" class="headerlink" title="总线结构对计算机系统性能的影响"></a>总线结构对计算机系统性能的影响</h3><ul><li>对最大存储容量的影响：单总线结构有影响，双总线和多总线结构没有；</li><li>对指令系统的影响：双总线和多总线结构需要增加IO指令；</li><li>吞吐量：单总线结构的吞吐量小，多总线结构的吞吐量大，双总线结 构的吞吐量居中</li></ul><h2 id="总线仲裁和数据传输方式"><a href="#总线仲裁和数据传输方式" class="headerlink" title="总线仲裁和数据传输方式"></a>总线仲裁和数据传输方式</h2><h3 id="菊花链式串行总线仲裁"><a href="#菊花链式串行总线仲裁" class="headerlink" title="菊花链式串行总线仲裁"></a>菊花链式串行总线仲裁</h3><p><img src="/2019/12/26/系统总线/image-20191226173643508.png" alt="image-20191226173643508"></p><h3 id="集中式并行总线仲裁"><a href="#集中式并行总线仲裁" class="headerlink" title="集中式并行总线仲裁"></a>集中式并行总线仲裁</h3><p><img src="/2019/12/26/系统总线/image-20191226173726362.png" alt="image-20191226173726362"></p><h3 id="常见总线仲裁策略"><a href="#常见总线仲裁策略" class="headerlink" title="常见总线仲裁策略"></a>常见总线仲裁策略</h3><ul><li>固定优先级总线仲裁</li><li>轮叫式总线仲裁（Round Robin）</li><li>LRG总线仲裁（Least Recently Granted）</li><li>混合式总线仲裁</li></ul><h3 id="总线时序"><a href="#总线时序" class="headerlink" title="总线时序"></a>总线时序</h3><h4 id="同步定时"><a href="#同步定时" class="headerlink" title="同步定时"></a>同步定时</h4><p>同步定时：信息传送由公共时钟控制，总线中包含时钟线。</p><p><img src="/2019/12/26/系统总线/image-20191226173902376.png" alt="image-20191226173902376"></p><ul><li>优点：时序关系简单，实现简单。</li><li>缺点：在设备速度不一致时按最坏情况确定， 传输线不能太长（时钟相移）。 </li></ul><h4 id="异步定时"><a href="#异步定时" class="headerlink" title="异步定时"></a>异步定时</h4><p>异步定时：信息传送的每一个操作都是由主设备或从设备特定信号的 跳变所确定，总线上每一个事件的发生取决于前一个事件的发生。</p><p><img src="/2019/12/26/系统总线/image-20191226174007685.png" alt="image-20191226174007685"></p><ul><li>优点：数据传输可靠，适用于传输周期不同的设备， 对通讯线的长度没有严格的要求。 </li><li>缺点：速度较慢。</li></ul><h4 id="半同步定时"><a href="#半同步定时" class="headerlink" title="半同步定时"></a>半同步定时</h4><p>半同步定时：总线上各操作之间的时间间隔可以变化，但仅允许为公 共时钟周期的整数倍。信号的出现、采样和结束仍以公共时钟为基准。</p><p><img src="/2019/12/26/系统总线/image-20191226174058360.png" alt="image-20191226174058360"></p><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><h4 id="并行传送"><a href="#并行传送" class="headerlink" title="并行传送"></a>并行传送</h4><ul><li>同时并行传送的二进位数就是数据宽度；</li><li>通常采用应答式的联络信号来协调双方的数据传送操作。</li></ul><h4 id="串行传送"><a href="#串行传送" class="headerlink" title="串行传送"></a>串行传送</h4><ul><li>只使用一根传输线，采用脉冲方式传送信息；</li><li>每次传送1位信息；</li><li>一次新的传送，一定是以一个电平的跳变开始。</li></ul><h4 id="串并传送"><a href="#串并传送" class="headerlink" title="串并传送"></a>串并传送</h4><ul><li>一次传送多个二进制位，但是同时传送的二进制位数小于数据宽度；</li><li>按照串行的方式将整个数据宽度传送完。</li></ul><h2 id="总线标准"><a href="#总线标准" class="headerlink" title="总线标准"></a>总线标准</h2><p>总线标准：计算机系统的各部件之间利用总线进行信 息传输时应遵守的协议和规范，包括硬件 和软件两个方面。</p><h3 id="常见总线标准"><a href="#常见总线标准" class="headerlink" title="常见总线标准"></a>常见总线标准</h3><ul><li>ISA（Industrial Standard Architecture）：最早制定的总线技术标 准，总线宽度8/16位，总线频率5<del>8MHz，总线带宽5</del>8MB/s。<br><img src="/2019/12/26/系统总线/image-20191226180444002.png" alt="image-20191226180444002"></li><li>EISA（Extended Industry Standard Architecture）总线：在ISA总 线的基础上为32位微机开发。</li><li>VESA（Video Electronics Standard Association)总线：1992年推， 它的推出为微机系统总线体系结构的革新奠定了基础，该总线系统考 虑到CPU与主存和Cache的直接相连。标准定义了32位数据线，且可 通过扩展槽扩展到64位，使用33MHz时钟频率，最大传输率为 128MB/s~132MB/s。</li><li>PCI（Peripheral Component Interconnect）总线：PCI是由Intel 公司1991年推出的总线规范，用于取代ISA；不同于ISA总线，PCI总 线的地址总线与数据总线是分时复用的，支持插即用。<ul><li>PCI总线支持10台外设，总线宽度32/64位，总线时钟 频率33.3MHz/66MHz，最大数据传输速率 133/264 MB/s，时钟同步方式，且与CPU的时钟频率无关。</li><li>插即用：是指当板卡插入系统时，系统会自动对板卡所需资源进行分 配，如基地址、中断号等，并自动寻找相应的驱动程序；而不象旧的 ISA板卡，需要进行复杂的手动配置。<br><img src="/2019/12/26/系统总线/image-20191226180527801.png" alt="image-20191226180527801"></li></ul></li><li>AGP（Accelerated Graphics Port）总线：是Intel公司1997年推出 的一种3D标准图像接口， 基于PCI2.1版规范并进 行扩充修改而成，它采 用点对点通道方式，能 够提供四倍于PCI的传输 速度。<br><img src="/2019/12/26/系统总线/image-20191226180559822.png" alt="image-20191226180559822"></li><li>PCIe（Peripheral Component Interconnect Express）总线：是 Intel公司2001年推出的一种高速串行计算机扩展总线标准，用于替 代PCI、PCI-X和AGP总线。<ul><li>PCIe相比以前的标准，有许多改进之外，包括：更高的最大 系统总线吞吐量，更低的I/O引脚数量和更小的物理尺寸，更 好的总线设备性能缩放，更详细的错误检测和报告机制； PCIe标准的更新版本为I/O虚拟化提供了硬件支持。</li><li>PCIe有多种不同速度的接口模式，包括：1X、2X、4X、8X、 16X 以及更高速的32X；PCIe 1X 模式的传输速率可以达到 250MB/s，PCIe 2.0 X16 接口能够提供8GB/s的总线带宽。<br><img src="/2019/12/26/系统总线/image-20191226180630424.png" alt="image-20191226180630424"></li></ul></li><li>USB（Universal Serial Bus）总线：是由Intel、Compaq、IBM、 Microsoft等多家公司1994年联合提出的一种通用串行总线。<ul><li>采用四线电缆，其中两根是用来传送数据的串行通道，另两根 为下游设备提供电源<br><img src="/2019/12/26/系统总线/image-20191226180817639.png" alt="image-20191226180817639"> </li><li>采用级联星型拓扑，由三个基本部分组成：主机（Host），集 线器（Hub）和功能设备<br><img src="/2019/12/26/系统总线/image-20191226180907659.png" alt="image-20191226180907659"></li><li>USB 1.1 总线带宽为12Mbps（1.5MB/s），可接入多达127 个设备。</li><li>USB 3.1 Gen2 最大传输速率可达10Gbps（1280MB/s）。</li><li>USB自推出后，已成功替代串口和并口，并成为个人电脑和大 量智能设备的必配的接口之一。</li></ul></li><li>AMBA（Advanced Microcontroller Bus Architecture）总线：是 ARM公司推出的片上总线；AMBA提供了一种特殊的机制，可将RISC 处理器集成在其它IP核和外设中。<br>AMBA 2.0 标准定义了三组总线<ul><li>AHB（Advanced High-Performance Bus）：AMBA高性能总线<br>AHB总线：属于高性能、高时钟频率的系统总线，主要特点包括流水 线操作、数据突发传输（Burst Transfer）、可支持多个总线主设备 （最多16个）、单时钟沿触发操作、总线宽度32、64、128位（最高 可达1024位，但推荐不要超过256位)。</li><li>ASB（Advanced System Bus）：AMBA系统总线<br>ASB总线：与AHB相比数据宽度要小一些，支持8、16、32位，且为三 态、双向总线。</li><li>APB（Advanced Peripheral Bus）：AMBA外设总线<br>APB总线：是本地二级总线，通过桥和AHB/ASB相连。它主要是为了满 足不需要高性能流水线接口或不需要高带宽接口的设备的互连。<br>AMBA总线结构：<br><img src="/2019/12/26/系统总线/image-20191226181128289.png" alt="image-20191226181128289"></li></ul></li><li>AMBA 4.0 是最新增添到AMBA系列中的规范，增加了三个新接口 协议（Advanced eXtensible Interface）：AXI4有助于最大化性 能和能效、AXI4-Lite和AXI4-Stream是 FPGA中实现的理想选择。<img src="/2019/12/26/系统总线/image-20191226181323636.png" alt="image-20191226181323636"></li></ul><p>特点：</p><ul><li>独立的读地址、写地址、读数据、写数据和写确认5个通道</li><li>支持乱序传输</li><li>支持固定模式突发传输， 主要用于I/O接口</li><li>支持系统高速缓存</li><li>持增强保护功能</li><li>互斥访问（用于semaphore操作</li><li>寄存器分片以便于高频操<br>AXI4总线结构：<br><img src="/2019/12/26/系统总线/image-20191226181340500.png" alt="image-20191226181340500"><ul><li>InfiniBand总线：是由InfiniBand行业协会推出的，该协会的主要成员 包括Compaq、Dell、HP、IBM、Intel、Microsoft和Sun等公司。</li></ul></li><li>InfiniBand是PCI总线的替代品，采用了与PCI完全不同的架构， 具有极高带宽和灵活的扩展能力，理论带宽分别可以达到 500MB/s、2GB/s和6GB/s。</li><li>InfiniBand解决了PCI总线中设备的距离问题，外部设备可以放 到距离服务器很远的地方工作（如果使用的是光缆，最远距离 可以达到0.3~10千米）。</li></ul><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>系统总线地址的功能是（<strong>指定主存和I / O设备接口电路的地址</strong>）。</p><hr><p>异步控制常用于（*<em>在单总线结构计算机中访问主存与外围设备时 *</em>）作为其主要控制方式。</p><hr><p>描述PCI总线中基本概念正确的句子是（<strong>BCD</strong>）。<br>A.PCI设备一定是主设备<br>B.PCI总线的基本传输机制是猝发式（Burst）传送<br>C.PCI总线是一个与处理器无关的高速外围总线<br>D.系统中可以有多条PCI总线</p><hr><p>下面叙述中，不正确的是（<strong>ABD</strong>）。<br>A.总线一定要和接口相连<br>B.总线始终由CPU控制和管理<br>C.接口一定要和总线相连<br>D.通道可以替代接口</p><hr><p>计算机使用总线结构的主要优点是便于实现积木化，同时（<strong>减少了信息传输线的条数</strong>）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总线的特性及其应用&quot;&gt;&lt;a href=&quot;#总线的特性及其应用&quot; class=&quot;headerlink&quot; title=&quot;总线的特性及其应用&quot;&gt;&lt;/a&gt;总线的特性及其应用&lt;/h2&gt;&lt;p&gt;总线的概念：是计算机体系结构的重要组成部分，通过它可以将计算机系统中各个功能部件连接起来，构成一个完整的系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>中央处理器</title>
    <link href="http://yorxika.github.io/2019/12/25/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <id>http://yorxika.github.io/2019/12/25/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/</id>
    <published>2019-12-25T15:03:54.000Z</published>
    <updated>2019-12-26T08:39:52.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU组成与功能"><a href="#CPU组成与功能" class="headerlink" title="CPU组成与功能"></a>CPU组成与功能</h2><h3 id="CPU概述"><a href="#CPU概述" class="headerlink" title="CPU概述"></a>CPU概述</h3><a id="more"></a><p><img src="/2019/12/25/中央处理器/image-20191225231349628.png" alt="image-20191225231349628"></p><h3 id="CPU基本组成"><a href="#CPU基本组成" class="headerlink" title="CPU基本组成"></a>CPU基本组成</h3><ul><li>运算器 数据加工</li><li>控制器 程序执行/执行执行<ul><li>取指令 Mem[PC++] -&gt; IR</li><li>执行指令 <ul><li>指令字 -&gt; 控制信号序列</li><li>信号序列 -&gt; 数据通路</li></ul></li></ul></li></ul><p><img src="/2019/12/25/中央处理器/image-20191225231525021.png" alt="image-20191225231525021"></p><h3 id="CPU主要功能"><a href="#CPU主要功能" class="headerlink" title="CPU主要功能"></a>CPU主要功能</h3><p>取指令并执行指令的部件——CPU</p><ul><li>数据加工:  算术/逻辑运算  运算器</li><li>程序控制:  程序中指令执行顺序控制</li><li>操作控制:  将机器指令翻译成执行部件所需的操作控制信号</li><li>时序控制:  控制操作信号的产生时间、持续时间</li><li>异常控制:  异常处理，外设交互<br>后4个为控制器功能</li></ul><h3 id="主要寄存器"><a href="#主要寄存器" class="headerlink" title="主要寄存器"></a>主要寄存器</h3><ul><li>PC (Program Counter)——程序计数器 X86：EIP MIPS：PC</li><li>IR  (Instruction Register)——指令寄存器 [可选]</li><li>AR  (Address Register)——地址寄存器 MAR [可选]</li><li>DR  (Data Register)——数据缓冲寄存器 MDR [可选]</li><li>AC  (Accumulate Count)——累加寄存器 [可选]</li><li>PSW (Program Status Word)——程序状态字 [可选]<ul><li>X86 EFLAGS   MIPS：无</li></ul></li></ul><h3 id="操作控制器"><a href="#操作控制器" class="headerlink" title="操作控制器"></a>操作控制器</h3><p>取指令，将机器指令译码并生成执行部件控制信号序列 ，建立正确的数据 通路，从而完成指令的正确执行。</p><ul><li>硬布线控制器 (时序逻辑型)  (硬件实现)</li><li>微程序控制器 (存储程序型)  (软件实现)</li></ul><h2 id="数据通路"><a href="#数据通路" class="headerlink" title="数据通路"></a>数据通路</h2><p>数据通路——执行部件间传送信息的路径。</p><ul><li>通路的建立由控制信号控制，受时钟驱动；</li><li>不同指令、同一指令在执行的不同阶段的数据通路不同；</li><li>数据通路分类：共享通路（总线）、专用通路<ul><li>指令执行流程、执行效率</li><li>微操作控制信号的时序安排</li></ul></li></ul><h2 id="数据通路与总线结构"><a href="#数据通路与总线结构" class="headerlink" title="数据通路与总线结构"></a>数据通路与总线结构</h2><p>数据通路分类：</p><ul><li>共享通路（总线型）<ul><li>主要部件都连接在公共总线上，各部件间通过总线进行数据传输</li><li>结构简单，实现容易，但并发性较差，需分时使用总线，效率低</li></ul></li><li>专用通路<ul><li>并发度高，性能佳，设计复杂，成本高</li><li>可以看做多总线结构</li></ul></li></ul><p>单总线数据通路：<br><img src="/2019/12/25/中央处理器/image-20191225233819137.png" alt="image-20191225233819137"></p><p>双总线数据通路：<br><img src="/2019/12/25/中央处理器/image-20191225233848478.png" alt="image-20191225233848478"></p><p>三总线数据通路：<br><img src="/2019/12/25/中央处理器/image-20191225233919390.png" alt="image-20191225233919390"></p><h2 id="数据通路实例"><a href="#数据通路实例" class="headerlink" title="数据通路实例"></a>数据通路实例</h2><p>单总线CPU：<br><img src="/2019/12/25/中央处理器/image-20191225235209491.png" alt="image-20191225235209491"></p><p>多总线CPU：<br><img src="/2019/12/25/中央处理器/image-20191225235241019.png" alt="image-20191225235241019"></p><p>专用通路 单周期MIPS：<br><img src="/2019/12/25/中央处理器/image-20191225235310044.png" alt="image-20191225235310044"></p><h2 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h2><p>指令执行一般流程：<br><img src="/2019/12/25/中央处理器/image-20191226001010996.png" alt="image-20191226001010996"></p><p>指令周期基本概念：<br><img src="/2019/12/25/中央处理器/image-20191226001033946.png" alt="image-20191226001033946"></p><p>指令控制同步：<br>不同指令功能不同，复杂度不同，如何进行时间控制？</p><ul><li>定长指令周期：早期三级时序系统<ul><li>机器周期数固定，节拍数固定，按机器周期同步，mips单周期</li></ul></li><li>变长指令周期：现代时序系统<ul><li>机器周期数可变，节拍数可变，按时钟周期同步，mips多周期</li></ul></li></ul><p>早期三级时序系统<br><img src="/2019/12/25/中央处理器/image-20191226001138799.png" alt="image-20191226001138799"></p><p>时序产生与控制器：<br><img src="/2019/12/25/中央处理器/image-20191226001211781.png" alt="image-20191226001211781"></p><p>现代时序系统：<br><img src="/2019/12/25/中央处理器/image-20191226001239185.png" alt="image-20191226001239185"></p><h2 id="总线结构与CPU指令周期"><a href="#总线结构与CPU指令周期" class="headerlink" title="总线结构与CPU指令周期"></a>总线结构与CPU指令周期</h2><p><img src="/2019/12/25/中央处理器/image-20191226002209956.png" alt="image-20191226002209956"></p><h3 id="取指令数据通路"><a href="#取指令数据通路" class="headerlink" title="取指令数据通路"></a>取指令数据通路</h3><p><img src="/2019/12/25/中央处理器/image-20191226002222707.png" alt="image-20191226002222707"></p><h3 id="LOAD指令执行数据通路"><a href="#LOAD指令执行数据通路" class="headerlink" title="LOAD指令执行数据通路"></a>LOAD指令执行数据通路</h3><p><img src="/2019/12/25/中央处理器/image-20191226002311808.png" alt="image-20191226002311808"></p><h3 id="MOVE指令执行数据通路"><a href="#MOVE指令执行数据通路" class="headerlink" title="MOVE指令执行数据通路"></a>MOVE指令执行数据通路</h3><p><img src="/2019/12/25/中央处理器/image-20191226003023840.png" alt="image-20191226003023840"></p><h3 id="ADD指令执行数据通路"><a href="#ADD指令执行数据通路" class="headerlink" title="ADD指令执行数据通路"></a>ADD指令执行数据通路</h3><p><img src="/2019/12/25/中央处理器/image-20191226003041973.png" alt="image-20191226003041973"></p><h3 id="STORE指令执行数据通路"><a href="#STORE指令执行数据通路" class="headerlink" title="STORE指令执行数据通路"></a>STORE指令执行数据通路</h3><p><img src="/2019/12/25/中央处理器/image-20191226003103363.png" alt="image-20191226003103363"></p><h3 id="JMP指令执行数据通路"><a href="#JMP指令执行数据通路" class="headerlink" title="JMP指令执行数据通路"></a>JMP指令执行数据通路</h3><p><img src="/2019/12/25/中央处理器/image-20191226003124517.png" alt="image-20191226003124517"></p><h2 id="硬布线控制器设计I"><a href="#硬布线控制器设计I" class="headerlink" title="硬布线控制器设计I"></a>硬布线控制器设计I</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul><li>将控制器看成产生固定时序控制信号的逻辑电路</li><li>输入信号：指令译码，时钟信号，反馈信号</li><li>输出信号：功能部件控制信号序列</li><li>设计目标：最少元件，最快速度</li><li>理论基础：布尔代数</li><li>组成器件：门电路，触发器</li></ul><p><img src="/2019/12/25/中央处理器/image-20191226004240269.png" alt="image-20191226004240269"></p><h3 id="单总线结构CPU指令周期"><a href="#单总线结构CPU指令周期" class="headerlink" title="单总线结构CPU指令周期"></a>单总线结构CPU指令周期</h3><p><img src="/2019/12/25/中央处理器/image-20191226004314609.png" alt="image-20191226004314609"></p><p><img src="/2019/12/25/中央处理器/image-20191226004328026.png" alt="image-20191226004328026"></p><h3 id="时序产生器状态机与控制器基本架构"><a href="#时序产生器状态机与控制器基本架构" class="headerlink" title="时序产生器状态机与控制器基本架构"></a>时序产生器状态机与控制器基本架构</h3><p><img src="/2019/12/25/中央处理器/image-20191226004422271.png" alt="image-20191226004422271"></p><p><img src="/2019/12/25/中央处理器/image-20191226004440469.png" alt="image-20191226004440469"></p><p><img src="/2019/12/25/中央处理器/image-20191226004449528.png" alt="image-20191226004449528"></p><p>固定指令周期硬布线控制器设计过程</p><ol><li>设计三级时序产生器： 所有指令固定机器周期数，节拍数，</li><li>列出所有机器指令的指令周期流程图，明确每个节拍的控制信号；</li><li>找出产生同一微操作控制信号的条件；</li><li>写出各微操作控制信号的布尔表达式；</li><li>化简各表达式；</li><li>利用组合逻辑电路实现。</li></ol><h2 id="硬布线控制器设计II"><a href="#硬布线控制器设计II" class="headerlink" title="硬布线控制器设计II"></a>硬布线控制器设计II</h2><p>多周期</p><p><img src="/2019/12/25/中央处理器/image-20191226005355693.png" alt="image-20191226005355693"></p><p><img src="/2019/12/25/中央处理器/image-20191226005414350.png" alt="image-20191226005414350"></p><p>有限状态机真值表：<br><img src="/2019/12/25/中央处理器/image-20191226005443176.png" alt="image-20191226005443176"></p><p>可变周期硬布线控制器设计步骤</p><ol><li>列出所有机器指令的指令周 期流程图，明确每个节拍的 控制信号；</li><li>绘制指令执行状态转换图</li><li>根据状态转换图构建状态机 真值表，实现有限状态机组 合逻辑</li><li>实现控制器组合逻辑电路</li></ol><h2 id="微程序控制器"><a href="#微程序控制器" class="headerlink" title="微程序控制器"></a>微程序控制器</h2><p><img src="/2019/12/25/中央处理器/image-20191226141854193.png" alt="image-20191226141854193"></p><p>工作原理：</p><ul><li>微程序是利用软件方法来设计硬件的技术</li><li>将完成指令所需的控制信号按格式编写成微指令，存放到控制存储器<ul><li>一条机器指令对应一段微程序（多条微指令）</li><li>指令取指执行 -&gt; 微程序的执行 -&gt; 执行多条微指令 -&gt; 依次生成控制信号</li></ul></li><li>存储技术和程序设计相结合，回避复杂的同步时序逻辑设计</li></ul><p>单总线CPU微指令构造</p><ul><li>操作控制字段： 存储操作控制信号<ul><li>每一位对应一个控制信号，也称微命令，可同时给出多个操作信号</li></ul></li><li>顺序控制字段： 用于控制微程序的执行顺序<ul><li>判别逻辑为零，下一条微指令地址从下址字段获取，否则按约定规则生成</li></ul></li></ul><p><img src="/2019/12/25/中央处理器/image-20191226142125377.png" alt="image-20191226142125377"></p><p><img src="/2019/12/25/中央处理器/image-20191226142140226.png" alt="image-20191226142140226"></p><p>优劣：</p><ul><li>速度慢 访存频繁、成本低廉</li><li>设计规整，设计简单，易于修改、扩展指令系统功能<ul><li>适合CISC等功能较复杂的系列机 X86、IBM S/360、 DEC VAX</li><li>可写控存方便修复出厂故障 Intel Core 2 、Intel Xeon</li></ul></li><li>硬布线控制器执行速度快，但设计复杂，代价昂贵，不便于修改<ul><li>适合RISC计算机，如MIPS，ARM</li></ul></li></ul><h2 id="微程序设计"><a href="#微程序设计" class="headerlink" title="微程序设计"></a>微程序设计</h2><ul><li>一条微指令对应一个时钟周期</li><li>微指令操作控制字段的信号在该时钟周期内有效</li><li>指令需要多少时钟周期就包括多少微指令</li></ul><p><img src="/2019/12/25/中央处理器/image-20191226143130682.png" alt="image-20191226143130682"></p><h2 id="微指令格式"><a href="#微指令格式" class="headerlink" title="微指令格式"></a>微指令格式</h2><p>设计原则：</p><ul><li>有利于缩短微指令字长度</li><li>有利于减少控制存储器容量</li><li>有利于提高微程序执行速度</li><li>有利于对微指令进行修改</li><li>有利于提高微程序设计的灵活性</li></ul><p>直接表示简单直观，便于输出控制，微指令长度太长，控存容量大，如何压缩微指令长度？</p><ul><li>改直接表示为编码表示 （压缩互斥性微指令）</li><li>去掉下址字段，采用 μPC = μPC +1 的方式生成微指令地址</li><li>改水平型微指令为垂直型微指令 （牺牲并行性）</li></ul><p><img src="/2019/12/25/中央处理器/image-20191226144718065.png" alt="image-20191226144718065"></p><p>如果互斥的输出控制信号8个，编码后长度多少？<br>至少为4，预留一个状态表示所有状态输出为0</p><p><img src="/2019/12/25/中央处理器/image-20191226145046465.png" alt="image-20191226145046465"></p><p>垂直型微指令：<br><img src="/2019/12/25/中央处理器/image-20191226145128307.png" alt="image-20191226145128307"></p><ul><li>水平型微指令<ul><li>并行操作能力强，效率高，灵活性强，</li><li>微指令字较长，微程序短，控存容量大，性能佳</li></ul></li><li>垂直型微指令<ul><li>字长短，微程序长，控存容量小，性能差</li><li>垂直型与指令相似，易于掌握</li><li>基本被淘汰</li></ul></li></ul><h2 id="单周期MIPS-CPU"><a href="#单周期MIPS-CPU" class="headerlink" title="单周期MIPS CPU"></a>单周期MIPS CPU</h2><p>MIPS CPU控制器设计：</p><ul><li>定长指令周期：单周期实现<ul><li>所有指令均在一个时钟周期内完成， CPI=1</li><li>性能取决于最慢的指令，时钟周期过长</li></ul></li><li>变长指令周期：多周期实现<ul><li>缩短时钟周期，复用器件或数据通路</li><li>可支持流水操作，提升性能</li></ul></li></ul><p>R型指令格式<br><img src="/2019/12/25/中央处理器/image-20191226151355789.png" alt="image-20191226151355789"></p><p>I型指令格式<br><img src="/2019/12/25/中央处理器/image-20191226151416087.png" alt="image-20191226151416087"></p><p>数据通路：<br><img src="/2019/12/25/中央处理器/image-20191226151503460.png" alt="image-20191226151503460"></p><p> R型指令数据通路建立过程<br><img src="/2019/12/25/中央处理器/image-20191226151635760.png" alt="image-20191226151635760"></p><p>LW指令数据通路建立过程<br><img src="/2019/12/25/中央处理器/image-20191226151658900.png" alt="image-20191226151658900"></p><p>SW指令数据通路建立过程<br><img src="/2019/12/25/中央处理器/image-20191226151719963.png" alt="image-20191226151719963"></p><p>BEQ指令数据通路建立过程<br><img src="/2019/12/25/中央处理器/image-20191226151736211.png" alt="image-20191226151736211"></p><p>MIPS控制器设计：</p><ul><li>单周期控制器无时序逻辑，纯组合逻辑电路</li><li>输入信号<ul><li>指令字Opcode，Func字段（12位）</li></ul></li><li>输出信号<ul><li>多路选择器选择信号</li><li>内存访问控制信号</li><li>寄存器写使能信号</li></ul></li></ul><p><img src="/2019/12/25/中央处理器/image-20191226151829362.png" alt="image-20191226151829362"></p><h2 id="多周期MIPS-CPU"><a href="#多周期MIPS-CPU" class="headerlink" title="多周期MIPS CPU"></a>多周期MIPS CPU</h2><p>多周期MIPS数据通路特点</p><ul><li>不再区分指令存储器和数据存储器，分时使用部分功能部件</li><li>主要功能单元输出端增加寄存器锁存数据</li><li>传输通路延迟变小，时钟周期变短</li></ul><p>多周期MIPS CPU数据通路：<br><img src="/2019/12/25/中央处理器/image-20191226153829403.png" alt="image-20191226153829403"></p><p>多周期MIPS取指令阶段T1<br><img src="/2019/12/25/中央处理器/image-20191226153856881.png" alt="image-20191226153856881"></p><p>多周期MIPS取指令阶段T2<br><img src="/2019/12/25/中央处理器/image-20191226153913682.png" alt="image-20191226153913682"></p><p>R型指令执行状态周期T3~T4<br><img src="/2019/12/25/中央处理器/image-20191226154005989.png" alt="image-20191226154005989"></p><p>LW指令执行状态周期T3~T5<br><img src="/2019/12/25/中央处理器/image-20191226154026467.png" alt="image-20191226154026467"></p><p>Beq指令执行状态周期T3<br><img src="/2019/12/25/中央处理器/image-20191226154040788.png" alt="image-20191226154040788"></p><p>多周期状态转换图<br><img src="/2019/12/25/中央处理器/image-20191226154127994.png" alt="image-20191226154127994"></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>冯•诺依曼计算机中指令和数据均以二进制形式存放在存储器中，CPU依据（<strong>指令和数据的访问时间不同</strong> ）来区分它们</p><p>虽然指令和数据都是以二进制形式存放在存储器中，但 CPU 可以根据指令周期的不同阶段来区分是指令还是数据，通常在取指阶段取出的是指令，在执行阶段取出的是数据。本题容易误选 A ，需要清楚的是， CPU 只有在确定取出的是指令之后，才会将其操作码送去译码，因此，不可能依据译码的结果来区分指令和数据。</p><hr><p>某计算机指令集中包含有RR型运算指令、访存指令Load、Store、分支指令Branch和跳转指令Jump。若采用单周期数据通路实现该指令系统，若指令存储器和数据存储器的时延都是3ns;ALU时延为2ns;寄存器文件读写时延都是1ns。在不考虑多路复用器、控制单元、PC、符号扩展单元和传输线路等延迟的情况下，该计算机时钟周期至少为<strong>10ns</strong></p><p>单周期取指令3ns，访问寄存器文件1ns，计算需要ALU2ns，然后写入数据存储器3ns，然后在写回寄存器1ns</p><hr><p>下列有关指令周期的叙述中，正确的是（<strong>ACD</strong>）。（多选）<br>A.单周期CPU中的指令周期就是一个时钟周期<br>B.乘法指令和加法指令的指令周期总是一样长<br>C.指令周期的第一个阶段一定是取指令阶段<br>D.一个指令周期可由若干个机器周期或时钟周期组成</p><hr><p>下列寄存器中，对汇编语言程序员不透明的是（<strong>C</strong>）（单选）<br>A.程序计数器(PC)<br>B.存储器地址寄存器(MAR)<br>C.条件状态寄存器<br>D.存储器数据寄存器(MDR)</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CPU组成与功能&quot;&gt;&lt;a href=&quot;#CPU组成与功能&quot; class=&quot;headerlink&quot; title=&quot;CPU组成与功能&quot;&gt;&lt;/a&gt;CPU组成与功能&lt;/h2&gt;&lt;h3 id=&quot;CPU概述&quot;&gt;&lt;a href=&quot;#CPU概述&quot; class=&quot;headerlink&quot; title=&quot;CPU概述&quot;&gt;&lt;/a&gt;CPU概述&lt;/h3&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>指令系统</title>
    <link href="http://yorxika.github.io/2019/12/25/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yorxika.github.io/2019/12/25/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</id>
    <published>2019-12-25T03:43:24.000Z</published>
    <updated>2019-12-26T17:18:30.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指令系统概述及指令格式"><a href="#指令系统概述及指令格式" class="headerlink" title="指令系统概述及指令格式"></a>指令系统概述及指令格式</h2><h3 id="指令的基本概念"><a href="#指令的基本概念" class="headerlink" title="指令的基本概念"></a>指令的基本概念</h3><ul><li>指令<ul><li>计算机能直接识别、执行的操作命令（机器指令）；</li><li>冯诺依曼结构计算机 “程序控制”原理实现的载体；</li></ul></li><li>指令系统（指令集）<a id="more"></a><ul><li>一台计算机中所有机器指令的集合；</li><li>系列机：同一公司不同时期生产，基本系统结构和指令系统相同的计算机。 如IBM，PDP-11，VAX-11，Intel-x86</li><li>兼容机：不同公司生产，基本系统结构和指令系统相同的计算机。 如IBM兼容机</li></ul></li><li>指令字长<ul><li>指令中包含的二进制位数 </li><li>与机器字长相比:   单字长、双字长、半字长等长度指令 </li><li>多字长指令：<ul><li>解决寻址较大存储空间的问题 </li><li>取指多次访问内存，影响速度，占用空间大</li></ul></li><li>等长指令: 指令字长度固定。</li><li>变长指令: 指令字长度根据需要可变</li></ul></li></ul><h3 id="指令分类"><a href="#指令分类" class="headerlink" title="指令分类"></a>指令分类</h3><p><img src="/2019/12/25/指令系统/image-20191225115956648.png" alt="image-20191225115956648"></p><p><img src="/2019/12/25/指令系统/image-20191225120008896.png" alt="image-20191225120008896"></p><p>根据指令中操作数的物理位置分类:</p><ul><li>存储器－存储器（SS）型</li><li>寄存器－寄存器（RR）型 </li><li>寄存器－存储器（RS）型</li></ul><p>根据指令功能分类：</p><ul><li>传送指令 MOV 、PUSH/POP、 IN/OUT等 </li><li>定点算术运算指令 ADD、SUB、INC、CMP、MUL等 </li><li>位运算指令 NOT、AND、OR、SHL、SAL等 </li><li>控制转移指令 JMP 、JNE、CALL、RET等</li></ul><h3 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h3><p><img src="/2019/12/25/指令系统/image-20191225120247603.png" alt="image-20191225120247603"></p><ul><li>操作码字段的位数与支持的最大指令数量有关 <ul><li>对于定长操作码而言，LengthOP =⌈log2 n⌉</li><li>支持变长操作码时，操作码向不用的地址码字段扩展</li></ul></li><li>寻址方式字段的位数与支持的寻址方式种类有关 </li><li>地址码字段的作用及影响与其位数和寻址方式有关</li></ul><h2 id="寻址方式及指令寻址"><a href="#寻址方式及指令寻址" class="headerlink" title="寻址方式及指令寻址"></a>寻址方式及指令寻址</h2><p>指令的顺序寻址</p><ul><li>程序的指令序列在主存顺序存放。执行时从第一条指令开始(!)，逐 条取出并执行，这种程序的顺序执行过程，称为顺序寻址方式。</li><li>CPU中设置程序计数器（PC）对指令的顺序号进行计数。PC开始时存 放程序的首地址，每执行一条指令，PC 加”1”，指出下条指令的地址， 直到程序结束。<ul><li>存储1条指令占用的字节单元数与存储字长有关！</li></ul></li></ul><p>跳跃寻址：<br><img src="/2019/12/25/指令系统/image-20191225123815326.png" alt="image-20191225123815326"></p><h2 id="操作数寻址方式"><a href="#操作数寻址方式" class="headerlink" title="操作数寻址方式"></a>操作数寻址方式</h2><h3 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h3><p>地址码字段是操作数本身<br>例 MOV  AX,200H    （ AX &lt;-  200H）<br>特点：</p><ul><li>取指操作将数据与指令一并读入CPU内部的寄存器，指令执行速度快 </li><li>便于程序设计（变量赋初值） </li><li>数据大小受字段位数限制</li></ul><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><p>操作数在CPU内部的寄存器中<br>例 MOV  AX, BX    （ AX &lt;-  ( BX）)<br>特点： </p><ul><li>操作数在寄存器中，指令执行速度快 </li><li>能访问的数据大小一般与计算机字长有关 </li><li>地址字段的位数与计算机通用寄存器数量相关</li></ul><h3 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h3><p>地址码字段直接给出操作数在内存的地址.  E=D, S=(D)<br>例 MOV  AX, [200H]<br>特点：</p><ul><li>提供访问主存的操作 </li><li>获得数据要访问主存，指令执行速度慢 </li><li>地址字段的位数决定了访存空间大小</li></ul><h3 id="间接寻址"><a href="#间接寻址" class="headerlink" title="间接寻址"></a>间接寻址</h3><p>地址码字段给出的是操作数主存地址的地址.  E=(D), S= ((D))<br>例 MOV  AX, I[200H]<br>特点：</p><ul><li>获得数据要访问主存2次，指令执行速度太慢 </li><li>解决了直接寻址方式下地址字段的位数限制访存范围大小的问题</li></ul><h3 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h3><p>地址码字段给出的是寄存器编号R.  E=(R), S= ((R))<br>例 MOV  AX, [BX]<br>特点：</p><ul><li>获得数据只需访问主存1次 </li><li>解决了直接寻址方式下地址字段的位数限制访存范围大小的问题</li></ul><h3 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h3><p>E=D + (PC), D为指令中地址字段的值特点：</p><p><img src="/2019/12/25/指令系统/image-20191225130335074.png" alt="image-20191225130335074"></p><ul><li>注意PC的改变对计算E的影响，如 本例中E = 200 + 2000 + 2 </li><li>可节省指令中的地址位数，便于程序在内存中成块移动</li></ul><p>例 某计算机采用双字节长指令,内存基于字节寻址,指令中的数据采用补码表示,且PC 的值在取指阶段完成修改。<br>1)若某采用相对寻址指令的当前地址为2003H,且要求转移后的目标地址为200AH, 则该指令形式地址字段的值为多少?<br>2)2)若某采用相对寻址的指令的当前地址为2008H,且要求转移后的目标地址为2001H, 则该指令的形式地址字段的值为多少?<br>解: 1)200AH – (2003H +2) = 5 (0000 0101)<br>2)2001H – (2008H +2) = -9 (1111 0111 即F7H)<br>若计算机字长32位, 且PC的值在取指阶段修改,情况如何?<br>+2变为+4</p><h3 id="基址寻址"><a href="#基址寻址" class="headerlink" title="基址寻址"></a>基址寻址</h3><p>指定一个基址寄存器B，与本指令地址无关 E= D + (B), D为指令中地址字段的值<br>MOV AX, 32[B]<br>特点：</p><ul><li>对某一程序而言，基址值设定后不变，故要访问不同数据需修改D </li><li>使用基址寄存器可以访问更大的主存空间</li></ul><h3 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h3><p>指定一个变址寄存器X，与本指令地址无关, 内容可随要求改变， E= D + (X), D为指令中地址字段的值<br>MOV AX, 32[SI]                 SI,DI 都称为变址寄存器<br>特点： </p><ul><li>不改变指令即可改变数据的有效地址，可在循环中使用 </li><li>在字符串处理，向量运算等等成批数据处理中非常有用</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2019/12/25/指令系统/image-20191225130635792.png" alt="image-20191225130635792"></p><h2 id="指令格式设计"><a href="#指令格式设计" class="headerlink" title="指令格式设计"></a>指令格式设计</h2><h3 id="指令格式设计主要内容"><a href="#指令格式设计主要内容" class="headerlink" title="指令格式设计主要内容"></a>指令格式设计主要内容</h3><ul><li>根据指令数量的要求及是否支持操作码扩展，确定操作码字段的位数</li><li>根据对操作数的要求确定地址码字段的个数 </li><li>根据寻址方式的要求，为每个地址码字段确定寻址方式字段位数 </li><li>确定采用定长指令还是变长指令</li></ul><h3 id="指令格式设计举例"><a href="#指令格式设计举例" class="headerlink" title="指令格式设计举例"></a>指令格式设计举例</h3><p>某机字长32位，采用三地址指令，支持8种寻址操作，完成60种操作，各 寻址方式均可在2K主存范围内取得操作数，并可在1K范围内保存运算结果。 问应采用什么样的指令格式？指令字长最少应为多少位？执行一条指令最多要 访问多少次主存？</p><p><img src="/2019/12/25/指令系统/image-20191225131913595.png" alt="image-20191225131913595"></p><hr><p>字长16位，主存64K，指令单字长单地址，80条指令。寻址方式有直接、 间接、相对、变址。请设计指令格式</p><p><img src="/2019/12/25/指令系统/image-20191225131937862.png" alt="image-20191225131937862"></p><p><img src="/2019/12/25/指令系统/image-20191225132001888.png" alt="image-20191225132001888"></p><hr><p>设某指令系统指令字长16位，每个地址码为6位。若要求设计二地址指令15 条、一地址指令34条，问最多还可设计多少条零地址指令？<br>解: OP(4) A1(6) A2(6)<br>操作码按从短码到长码进行扩展编码<br>假定二地址指令编码: (0000 – 1110)  共15条，1111作为扩展标识； 则一地址指令编码的全集可表示为: 1111 000000 – 111111(假定扩向A1)； 因一地址指令只需34条，可将全集中多余的30种编码作为向零地址指 令扩展的标识，假定为: 100010 – 111111 故最多可支持的故零地址指令数为： 30*2^6 条</p><h2 id="MIPS-指令概述"><a href="#MIPS-指令概述" class="headerlink" title="MIPS 指令概述"></a>MIPS 指令概述</h2><h3 id="MIPS-指令概述-1"><a href="#MIPS-指令概述-1" class="headerlink" title="MIPS 指令概述"></a>MIPS 指令概述</h3><ul><li>MIPS (Microprocessor without Intellocked Pipleline Stages)是80年代初期由斯 坦福大学Hennessy教授领导的研究小组研制成功； Million Instructions Per Second </li><li>属于精简指令集计算机RISC(Reduced Instruction Set Computer)；-&gt; 复杂指令集计算机CISC(Complex Instruction Set Computer )；</li><li>MIPS指令集有MIPS I，MIPS II，MIPS III，MIPS IV，MIPS V，MIPS32，和 MIPS64多个版本;</li><li>早期主要用于嵌入式系统，如Windows CE的设备，路由器，家用网关和视频游 戏机，现在已经在PC机、服务器中得到广泛应用</li></ul><p>MIPS指令集有以下特点： </p><ul><li>简单的Load/Store结构 </li><li>易于流水线CPU设计 </li><li>易于编译器开发 </li><li>MIPS指令的寻址方式非常简单，每条指令的操作也非常简单</li></ul><h3 id="MIPS指令格式概述"><a href="#MIPS指令格式概述" class="headerlink" title="MIPS指令格式概述"></a>MIPS指令格式概述</h3><p><img src="/2019/12/25/指令系统/image-20191225143633747.png" alt="image-20191225143633747"></p><h3 id="MIPS-寄存器"><a href="#MIPS-寄存器" class="headerlink" title="MIPS 寄存器"></a>MIPS 寄存器</h3><p><img src="/2019/12/25/指令系统/image-20191225143652075.png" alt="image-20191225143652075"></p><h3 id="MIPS-寻址方式"><a href="#MIPS-寻址方式" class="headerlink" title="MIPS 寻址方式"></a>MIPS 寻址方式</h3><ul><li>在MIPS32指令集中，不单设寻址方式说明字段<br><img src="/2019/12/25/指令系统/image-20191225143724205.png" alt="image-20191225143724205"></li><li>立即数寻址 ( Immediate addressing)<br><img src="/2019/12/25/指令系统/image-20191225143754663.png" alt="image-20191225143754663"></li><li>寄存器直接寻址(Register Addressing)<br><img src="/2019/12/25/指令系统/image-20191225143826805.png" alt="image-20191225143826805"></li><li>基址寻址(Basic Addressing)<br><img src="/2019/12/25/指令系统/image-20191225143858053.png" alt="image-20191225143858053"><br>使用基址寻址的指令：lw ,sw, lh, sh, lb, lbu等<br>LB rt , offset (base)</li><li>相对寻址<br><img src="/2019/12/25/指令系统/image-20191225143956018.png" alt="image-20191225143956018"><br>使用相对寻址的指令：beq, bne<br>if (GRP[rs] == GPR[rt]) PC = PC + 4 + BranchAddr</li><li>伪直接寻址(页面寻址)<br><img src="/2019/12/25/指令系统/image-20191225144037090.png" alt="image-20191225144037090"><br>使用伪直接寻址的指令：j, jal</li></ul><h2 id="MIPS指令详解"><a href="#MIPS指令详解" class="headerlink" title="MIPS指令详解"></a>MIPS指令详解</h2><h3 id="R型指令"><a href="#R型指令" class="headerlink" title="R型指令"></a>R型指令</h3><p><img src="/2019/12/25/指令系统/image-20191225145613421.png" alt="image-20191225145613421"></p><p>操作数和保存结果均通过寄存器进行； </p><ul><li>op：操作码，所有R型指令中都全为0； </li><li>rs：寄存器编号，对应第1个源操作数； </li><li>rt：寄存器编号，对应第2个源操作数； </li><li>rd：寄存器编号，据此保存结果； </li><li>shamt：常数，在移位指令中使用； </li><li>funct：功能码，指定指令的具体功能；</li></ul><p><img src="/2019/12/25/指令系统/image-20191225145707263.png" alt="image-20191225145707263"></p><h4 id="3寄存器R型指令"><a href="#3寄存器R型指令" class="headerlink" title="3寄存器R型指令"></a>3寄存器R型指令</h4><p><img src="/2019/12/25/指令系统/image-20191225145743811.png" alt="image-20191225145743811"></p><h4 id="2寄存器R型指令"><a href="#2寄存器R型指令" class="headerlink" title="2寄存器R型指令"></a>2寄存器R型指令</h4><p><img src="/2019/12/25/指令系统/image-20191225145805858.png" alt="image-20191225145805858"></p><h4 id="1寄存器R型指令"><a href="#1寄存器R型指令" class="headerlink" title="1寄存器R型指令"></a>1寄存器R型指令</h4><p><img src="/2019/12/25/指令系统/image-20191225145825365.png" alt="image-20191225145825365"></p><h3 id="I型指令"><a href="#I型指令" class="headerlink" title="I型指令"></a>I型指令</h3><p><img src="/2019/12/25/指令系统/image-20191225145843032.png" alt="image-20191225145843032"></p><p>操作数中涉及立即数，结果保存到寄存器； </p><ul><li>op：标识指令的操作功能； </li><li>rs：第1个源操作数，是寄存器操作数；</li><li>rt：目的寄存器编号，用来保存运算结果； </li><li>imm：第2个源操作数，立即数；</li></ul><p><img src="/2019/12/25/指令系统/image-20191225145942182.png" alt="image-20191225145942182"></p><h4 id="面向运算的I型指令"><a href="#面向运算的I型指令" class="headerlink" title="面向运算的I型指令"></a>面向运算的I型指令</h4><p><img src="/2019/12/25/指令系统/image-20191225150005890.png" alt="image-20191225150005890"></p><h4 id="面向访存的I型指令"><a href="#面向访存的I型指令" class="headerlink" title="面向访存的I型指令"></a>面向访存的I型指令</h4><p><img src="/2019/12/25/指令系统/image-20191225150028541.png" alt="image-20191225150028541"></p><h4 id="面向数位设置的I型指令"><a href="#面向数位设置的I型指令" class="headerlink" title="面向数位设置的I型指令"></a>面向数位设置的I型指令</h4><p><img src="/2019/12/25/指令系统/image-20191225150115338.png" alt="image-20191225150115338"></p><h4 id="面向条件转移-分支-的I型指令"><a href="#面向条件转移-分支-的I型指令" class="headerlink" title="面向条件转移(分支)的I型指令"></a>面向条件转移(分支)的I型指令</h4><p><img src="/2019/12/25/指令系统/image-20191225150151595.png" alt="image-20191225150151595"></p><h3 id="J型指令"><a href="#J型指令" class="headerlink" title="J型指令"></a>J型指令</h3><p><img src="/2019/12/25/指令系统/image-20191225150223733.png" alt="image-20191225150223733"></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;指令系统概述及指令格式&quot;&gt;&lt;a href=&quot;#指令系统概述及指令格式&quot; class=&quot;headerlink&quot; title=&quot;指令系统概述及指令格式&quot;&gt;&lt;/a&gt;指令系统概述及指令格式&lt;/h2&gt;&lt;h3 id=&quot;指令的基本概念&quot;&gt;&lt;a href=&quot;#指令的基本概念&quot; class=&quot;headerlink&quot; title=&quot;指令的基本概念&quot;&gt;&lt;/a&gt;指令的基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;指令&lt;ul&gt;
&lt;li&gt;计算机能直接识别、执行的操作命令（机器指令）；&lt;/li&gt;
&lt;li&gt;冯诺依曼结构计算机 “程序控制”原理实现的载体；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指令系统（指令集）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>存储系统II</title>
    <link href="http://yorxika.github.io/2019/12/24/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9FII/"/>
    <id>http://yorxika.github.io/2019/12/24/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9FII/</id>
    <published>2019-12-24T08:24:43.000Z</published>
    <updated>2019-12-24T17:22:08.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多体交叉存储器"><a href="#多体交叉存储器" class="headerlink" title="多体交叉存储器"></a>多体交叉存储器</h2><a id="more"></a><p><img src="/2019/12/24/存储系统II/image-20191224210559403.png" alt="image-20191224210559403"></p><p><img src="/2019/12/24/存储系统II/image-20191224210607265.png" alt="image-20191224210607265"></p><p><img src="/2019/12/24/存储系统II/image-20191224210614243.png" alt="image-20191224210614243"></p><p><img src="/2019/12/24/存储系统II/image-20191224210623500.png" alt="image-20191224210623500"></p><h2 id="Cache的基本原理"><a href="#Cache的基本原理" class="headerlink" title="Cache的基本原理"></a>Cache的基本原理</h2><p><img src="/2019/12/24/存储系统II/image-20191224212037889.png" alt="image-20191224212037889"></p><p><img src="/2019/12/24/存储系统II/image-20191224212100127.png" alt="image-20191224212100127"></p><p><img src="/2019/12/24/存储系统II/image-20191224212112439.png" alt="image-20191224212112439"></p><p><img src="/2019/12/24/存储系统II/image-20191224212119403.png" alt="image-20191224212119403"></p><h2 id="组相联存储器"><a href="#组相联存储器" class="headerlink" title="组相联存储器"></a>组相联存储器</h2><p><img src="/2019/12/24/存储系统II/image-20191224212557005.png" alt="image-20191224212557005"></p><p><img src="/2019/12/24/存储系统II/image-20191224212604189.png" alt="image-20191224212604189"></p><h2 id="Cache地址映射与变换方法"><a href="#Cache地址映射与变换方法" class="headerlink" title="Cache地址映射与变换方法"></a>Cache地址映射与变换方法</h2><h3 id="全相联"><a href="#全相联" class="headerlink" title="全相联"></a>全相联</h3><p><img src="/2019/12/24/存储系统II/image-20191224215252084.png" alt="image-20191224215252084"></p><p><img src="/2019/12/24/存储系统II/image-20191224215303023.png" alt="image-20191224215303023"></p><p><img src="/2019/12/24/存储系统II/image-20191224215314152.png" alt="image-20191224215314152"></p><p>特点：</p><ul><li>Cache利用率高</li><li>块冲突率低</li><li>淘汰算法复杂<br>应用场合：小容量Cache</li></ul><h3 id="直接映射"><a href="#直接映射" class="headerlink" title="直接映射"></a>直接映射</h3><p><img src="/2019/12/24/存储系统II/image-20191224215413222.png" alt="image-20191224215413222"><img src="/2019/12/24/存储系统II/image-20191224215413308.png" alt="image-20191224215413308"></p><p><img src="/2019/12/24/存储系统II/image-20191224215420100.png" alt="image-20191224215420100"></p><p><img src="/2019/12/24/存储系统II/image-20191224215430954.png" alt="image-20191224215430954"></p><p>特点：<br>特点：</p><ul><li>Cache利用率低</li><li>块冲突率高</li><li>淘汰算法简单<br>应用场合：大容量Cache</li></ul><h3 id="组相联"><a href="#组相联" class="headerlink" title="组相联"></a>组相联</h3><p><img src="/2019/12/24/存储系统II/image-20191224215513463.png" alt="image-20191224215513463"></p><p><img src="/2019/12/24/存储系统II/image-20191224215520381.png" alt="image-20191224215520381"></p><p><img src="/2019/12/24/存储系统II/image-20191224215526406.png" alt="image-20191224215526406"></p><p><img src="/2019/12/24/存储系统II/image-20191224215532554.png" alt="image-20191224215532554"></p><h2 id="替换算法"><a href="#替换算法" class="headerlink" title="替换算法"></a>替换算法</h2><h3 id="先进先出-（First-in-First-out）"><a href="#先进先出-（First-in-First-out）" class="headerlink" title="先进先出-（First in First out）"></a>先进先出-（First in First out）</h3><p><img src="/2019/12/24/存储系统II/image-20191224221407980.png" alt="image-20191224221407980"></p><h3 id="最不经常使用法-LFU-（Least-Frequently-Used"><a href="#最不经常使用法-LFU-（Least-Frequently-Used" class="headerlink" title="最不经常使用法-LFU （Least Frequently Used )"></a>最不经常使用法-LFU （Least Frequently Used )</h3><p><img src="/2019/12/24/存储系统II/image-20191224221454348.png" alt="image-20191224221454348"></p><h3 id="近期最少使用法—-LRU-Least-recently-used"><a href="#近期最少使用法—-LRU-Least-recently-used" class="headerlink" title="近期最少使用法— LRU(Least recently used )"></a>近期最少使用法— LRU(Least recently used )</h3><p><img src="/2019/12/24/存储系统II/image-20191224221523084.png" alt="image-20191224221523084"></p><h2 id="Cache例题选讲"><a href="#Cache例题选讲" class="headerlink" title="Cache例题选讲"></a>Cache例题选讲</h2><p>假定主存和Cache之间采用直接映射方式，块大小为16B。Cache数据区容量 为64KB，主存地址为32位，按字节编址，数据字长32位。要求 1)给出直接映射方式下主存地址划分 2)完成Cache访问的硬件实现 3)计算Cache容量<br>解：1)由题目条件知：<br>数据块大小16B  -&gt;   块内偏移地址4位；<br>Cache数据区容量为64KB -&gt;  64KB/16B = 4096行Cache）；-&gt; Index字段12位<br>Tag字段的位数为 32- 12 - 4 =16位（Tag）<br>由第一问的解答可知：Tag 为16 bit<br>由题目条件及Cache的工作原理知： Cache每行数据存储体容量为 16<em>8 = 128 bit<br>Cache 每行的总存储容量为： 1+ 16 + 128 = 145 bit<br>Cache 总容量为：4096 \</em>（1+16 +128）= 580Kbit<br><img src="/2019/12/24/存储系统II/image-20191224224643640.png" alt="image-20191224224643640"></p><p>设某机内存容量为16MB,Cache的容量16KB,每块8个字,每个字32位.设计一个四 路组相联映射(即Cache内每组包含4个字块)的Cache组织方式。<br>1）求满足组相联映射的主存地址字段中各字段的位数<br>2)设Cache的初态为空,CPU从主存第0号单元开始连续访问100个字(主存一次读出一 个字),重复此次序读8次,求存储访问的命中率<br>3)若Cache的速度是主存速度的6倍,求存储系统访问加速比</p><p><img src="/2019/12/24/存储系统II/image-20191224224843910.png" alt="image-20191224224843910"></p><p><img src="/2019/12/24/存储系统II/image-20191224224850389.png" alt="image-20191224224850389"><br>3）设Cache的存取周期为t，则主存存取周期为6t<br>直接从内存读取所有数据所需时间为: Tnc = 800*6t = 4800t<br>通过Cache访问800个数据的时间为: Tc = 13*6t +(800-13)*t = 865t<br>存储系统访问的加速比 S = Tnc/Tc =( 4800t/865t) = 5.5</p><h2 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h2><ul><li>处于主存 –辅存存储层次</li><li>解决主存容量不足的问题，为程序设计者提供比主存空间大的编程空间</li><li>分类：页式虚拟存储器、段式虚拟存储器 、段页式虚拟存储器</li></ul><p>采用MMU(Memory Management Unit):管理虚拟存储器与物理存储器<br>采用页表来判断CPU要访问的内容是否在主存，并与MMU配合实现 逻辑地址与物理地址之间的转换？</p><p><img src="/2019/12/24/存储系统II/image-20191224231716146.png" alt="image-20191224231716146"></p><p><img src="/2019/12/24/存储系统II/image-20191224231728581.png" alt="image-20191224231728581"></p><p><img src="/2019/12/24/存储系统II/image-20191224231739198.png" alt="image-20191224231739198"></p><p><img src="/2019/12/24/存储系统II/image-20191224232305422.png" alt="image-20191224232305422"></p><h2 id="TLB-Translation-Lookaside-Buffer"><a href="#TLB-Translation-Lookaside-Buffer" class="headerlink" title="TLB (Translation Lookaside Buffer)"></a>TLB (Translation Lookaside Buffer)</h2><p>虚实地址转换过程中存在的问题</p><p><img src="/2019/12/24/存储系统II/image-20191224233435375.png" alt="image-20191224233435375"></p><p><img src="/2019/12/24/存储系统II/image-20191224233447289.png" alt="image-20191224233447289"></p><h3 id="TLB工作原理"><a href="#TLB工作原理" class="headerlink" title="TLB工作原理"></a>TLB工作原理</h3><ul><li><p>根据局部性原理，增加一个小容量、高速存储部件存放当前访问页表地址变换条 目，该存储部件称为TLB(Translation Lookaside Buffer:地址转换后备缓冲器)。</p></li><li><p>TLB类似页表，也是PTE的集合。为实现对TLB的快速访问，类似于Cache中的映射方法， 对来自于CPU的虚页号进行逻辑划分，得到相应的标记和索引字段。</p></li></ul><p><img src="/2019/12/24/存储系统II/image-20191224233533276.png" alt="image-20191224233533276"></p><p><img src="/2019/12/24/存储系统II/image-20191224233543726.png" alt="image-20191224233543726"></p><p><img src="/2019/12/24/存储系统II/image-20191224233559705.png" alt="image-20191224233559705"></p><h2 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h2><p>Redundant Arrays of Independent Disks：独立磁盘冗余阵列<br>核心技术：</p><ul><li>将数据条带化后的存放在不同磁盘上，通过多磁盘的并行操作提高磁 盘系统的读写速率；</li><li>使用基于异或运算为基础的校验技术恢复损坏的数据</li></ul><p><img src="/2019/12/24/存储系统II/image-20191224235157669.png" alt="image-20191224235157669"></p><p><img src="/2019/12/24/存储系统II/image-20191224235206899.png" alt="image-20191224235206899"></p><p><img src="/2019/12/24/存储系统II/image-20191224235212960.png" alt="image-20191224235212960"></p><p><img src="/2019/12/24/存储系统II/image-20191224235218656.png" alt="image-20191224235218656"></p><p><img src="/2019/12/24/存储系统II/image-20191224235224206.png" alt="image-20191224235224206"></p><p><img src="/2019/12/24/存储系统II/image-20191224235229473.png" alt="image-20191224235229473"></p><p><img src="/2019/12/24/存储系统II/image-20191224235234864.png" alt="image-20191224235234864"></p><p><img src="/2019/12/24/存储系统II/image-20191224235241651.png" alt="image-20191224235241651"></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>以下关于虚拟存储管理地址转换的叙述中错误的是（<strong>C</strong>）<br>A.MMU在地址转换过程中要访问页表项<br>B.地址转换过程中可能会发生“缺页”<br>C.一般来说，逻辑地址比物理地址的位数少<br>D.地址转换是指把逻辑地址转换为物理地址</p><p>假定主存按字节编址，cache共有64行，采用4路组相联映射方式，主存块大小为32字节，所有编号都从0开始。问主存第3000号单元所在主存块对应的cache组号是<strong>13</strong></p><p>主存第3000号单元，一个主存块为32字节，故有3000/32 = 93余24，因此在第94块上，又因为编号从0开始，因此在编号为93的块中，因为 Cache有64行，一组有4行，因此 C =16 组，所以i =93mod16 = 13</p><p>下列关于CaChe的说法中，错误的是（ <strong>C</strong>    ）<br>A.CaChe行大小与主存块大小一致<br>B.<strong>分离CaChe(也称哈佛结构)是指存放指令的CaChe与存放数据CaChe分开设置</strong><br>C.读操作也要考虑CaChe与主存的一致性问题<br>D.CaChe对程序员透明</p><p>下列关于命中组合的情况中，一次访存过程中可能发生的是(<strong>acd</strong>)。</p><p>A．TLB未命中，CaChe命中，Page未命中<br>B．TLB未命中，CaChe未命中，Page命中<br>C．TLB命中，CaChe命中，Page未命中<br>D．TLB命中，CaChe未命中，Page未命中</p><p>因此，TLB命中，页表一定命中；TLB不命中，页表可能命中可能不命中；页表命中，TLB可能命中也可能不命中；页表不命中，TLB一定不命中。<br>TLB和页表命中与否与Cache无关。</p><p>虚拟存储器中， 程序执行过程中实现虚拟地址到物理地址映射部件（系统）是 <strong>操作系统和MMU配合完成</strong></p><p>相联存储器是按(<strong>内容指定方式</strong> )进行寻址的存储器。</p><p>关于cache存储器，下面的叙述中正确的是 (<strong>D</strong>) 。</p><p>A．cache存储器是内存中的一个特定区域<br>B．cache存储器的存取速度介于内存和磁盘之间<br>C．cache存储器中存放的内容是内存的备份<br>D．<strong>cache存储器存放正在处理的部分指令和数据</strong>/</p><p>一个组相联高速缓存由64个字块组成，每个字块有256字节，分为8组，主存有4096个字块。请问：<br>1）主存地址有多少位<br>2）请写出主存地址的格式。</p><p>解答：<br>1）主存容量为4096块*256字=2^20字，故主存地址为20位<br>Cache容量为64块*256字<br>共有4096/8 = 512 = 2^9个组群<br>即2^20=2^9 * 2^3 * 2^8<br>2）Cache3，字块为256字节=2^8，所以主存地址的格式为：</p><p><img src="/2019/12/24/存储系统II/view.jfif" alt="cache练习及答案"></p><p>在请求分页存储管理方案中，若某用户空间为16个页面，页长1KB，现有页表如下，则逻辑地址102B（H）所对应的物理地址为（<strong>082BH</strong> ）。<br>页号    块号<br>0    1<br>1    5<br>2    3<br>3    7<br>4    2</p><p>16个页面，2的4次方=16，可知页号部分占4位，页长为1k，2的10次方=1k，页面大小（偏移）占10位<br>102B（H）十六进制表示法，B=11，所以102B（H）=0001 0000 0010 1011<br>页内地址为：00 0010 1011<br>页号为：0100=4.查表可知页号4对应的块号为2，<br>物理地址=物理块号*物理块号大小+页面位移<br>页号=（int）（逻辑地址/页面大小）<br>页面位移=逻辑地址%页面大小=0001 0000 0010 1011%100 0000 0000=0010 1011<br>所以逻辑地址102B（H）所对应的物理地址=2*1k +0010 1011=1000 0010 1011<br>转化为16进制082B（H） </p><p>计算机主存容量8MB，分为4096个主存块，cache有64KB，请问若按照采用直接映射方式。<br>1)cache有多少字块？<br>2)Cache的字块内地址为多少位<br>3)Cache的字块地址为多少位<br>4)请写出该主存的地址格式<br>5）若按照全相联映射方式请写出该主存的地址格式</p><p>解答：<br>1）每字块大小为8MB/4096= 2KB ,cache有64KB，cache块的大小与主存的块大小一样，都为2KB，所以有64KB/2KB=32个块<br>2）Cache的字块与主存的字块一样大小都为2KB=211B，所以cache的字块内地址为11位3）Cache有32块=25，所以Cache的字块地址为5位<br>4）主存容量23<br><img src="/2019/12/24/存储系统II/view-1577207603980.jfif" alt="cache练习及答案"><br>5<br><img src="/2019/12/24/存储系统II/view-1577207604012.jfif" alt="cache练习及答案"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多体交叉存储器&quot;&gt;&lt;a href=&quot;#多体交叉存储器&quot; class=&quot;headerlink&quot; title=&quot;多体交叉存储器&quot;&gt;&lt;/a&gt;多体交叉存储器&lt;/h2&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>存储系统I</title>
    <link href="http://yorxika.github.io/2019/12/24/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%B8%80/"/>
    <id>http://yorxika.github.io/2019/12/24/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E4%B8%80/</id>
    <published>2019-12-24T06:24:30.000Z</published>
    <updated>2019-12-26T17:34:34.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储系统层次结构"><a href="#存储系统层次结构" class="headerlink" title="存储系统层次结构"></a>存储系统层次结构</h2><h3 id="基本存储体系"><a href="#基本存储体系" class="headerlink" title="基本存储体系"></a>基本存储体系</h3><p>存储程序                                                  —&gt; 内存<br>1) 输入设备将程序与数据写入主存；   ^<br>2) CPU取指令;                                           |<br>3) CPU执行指令期间读数据；                |<br>4) CPU写回运算结果；                            |<br>5)  输出设备输出结果；                           |<br>程序控制                                                    —&gt; CPU</p><a id="more"></a><p>主存容量不足的原因：</p><ul><li>存在制约主存容量的技术因素</li><li>应用对主存的需求不断扩大</li></ul><p><img src="/2019/12/24/存储系统一/image-20191224143440462.png" alt="image-20191224143440462"></p><p>哈佛结构：是一种将指令储存和数据储存分开的存储器结构，可支持：数据和指令并行储存、指令 预取，提高处理器的执行效率；另外，指令和数据可有不同的数据宽度，如Microchip 公司的PIC16芯片的程序指令是14位宽度，而数据是8位宽度。<br>目前使用哈佛结构的：PIC系列、摩托罗拉公司的MC68系列、Zilog公司的Z8系列、 ATMEL公司的AVR系列和ARM公司的ARM9、ARM10和ARM11。</p><p><img src="/2019/12/24/存储系统一/image-20191227012511278.png" alt="image-20191227012511278"></p><h3 id="存储体系层次化结构的理论基础"><a href="#存储体系层次化结构的理论基础" class="headerlink" title="存储体系层次化结构的理论基础"></a>存储体系层次化结构的理论基础</h3><p>局部性原理 </p><ul><li>时间局部性: <ul><li>现在被访问的信息2在不久的将来还将再次被访问;</li><li>时间局部性的程序结构体现：循环结构 </li></ul></li><li>空间局部性： <ul><li>现访问信息2 ，下一次访问2附近的信息。</li><li>空间局部性的程序结构体现：顺序结构</li></ul></li></ul><h2 id="主存中的数据组织"><a href="#主存中的数据组织" class="headerlink" title="主存中的数据组织"></a>主存中的数据组织</h2><p>存储字长：</p><ul><li>主存的一个存储单元所包含的二进制位数；</li><li>目前大多数计算机的主存按字节编址，存储字长也不断加大,如16位字长、 32位字长和64位字长；</li><li>ISA设计时要考虑的两个问题：<ul><li>a)如何根据字节地址读取一个32位的字？ </li><li>b)一个字能否存放在主存的任何字节边界？ - 字的存放问题 - 字的边界对齐问题</li></ul></li></ul><p><img src="/2019/12/24/存储系统一/image-20191224151529700.png" alt="image-20191224151529700"></p><p><img src="/2019/12/24/存储系统一/image-20191224151536995.png" alt="image-20191224151536995"></p><p>边界对齐与存储地址的关系（以32位为例）</p><ul><li>双字长数据边界对齐的起始地址的最末三位为000(8字节整数倍；</li><li>单字长边界对齐的起始地址的末二位为00(4字节整数倍)；</li><li>半字长边界对齐的起始地址的最末一位为0(２字节整数倍)。</li></ul><p><img src="/2019/12/24/存储系统一/image-20191224151700729.png" alt="image-20191224151700729"></p><p><img src="/2019/12/24/存储系统一/image-20191224151728347.png" alt="image-20191224151728347"></p><h2 id="静态存储器工作原理"><a href="#静态存储器工作原理" class="headerlink" title="静态存储器工作原理"></a>静态存储器工作原理</h2><p><img src="/2019/12/24/存储系统一/image-20191224154646533.png" alt="image-20191224154646533"></p><p><img src="/2019/12/24/存储系统一/image-20191224154652629.png" alt="image-20191224154652629"></p><p><img src="/2019/12/24/存储系统一/image-20191224154658914.png" alt="image-20191224154658914"></p><p><img src="/2019/12/24/存储系统一/image-20191224154704558.png" alt="image-20191224154704558"></p><p><img src="/2019/12/24/存储系统一/image-20191224154711826.png" alt="image-20191224154711826"></p><p><img src="/2019/12/24/存储系统一/image-20191224154729278.png" alt="image-20191224154729278"></p><p><img src="/2019/12/24/存储系统一/image-20191224154739209.png" alt="image-20191224154739209"></p><h2 id="动态存储器工作原理"><a href="#动态存储器工作原理" class="headerlink" title="动态存储器工作原理"></a>动态存储器工作原理</h2><p>SRAM存储单元不足：</p><ul><li>晶体管过多</li><li>存储密度低</li><li>功耗大</li></ul><p><img src="/2019/12/24/存储系统一/image-20191224162301973.png" alt="image-20191224162301973"></p><p><img src="/2019/12/24/存储系统一/image-20191224162316869.png" alt="image-20191224162316869"></p><p><img src="/2019/12/24/存储系统一/image-20191224162327920.png" alt="image-20191224162327920"></p><p><img src="/2019/12/24/存储系统一/image-20191224162336607.png" alt="image-20191224162336607"></p><p><img src="/2019/12/24/存储系统一/image-20191224162343371.png" alt="image-20191224162343371"></p><p><img src="/2019/12/24/存储系统一/image-20191224162351879.png" alt="image-20191224162351879"></p><p><img src="/2019/12/24/存储系统一/image-20191224162357494.png" alt="image-20191224162357494"></p><p><img src="/2019/12/24/存储系统一/image-20191224162402845.png" alt="image-20191224162402845"></p><p><img src="/2019/12/24/存储系统一/image-20191224162410001.png" alt="image-20191224162410001"></p><h2 id="存储拓展"><a href="#存储拓展" class="headerlink" title="存储拓展"></a>存储拓展</h2><p><img src="/2019/12/24/存储系统一/image-20191224161733688.png" alt="image-20191224161733688"></p><p>位拓展举例： 用16K * 8 的存储芯片构建16K * 32的存储器</p><p>所需芯片数量： 16K*32/(16K*8) = 4<br>所有存储芯片并行工作，贡献32位数据中的不同8位</p><p><img src="/2019/12/24/存储系统一/image-20191227012839226.png" alt="image-20191227012839226"></p><hr><p>字扩展举例:  用16K* 8 的存储芯片构建128k* 8的存储器</p><p>所需芯片数量： 128K * 8/ (16K*8) = 8<br>128k存储器 -&gt; 17根地址线<br>16K的存储 -&gt; 14根地址线<br>多余的3根地址线 作为片选译码输入</p><p><img src="/2019/12/24/存储系统一/image-20191227012958630.png" alt="image-20191227012958630"></p><hr><p>用16K* 8 的存储芯片构建128K*  8的存储器，其中08000H~0BFFFH存储空间保留不用</p><p>所需芯片数量： (128K-16k )* 8/ (16K*8) = 7<br><img src="/2019/12/24/存储系统一/image-20191227013302066.png" alt="image-20191227013302066"></p><hr><p><img src="/2019/12/24/存储系统一/image-20191224162032635.png" alt="image-20191224162032635"></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>字位结构为256Kｘ4位SRAM存储芯片，其地址引脚与数据引脚之和为：22</p><p>256K 需要18根，4位4根</p><hr><p>假定用若干块4K <em>4位的存储芯片组成一个8K</em>8位的存储器，则地址0B1F所在芯片的最小地址是<strong>0000H</strong></p><hr><p>用若干片2K´4位的存储芯片组成一个8K´8位的存储器，则地址0B1FH所在的芯片在全局的最大地址是<strong>0FFFH</strong></p><hr><p>下列存储器类型中，速度最快的是 <strong>B</strong><br>A.Flash Memory    B.SRAM    C.DRAM    D.EPROM</p><p>SRAM是cache</p><hr><p>关于内存的下列说法中，错误的是<strong>AD</strong><br>A.内存的存取速度不能低于CPU速度，否则会造成数据丢失<br>B.某计算机内存容量为8GB，按字节编址，那么它的地址总线为33位<br>C.程序只有在数据和代码等被调入内存后才能运行<br>D.采用虚拟内存技术后程序可以在硬盘上直接运行</p><hr><p>DRAM比SRAM慢，可能的原因包括<strong>ABCD</strong><br>A.DRAM读之前需要预充电<br>B.DRAM存储体行列地址线复用<br>C.DRAM需要刷新<br>D.DRAM存储单元采用了双译码结构</p><hr><p>不需要定时刷新的半导体存储器芯片是<strong>ACD</strong><br>A.SRAM    B.DRAM    C.Flash Memory    D.EPROM</p><hr><p>某计算机存储器按字节变址，采用小端方式存放数据。假定编译器规定int 型和 short 型长度分别为 32 位和 16 位，并且数据按边界对齐存储。某 C 语言程序段如下：</p><p><img src="/2019/12/24/存储系统一/3814779_1478420350406_9D7738A42D1C889AE8A3BA51F1DEF7AC.png" alt="img"></p><p>若record 变量的首地址为 0xC008，则地址 0xC008 中内容及 record.c 的地址是0x11 0xC00E</p><hr><p>计算机字长32位，主存容量为128MB，按<strong>字</strong>编址，其寻址范围为<strong>0~128M-1</strong></p><hr><p>某计算机内存容量为8GB，按字节编址，那么它的地址总线为33位 <strong>错</strong><br>要大于33根</p><hr><p>下列关于RAM和ROM的叙述中，正确的是<strong>BD</strong><br>A.ROM和RAM都不需要刷新<br>B.RAM是易失性存储器，ROM是非失性存储器<br>C.Cache可选RAM、ROM做数据存储体<br>D. RAM和ROM都采用随机存取的方式进行访问</p><hr><p>一般Cache采用高速的SRAM制作，比ROM速度快很多，因此Ⅲ是错误的，排除法即可选A。动态RAM是靠MOS电路中的栅极电容来记忆信息的。由于电容上的电荷会泄漏,需要定时给与补充,所以动态 RAM需要 设置 刷新 电路。RAM需要刷新，而ROM不需要刷新。<br>ROM与RAM两者的差别：<br>(1) RAM是随机存取存储器; ROM是只读存储器；<br>(2) RAM是易失性的，一旦掉电，则所有信息全部丢失；ROM是非易失性的，其信息可以长期保存，常用于存放一些固定用的数据和程序，如计算机的自检程序、BIOS、游戏卡中的游戏，等等。</p><hr><p>下列属于衡量存储器技术指标的是：<strong>存储容量、存取时间、存储周期和存储器带宽</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;存储系统层次结构&quot;&gt;&lt;a href=&quot;#存储系统层次结构&quot; class=&quot;headerlink&quot; title=&quot;存储系统层次结构&quot;&gt;&lt;/a&gt;存储系统层次结构&lt;/h2&gt;&lt;h3 id=&quot;基本存储体系&quot;&gt;&lt;a href=&quot;#基本存储体系&quot; class=&quot;headerlink&quot; title=&quot;基本存储体系&quot;&gt;&lt;/a&gt;基本存储体系&lt;/h3&gt;&lt;p&gt;存储程序                                                  —&amp;gt; 内存&lt;br&gt;1) 输入设备将程序与数据写入主存；   ^&lt;br&gt;2) CPU取指令;                                           |&lt;br&gt;3) CPU执行指令期间读数据；                |&lt;br&gt;4) CPU写回运算结果；                            |&lt;br&gt;5)  输出设备输出结果；                           |&lt;br&gt;程序控制                                                    —&amp;gt; CPU&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>运算器</title>
    <link href="http://yorxika.github.io/2019/12/23/%E8%BF%90%E7%AE%97%E5%99%A8/"/>
    <id>http://yorxika.github.io/2019/12/23/%E8%BF%90%E7%AE%97%E5%99%A8/</id>
    <published>2019-12-22T16:46:38.000Z</published>
    <updated>2019-12-26T17:14:54.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定点数运算及溢出检测"><a href="#定点数运算及溢出检测" class="headerlink" title="定点数运算及溢出检测"></a>定点数运算及溢出检测</h2><ul><li>补码加法：[X＋Y]补 = [X]补＋ [Y]补<ul><li>和的补码 = 补码的和</li></ul></li><li>补码减法：[X−Y]补 = [X]补＋ [−Y]补 = [X]补−[Y]补<ul><li>差的补码 = 补码的差<a id="more"></a></li><li>减法变加法，关键是求[−Y]补</li></ul></li><li>求补公式：[−Y]补= [ [Y]补 ]补<ul><li><strong>对 [Y]补逐位取反, 再在最低位加 1</strong></li></ul></li></ul><p><img src="/2019/12/23/运算器/image-20191223010219114.png" alt="image-20191223010219114"></p><h3 id="单符号数溢出检测"><a href="#单符号数溢出检测" class="headerlink" title="单符号数溢出检测"></a>单符号数溢出检测</h3><h4 id="方法I"><a href="#方法I" class="headerlink" title="方法I"></a>方法I</h4><p>溢出只可能发生在同符号数相加时，包括[X]补与[Y]补； [X]补与[-Y]同号；<br>方法1：对操作数和运算结果的符号位进行检测 当结果的符号位与操作数的符号不相同时就表明发生了溢出 </p><ul><li>正正得负  负负得正</li><li>设两数符号位为 f0 f1 ，和数符号位 fs</li><li>溢出检测信号Overflow   (OF)<br>OF = !f0·!f1·fs + f0·f1·!fs</li></ul><h4 id="方法II"><a href="#方法II" class="headerlink" title="方法II"></a>方法II</h4><p>方法2：对最高数据位进位和符号进位进行检测 •设运算时最高数据位产生的进位为C1，符号位产生的进位为C0， 溢出检测电路为： V= C0 ^ C 1</p><p><img src="/2019/12/23/运算器/image-20191226234848895.png" alt="image-20191226234848895"></p><h4 id="方法III"><a href="#方法III" class="headerlink" title="方法III"></a>方法III</h4><p>方法3：用变型补码 [X]补 = Xf1Xf2. X1X2X3…Xn mod  2^n+2 溢出的判断:  V= Xf1 ^ Xf2</p><p>例6 已知 X=- 10010  Y= -10101  求X+Y<br>解:   [X]补=1101110   [Y]补= 1101011<br>[X+Y]补=[X]补+[Y]补= 1101110  + 1101011 =1 10 10001<br>V= 1 ^ 0 =1 故发生溢出！</p><h4 id="无符号数运算的溢出判断"><a href="#无符号数运算的溢出判断" class="headerlink" title="无符号数运算的溢出判断"></a>无符号数运算的溢出判断</h4><ul><li>无符号数加法的溢出可用ALU的进位表示</li><li>无符号数减法的溢出也可用带加/减功能的ALU的进位取反后表示。</li></ul><h2 id="定点数补码加减运算器设计"><a href="#定点数补码加减运算器设计" class="headerlink" title="定点数补码加减运算器设计"></a>定点数补码加减运算器设计</h2><h3 id="带进位链的一位全加器"><a href="#带进位链的一位全加器" class="headerlink" title="带进位链的一位全加器"></a>带进位链的一位全加器</h3><p>Si  =  Xi ⊕ Yi ⊕ Ci<br>Ci+1  =  Xi Yi  + (Xi ⊕ Yi )Ci</p><p><img src="/2019/12/23/运算器/image-20191226235525221.png" alt="image-20191226235525221"></p><ul><li>n位加法器包含n个全加器</li><li>将n个一位全加器串联</li><li>低位进位输出连接到高位进位输入</li></ul><h4 id="串行加法器时间延迟"><a href="#串行加法器时间延迟" class="headerlink" title="串行加法器时间延迟"></a>串行加法器时间延迟</h4><p>n个全加器延迟，3n个门电路延迟？<br>考虑片内并行性，2n+1个门电路延迟</p><h3 id="四位串行加-减法器设计"><a href="#四位串行加-减法器设计" class="headerlink" title="四位串行加/减法器设计"></a>四位串行加/减法器设计</h3><p>补码减法可以变加法<br>         [X]补 − [Y]补 = [X]补 + [−Y]补<br>关键是求[−Y]补<br>方法：将Y补连同符号位一起逐位取反末位加一<br>         [−Y]补= [ [Y]补 ]补             注意补码区间不对称？</p><ul><li>引入运算控制位 Sub<ul><li>Sub=0 时作加法，送入加法器的是Y补    </li><li>Sub=1 时作减法，送入加法器的是[−Y]补   <ul><li>对 Y补 逐位取反，末位加一</li></ul></li></ul></li></ul><p>[−Y]补= [ [Y]补 ]补<br>Input = Yi ^ Sub</p><p><img src="/2019/12/23/运算器/image-20191223011539952.png" alt="image-20191223011539952"></p><p><img src="/2019/12/23/运算器/image-20191223011546598.png" alt="image-20191223011546598"></p><p><img src="/2019/12/23/运算器/image-20191223011554683.png" alt="image-20191223011554683"></p><p><img src="/2019/12/23/运算器/image-20191223011604477.png" alt="image-20191223011604477"></p><h3 id="并行加法器进位链-carry-lookahead"><a href="#并行加法器进位链-carry-lookahead" class="headerlink" title="并行加法器进位链(carry-lookahead)"></a>并行加法器进位链(carry-lookahead)</h3><p>Si = Xi⊕Yi⊕Ci-1<br>Ci = XiYi+(Xi⊕Yi)Ci-1<br>Gi = XiYi    进位生成函数 Generate<br>Pi = Xi⊕Yi    进位传递函数 Propagate<br>Ci = Gi + Pi·Ci-1<br>高位运算依赖于低位进位 -&gt; 计算不能并行</p><p>Cn = Gn＋PnGn-1＋PnPn-1Gn-2＋PnPn-1Pn-2Gn-3 …＋PnPn-1…P1C0</p><ul><li>进位输出仅与最低位进位输入C0有关</li><li>位数越长，进位链电路复杂度越高</li><li>通常按照4位一组进行分组运算</li></ul><p><img src="/2019/12/23/运算器/image-20191223011617449.png" alt="image-20191223011617449"></p><p><img src="/2019/12/23/运算器/image-20191223011651720.png" alt="image-20191223011651720"><br>①生成P*，G*需3T  -&gt;  ②生成C3/C12需2T -&gt;  ③求和需3T</p><h2 id="原码一位乘法"><a href="#原码一位乘法" class="headerlink" title="原码一位乘法"></a>原码一位乘法</h2><ul><li>符号单独运算：直接异或</li><li>绝对值相乘：   仅需考虑数值部分的计算</li></ul><p><img src="/2019/12/23/运算器/image-20191223105629422.png" alt="image-20191223105629422"></p><p><img src="/2019/12/23/运算器/image-20191223105639405.png" alt="image-20191223105639405"></p><p><img src="/2019/12/23/运算器/image-20191223105649861.png" alt="image-20191223105649861"></p><p><img src="/2019/12/23/运算器/image-20191223105716737.png" alt="image-20191223105716737"></p><h2 id="补码一位乘法"><a href="#补码一位乘法" class="headerlink" title="补码一位乘法"></a>补码一位乘法</h2><p>设[X]补 = X0X1X2X3…Xn [Y]补 = Y0Y1Y2Y3…Yn<br>可证明：<br>   [X•Y]补 = [X]补•( 0.Y1Y2Y3…Yn ) –Y0• [X]补<br>进一步展开合并后可得：<br>   [x•y]补=[x] 补•Σ(yi+1 - yi)2^-i    ( 符号位参加运算 ) </p><p>补码一位乘法的运算规则如下:<br>(1)如果yn+1=yn,部分积加0，部分积算术右移1位；<br>(2)如果yn+1yn=10,部分积加[x]补，部分积算术右移1位；<br>(3)如果yn+1yn=01,部分积加[-x]补，部分积算术右移1位. 重复进行n＋1步，但最后一步不移位。<br>包括一位符号位，所得乘积为2n＋1位，其中n为数据位位数. </p><p>几个特殊问题的处理<br>(1) i=n时 ,yn+1= ？yn+1= 0<br>(2) yn+1 是哪个寄存器？在乘数寄存器Y后增加的一位<br>(3)算术右移的对象有哪些？   部分积和乘数寄存器均右移</p><p><img src="/2019/12/23/运算器/image-20191223110749473.png" alt="image-20191223110749473"></p><p><img src="/2019/12/23/运算器/image-20191223110759842.png" alt="image-20191223110759842"></p><h2 id="乘法运算器设计"><a href="#乘法运算器设计" class="headerlink" title="乘法运算器设计"></a>乘法运算器设计</h2><p><img src="/2019/12/23/运算器/image-20191223112447328.png" alt="image-20191223112447328"></p><h3 id="阵列乘法器"><a href="#阵列乘法器" class="headerlink" title="阵列乘法器"></a>阵列乘法器</h3><p>而对于相加数运算，就变成了一位乘法运算，一位乘法运算很简单，从真值表看，这就是一个简单的与逻辑，也就是逻辑与门就可以实现一位乘法，对于上一页的5*5的乘法运算，需要25个相加数，所以我们可以采用25个与门并发，如图所示，经过<strong>一级门电路延迟</strong>后，就可以得到所有的相加数，下面我们只需要考虑逐列相加的逻辑就可以实现乘法器</p><p><img src="/2019/12/23/运算器/image-20191227001319627.png" alt="image-20191227001319627"></p><ul><li>与门实现一位乘法</li><li>25个与门并发</li><li>一级门延迟，生成所有相加数</li></ul><p><img src="/2019/12/23/运算器/image-20191227001414909.png" alt="image-20191227001414909"></p><p>经过一级门电路延迟后，生成了所有相加数，这里X。。就是，将第二列用一个全加器进行相加，由于全加器有三个输入，所以这里进位位我们给一个零，当然大家也可以使用半加器完成，去掉进位输入，可以减少硬件成本，相加得到的结果就是乘积的P1位，进位输出横向向高位列传递，这就是所谓的横向进位阵列乘法器，将第三列的三个数用两个全加器串联进行运算，就可以得到P2，同样，全加器的进位输出都横向向左侧传递。，最后一个全加器进位输入为零，依次类推，得到P3，P4，P5，对于P6列，这个进位信号直接传递到下一层的全加器，同理得到P7，P。。。。。      如果采用斜向进位，就可以有另外一种连接方法。</p><p>前面我们给出了横向进位和斜向进位两种阵列乘法器，首先我们来看看横向进位阵列乘法器，5*5的横向阵列乘法器包括4行全加器，每行5个，需要20个全加器，进位信号横向传递，每一行都是一个5位串行进位加法器，串行加法器的特点就是性能差，各全加器之间存在着进位依赖，所以这个全加器运算完毕后，这个才能运算，然后是这个，第一行运算完毕后，第二行才能开始运算，所以看上去所有全加器都只能串行工作，整个运算需要20个全加器时延。</p><p>但仔细分析，这个横向进位阵列乘法器还存在这一定的并行性，首先是这个全加器运算，运算完毕后这个全加器运算，当第二个全加器运算完毕后，这两个全加器的输入就绪，两个全加器可以并发，当这两个全加器运算完毕后，这两个全加器运算，然后是这三个全加器并发，所以沿着对角线法线方向上的全加器是可以并发的，我们来看看乘法器的关键路径<br>(T是计算X1Y1，X0Y0的那个时延)</p><p><img src="/2019/12/23/运算器/image-20191227001634066.png" alt="image-20191227001634066"></p><p>斜向进位乘法器和横向进位乘法器结构有一些区别，加法器一共5行，每行4个全加器，横向进位是4行，每行5个，硬件电路成本相同，都是n。     由于斜向进位的引入，同一行的全加器可以并发，行与行之间有结果依赖，所以前面4行需要4个全加器延迟，也就是n-1个全加器延迟，最后一行由于采用的是横向进位，所以这部分如果不做优化，器时间延迟也是n-1个全加器延迟，电路运行的关键路径如下，一共需要。。。。。。。 斜式时间复杂度优于横向进位阵列乘法器，由3n个全加器延迟结标变成2n级别，性能明显由于横向进位阵列乘法器</p><p><img src="/2019/12/23/运算器/image-20191227002149154.png" alt="image-20191227002149154"></p><p>最后对比一下横向进位阵列乘法器，和斜向阵列乘法器，两个电路硬件成本都是n*n-1个全加器，只不过一个是4行5列，一个是5行4列但由于内部进位信号传递方式不同，直接导致性能差异加大，大约是1.5倍的差异， 不同结构硬件实现方式就和软件的算法一样，好的算法可以得到优秀的性能</p><p><img src="/2019/12/23/运算器/image-20191223112518818.png" alt="image-20191223112518818"></p><p><img src="/2019/12/23/运算器/image-20191223112531553.png" alt="image-20191223112531553"></p><h3 id="计算机中的流水线"><a href="#计算机中的流水线" class="headerlink" title="计算机中的流水线"></a>计算机中的流水线</h3><ul><li>流水思想：复杂问题分解成细粒度任务并发<ul><li>乘法流水线，浮点流水线，指令流水线</li><li>流水线 = 寄存器 + 组合逻辑 + 寄存器 + 组合逻辑 + 寄存器  …        数据通路串联</li><li>流水线时钟频率取决于组合逻辑的关键路径</li></ul></li></ul><p><img src="/2019/12/23/运算器/image-20191227003555284.png" alt="image-20191227003555284"></p><p>回到阵列乘法器上，如果简单的5*5将阵列乘法器看做4个5位串行加法器的级联，我们可以将运算过程细分为4个步骤，第一步计算Y+。。。。  得到部分积，为了简化设计，我们这里可以直接采用10位的加法器进行运算，不足的位补零即可， 第二部将第一步运算的结果累加上Y2X*4，*4是考虑权值对齐的问题，同理第三部。。。。第四部是。。。。。。完成第四部运算后10位加法器的运算结果就是最终的成绩，如果吧这里绿色的横线当做流水接口，实际上就可以演变成一个乘法流水线，这里流水接口本质上就是一堆寄存器，用于锁存当前步骤运算的部分积，，，以及后续步骤运算所需要的Yi*X。   后续我们实验中要求大家按照这个思路实现一个乘法流水线。</p><p><img src="/2019/12/23/运算器/image-20191227003638643.png" alt="image-20191227003638643"></p><p>刚刚我们给出的第一种流水线改造办法将乘法运算细分成了4部，实际上我们还可以按照横向进位阵列乘法器的关键路径进行流水细分，比如这里我们可以按照关键路径将乘法运算细分成11步，每一步中的全加器都可以完全并行，和刚刚介绍的方案1相比，这里流水线每一步的时间延迟更短，由10位全加器时延变成了一个全加器时延，流水线的时钟频率更高，流水线的性能更优。<br>这两种方法都是将乘法运算细分成若干更小的步骤，让后引入流水接口部件—-寄存器锁存中间结果构成运算流水线，实际上浮点运算流水线也是采用了类似的方法。   真是计算机中的乘法器也是采用流水线实现的，目前大多采用布斯两位乘法+华莱士树的方式构成，如果你有兴趣可以研究一下。</p><p><img src="/2019/12/23/运算器/image-20191227003720937.png" alt="image-20191227003720937"></p><h3 id="变量与常数之间的乘法运算"><a href="#变量与常数之间的乘法运算" class="headerlink" title="变量与常数之间的乘法运算"></a>变量与常数之间的乘法运算</h3><ul><li>整数乘法比移位和加法运算慢很多</li><li>编译器在处理变量与常数相乘时，用其它快速运算指令代替乘法<pre><code>x\*20  -&gt;  (x&lt;&lt;4)+(x&lt;&lt;2)       乘法转换成了2次移位和1次加法x\*15  -&gt;  (x&lt;&lt;4) – x               乘法转换成了1次移位和1次减法</code></pre></li><li>移位加减组合运算和直接相乘结果一样的（包括溢出）</li><li>是否优化取决于组合运算周期数是否小于乘法开销</li></ul><h2 id="定点数除法"><a href="#定点数除法" class="headerlink" title="定点数除法"></a>定点数除法</h2><h3 id="恢复余数除法"><a href="#恢复余数除法" class="headerlink" title="恢复余数除法"></a>恢复余数除法</h3><ul><li>如何判断是否够减<ul><li>利用补码作减法，判断余数符号即可</li></ul></li><li>余数为负数时，必须恢复余数<ul><li>将余数加除数，恢复成原值</li></ul></li><li>求下一位商，必须将余数左移一位，再与除数比较<ul><li>手工运算将除数右移？</li><li>注意这里余数放大了，最后结果要缩小</li></ul></li><li>比较，上商（恢复），余数移位，再比较，<ul><li>直到商的位数足够</li></ul></li></ul><p><img src="/2019/12/23/运算器/image-20191223231843074.png" alt="image-20191223231843074"></p><p><img src="/2019/12/23/运算器/image-20191223231854975.png" alt="image-20191223231854975"></p><p><img src="/2019/12/23/运算器/image-20191223231901994.png" alt="image-20191223231901994"></p><p>问题：</p><ul><li>需要进行恢复余数的操作<ul><li>余数是负数，必须恢复余数</li><li>绝对值运算，余数不可能是负数</li></ul></li><li>恢复余数的操作次数不确定<ul><li>运算时间不固定</li><li>最慢除法（每次都不够除），拖慢除法速度</li></ul></li><li>实际应用通常采用<strong>不恢复余数除法</strong></li></ul><h3 id="不恢复余数除法"><a href="#不恢复余数除法" class="headerlink" title="不恢复余数除法"></a>不恢复余数除法</h3><ul><li>n设某次余数为Ri，求下位商需将Ri左移一位，再减去除数Y进行比较，此过程可表示为<br>2Ri - Y</li><li>余数Ri小于0时商上0，需要恢复余数，左移一位，再减除数Y比较<br>(2Ri - Y）+ Y = 2Ri<br>2*2Ri – Y =4Ri–Y = 2*(2Ri -Y) + Y</li><li>不恢复余数法：余数Ri小于0时商上0，左移一位，再<strong>加</strong>除数Y比较</li></ul><p><img src="/2019/12/23/运算器/image-20191223231927917.png" alt="image-20191223231927917"></p><p><img src="/2019/12/23/运算器/image-20191223232007762.png" alt="image-20191223232007762"></p><p><img src="/2019/12/23/运算器/image-20191223232026608.png" alt="image-20191223232026608"></p><ul><li>n*n个CAS单元</li><li>(n*n) ×4T</li></ul><p><img src="/2019/12/23/运算器/image-20191223232033420.png" alt="image-20191223232033420"></p><h2 id="浮点数加减运算"><a href="#浮点数加减运算" class="headerlink" title="浮点数加减运算"></a>浮点数加减运算</h2><h3 id="规格化浮点数概念"><a href="#规格化浮点数概念" class="headerlink" title="规格化浮点数概念"></a>规格化浮点数概念</h3><ul><li>由于浮点数是将数据的表示范围与精确度分别表示的数据表示方法，若不对浮点数的表示作出明确规定，同一个浮点数的表示就不唯一</li><li>规格化浮点数是指把一个浮点数按指定的格式进行转换，</li><li>由于浮点数是将数据的表示范围与精确度分别表示的数据表示方法，若不 对浮点数的表示作出明确规定，同一个浮点数的表示就不唯一，</li><li>以浮点数一般格式为例，规格化浮点数的尾数形式为: 00.1… 或 11.0…。</li></ul><h3 id="规格化浮点数方法"><a href="#规格化浮点数方法" class="headerlink" title="规格化浮点数方法"></a>规格化浮点数方法</h3><ul><li>当尾数结果为 00.0… 或 11.1，需要左规格化即将尾数向左移动， 每移动一次，阶码减1，直到尾数形式为 00.1… 或 11.0…。</li><li>当尾数的结果为 01.… 或 10.， 表明尾数求和的结果 &gt; 1,此时仅 需要执行一次右移规格化， 阶码加 1 ,尾数形式即为00.1… 或 11.0…</li></ul><h3 id="浮点数加减运算方法及其步骤"><a href="#浮点数加减运算方法及其步骤" class="headerlink" title="浮点数加减运算方法及其步骤"></a>浮点数加减运算方法及其步骤</h3><ul><li><p>对阶 </p><ul><li>求阶差；</li><li>右移阶码小的浮点数的尾数并同步增加其阶码，直至两数阶码相等。</li></ul></li><li><p>尾数加/减 </p><ul><li>尾数加/减运算 （用对阶后的尾数） </li></ul></li><li><p>结果规格化</p><ul><li>尾数非零时，要求绝对值≥0.5，尾数MSB=1</li><li>否则修改阶码并移动尾数，使其满足上述要求</li><li>目的：保证浮点数的编码唯一性</li><li>右移以实现规格化   向右规格化   右归   阶码+<ul><li>右归时连同符号位进位位一起右移，阶码作加法 </li></ul></li><li>左移以实现规格化   向左规格化   左归   阶码-<ul><li>左归时LSB位补0，阶码作减法</li></ul></li></ul></li><li><p>舍入</p><ul><li>右移规格化时可能丢失一些低位的数值位, 为提高精度,  可采取舍入的方法: </li><li>0 舍 1 入 : 若右移出的是1则在最低位加1;<br><img src="/2019/12/23/运算器/image-20191227005213203.png" alt="image-20191227005213203"></li><li>恒置 1 : 只要数字位1被移掉,就将最后一位恒置成1。</li></ul></li><li><p>溢出处理 </p><ul><li>浮点数的溢出标志:  阶码溢出 </li><li>阶码上溢 ： 阶码的符号位为 01 </li><li>阶码下溢 ： 阶码的符号位为 10</li><li>尾数上溢   右归</li><li>尾数下溢   左归</li></ul></li></ul><p>例1  两浮点数 x = 2^101×0.11011011，y = 2^111×(-0.10101100)。假设尾数在计算机中以补码表示，可存储10位尾数，2位符号位，阶码以补码表示，双符号位, 求 x + y。</p><p>解：将x , y转换成浮点格式<br>     [x]浮 = 00101, 00.11011011<br>     [Y]浮 = 00111, 11.01010100<br>步骤1：对阶，阶差为 Ex − Ey = [Ex]补 + [−Ey]补<br>     [−Ey]补=11001  Ex−Ey＝00101＋11001＝11110 = -2 &lt; 0<br>         小阶对大阶， X阶码加2， 尾数右移2位<br>     [x]浮 = 00111,00.0011011011   保留位<br>     [x]浮 = 00111, 00.0011011011   保留位<br>     [Y]浮 = 00111, 11.01010100<br>步骤2：尾数求和<br>     [X+Y]浮 = 00111, 11.1000101011   保留位参与运算<br>步骤3：结果规格化<br>     [X+Y]浮 = 00110, 11.000101011     非规数，左归1位, 阶码减1，保留位？<br>步骤4：舍入处理<br>     [X+Y]浮 = 00110, 11.00010110   (0舍1如法)<br>     [X+Y]浮 = 00110, 11.00010101   (截去法)<br>步骤5：溢出判断<br>    [X+Y]浮 = 2110 x (-0.11101011)   无溢出</p><p>特殊例子：<br>X=2^111 *  0.11111111，Y=2^111 * 0.10000001<br>                      [X]浮  =    0111, 0.1111 1111<br>           +         [Y]浮  =    0111, 0.1000 0001<br>                  [X+Y]浮  =    0111, 1.1000 0000<br>              尾数上溢，右归一位，连同符号位进位位一起右移1位，阶码加1<br>                  [X+Y]浮 =    1000, 0.1100 0000<br>            阶码正溢出，运算结果上溢  </p><p>X=2^-1000 * -0.11110000，Y=2^-1000 * 0.10000001<br>                     [X]浮  =    1000, 1.0001 0000<br>          +         [Y]浮  =    1000, 0.1000 0001<br>                [X+Y]浮   =    1000, 1.1001 0001<br>            尾数下溢，左归一位， 左移一位，阶码减1<br>                [X+Y]浮  =    1000, 1.0010 0010<br>                   1000+1111=0111 =7<br>            阶码负上溢，运算结果下溢</p><h2 id="浮点数乘法运算"><a href="#浮点数乘法运算" class="headerlink" title="浮点数乘法运算"></a>浮点数乘法运算</h2><p>X=2^m * Mx        Y=2^n * My<br>        X * Y = ( 2^m * Mx ) * ( 2^n * My ) = 2^m+n * (Mx * My)<br>(1) 阶码相加<br>阶码相加可能产生溢出，要进行溢出判断，如溢出计算机要进行处理<br>(2) 尾数相乘<br>尾数相乘可得积的尾数，可按定点乘法运算方法运算<br>(3) 结果规格化<br>可按浮点加/减法运算规格化方式处理，舍入方式也相同</p><h2 id="浮点数除法运算"><a href="#浮点数除法运算" class="headerlink" title="浮点数除法运算"></a>浮点数除法运算</h2><p>如：X=2^m * Mx        Y=2^n * My<br>        X / Y = ( 2^m * Mx ) / ( 2n * My ) = 2^m-n * (Mx / My)<br>尾数调整<br>如被除数尾数大于除数尾数 (绝对值)，则将被除数尾数右移一位，阶码+1<br>阶码求差<br>商的阶码等于被除数的阶码减去除数的阶码<br>尾数相除<br>以被除数的尾数除以除数的尾数以获得商的尾数，尾数相除与定点除法运算相同</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p><strong>单符号位补码表示的两个同号数相加或异号数相减时，所得结果的符号位SF和进位标志CF进行（D ）运算为1时，表示运算的结果产生溢出</strong><br>A.与非    B.与        C.或        D.异或</p><hr><p><strong>若采用双符号位补码运算，运算结果的符号位为10，下列结论中错误的是 AB</strong><br>A.产生了上溢    B.运算结果溢出，结果为正数    C.产生了下溢    D.运算结果溢出，结果为负数</p><p>计算机运算溢出检测机制，采用双符号位，00表示正号，11表示负号。如果进位将会导致符号位不一致，从而检测出溢出。结果的符号位为01时，称为上溢；为10时，称为下溢。</p><hr><p>以下说法正确的是<strong>ABCD</strong><br>A.n位小数的补码一位乘法（Booth算法），需做n+1次运算，第n+1次不移位<br>B.浮点运算可由阶码运算和尾数运算两个部分联合实现<br>C.补码加减交替法是一种不恢复余数法<br><strong>D.在定点小数补码一位除法中，为了避免溢出，被除数的绝对值一定要小于除数的绝对值</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定点数运算及溢出检测&quot;&gt;&lt;a href=&quot;#定点数运算及溢出检测&quot; class=&quot;headerlink&quot; title=&quot;定点数运算及溢出检测&quot;&gt;&lt;/a&gt;定点数运算及溢出检测&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;补码加法：[X＋Y]补 = [X]补＋ [Y]补&lt;ul&gt;
&lt;li&gt;和的补码 = 补码的和&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;补码减法：[X−Y]补 = [X]补＋ [−Y]补 = [X]补−[Y]补&lt;ul&gt;
&lt;li&gt;差的补码 = 补码的差&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数据表示</title>
    <link href="http://yorxika.github.io/2019/12/19/%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/"/>
    <id>http://yorxika.github.io/2019/12/19/%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/</id>
    <published>2019-12-19T14:52:33.000Z</published>
    <updated>2019-12-26T15:38:37.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><a id="more"></a><p><img src="/2019/12/19/数据表示/image-20191220003552325.png" alt="image-20191220003552325"></p><h2 id="机器数及其特点"><a href="#机器数及其特点" class="headerlink" title="机器数及其特点"></a>机器数及其特点</h2><p><img src="/2019/12/19/数据表示/image-20191219231153151.png" alt="image-20191219231153151"></p><p><strong>原码特性</strong></p><ul><li>直观易懂<ul><li>第一位为符号位</li><li>其他为数值位</li></ul></li><li>正零负零两个零</li><li>加、减运算方式不统一<ul><li>符号相异加法不能直接运算</li><li>特别当 a&lt;b时，实现 a-b比较困难</li></ul></li><li>从50年代开始，整数都采用补码来表示</li><li>但浮点数的尾数用原码定点小数表示</li></ul><p><strong>反码特性</strong></p><ul><li>两个零</li><li>求反用逻辑门容易实现</li><li>运算仍然很复杂<ul><li>相加时需要将符号位的进位位增加到LSB上</li></ul></li></ul><p><strong>补码特性</strong></p><ul><li>唯一的零</li><li>符号位可以直接参与运算</li><li>减法可以变成加法，运算电路统一</li><li>负数比整数多一个</li><li>不同位数的整数补码相加减时<ul><li>位数少的补码符号位向左扩展</li><li>一直扩展到符号位对齐</li></ul></li></ul><p><img src="/2019/12/19/数据表示/image-20191219231207351.png" alt="image-20191219231207351"></p><p><img src="/2019/12/19/数据表示/image-20191219232033377.png" alt="image-20191219232033377"></p><p><img src="/2019/12/19/数据表示/image-20191219232235893.png" alt="image-20191219232235893"></p><p>定点数机器码表示范围：<br><img src="/2019/12/19/数据表示/image-20191219232325487.png" alt="image-20191219232325487"></p><h3 id="双符号位补码"><a href="#双符号位补码" class="headerlink" title="双符号位补码"></a>双符号位补码</h3><p><img src="/2019/12/19/数据表示/image-20191220004143783.png" alt="image-20191220004143783"></p><h2 id="定点与浮点数据表示"><a href="#定点与浮点数据表示" class="headerlink" title="定点与浮点数据表示"></a>定点与浮点数据表示</h2><p><img src="/2019/12/19/数据表示/image-20191219233804226.png" alt="image-20191219233804226"></p><p><img src="/2019/12/19/数据表示/image-20191219233824924.png" alt="image-20191219233824924"></p><p><img src="/2019/12/19/数据表示/image-20191219233857085.png" alt="image-20191219233857085"></p><p><img src="/2019/12/19/数据表示/image-20191219233918638.png" alt="image-20191219233918638"></p><p><img src="/2019/12/19/数据表示/image-20191220005108307.png" alt="image-20191220005108307"></p><p><img src="/2019/12/19/数据表示/image-20191220005139118.png" alt="image-20191220005139118"></p><p><img src="/2019/12/19/数据表示/image-20191219233929847.png" alt="image-20191219233929847"></p><ul><li>机器字长一定时，阶码越长，表示范围越大</li><li>阶码相同，尾数越长，数据精度越高</li><li>浮点数表示范围比定点数大，精度高</li><li>阶码尾码长度应为多少合适？  </li><li>阶码越长，表示范围越大，精度越高 (规格化)</li><li>浮点数扩大了数值表示的范围， 未增加表示数值的个数</li><li>绝对值越大，浮点数分布越稀疏，浮点数是离散空间</li><li>浮点运算不满足结合律<ul><li>（2-126+1020）-1020 = ?       2-126 + (1020 - 1020) =?</li></ul></li></ul><h3 id="十进制数的表示-BCD码"><a href="#十进制数的表示-BCD码" class="headerlink" title="十进制数的表示 BCD码"></a>十进制数的表示 BCD码</h3><p><img src="/2019/12/19/数据表示/image-20191220005354101.png" alt="image-2019"></p><h2 id="数据校验的基本原理"><a href="#数据校验的基本原理" class="headerlink" title="数据校验的基本原理"></a>数据校验的基本原理</h2><p><img src="/2019/12/19/数据表示/image-20191219234631646.png" alt="image-20191219234631646"></p><p><img src="/2019/12/19/数据表示/image-20191219234643400.png" alt="image-20191219234643400"></p><p><img src="/2019/12/19/数据表示/image-20191219234654617.png" alt="image-20191219234654617"></p><h2 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h2><p><img src="/2019/12/19/数据表示/image-20191220005825812.png" alt="image-20191220005825812"></p><p><img src="/2019/12/19/数据表示/image-20191219235642154.png" alt="image-20191219235642154"></p><p><img src="/2019/12/19/数据表示/image-20191219235921834.png" alt="image-20191219235921834"></p><h2 id="CRC校验及其实现"><a href="#CRC校验及其实现" class="headerlink" title="CRC校验及其实现"></a>CRC校验及其实现</h2><p><img src="/2019/12/19/数据表示/image-20191220001405535.png" alt="image-20191220001405535"></p><ul><li><p><strong>生成多项式特征</strong></p><ul><li>任意位发生错误都应使余数不为0</li><li>不同位发生错误余数不同</li><li>余数左移一位继续作模2除，应使余数循环，循环周期 N=k+r  ？</li></ul></li><li><p><strong>如何产生生成多项式</strong></p><ul><li>(n,k)码，将Xn+1分解为若干质因子   （模2的运算）</li><li>根据码距要求选择其中的因式或多个因式的乘积为生成多项式</li></ul></li><li><p>码距：任意两个合法编码间不同的二进制位数    最小码距</p></li><li><p>码距越大，抗干扰能力、纠错能力越强，数据冗余越大，编码效率越低</p></li><li><p>选择码距应考虑信息出错概率和系统容错率</p><ul><li>奇偶校验  最小码距为2</li><li>海明码     最小码距为3</li></ul></li></ul><p><img src="/2019/12/19/数据表示/image-20191220001447447.png" alt="image-20191220001447447"></p><p><img src="/2019/12/19/数据表示/image-20191226232339760.png" alt="image-20191226232339760"></p><p><img src="/2019/12/19/数据表示/image-20191220001757864.png" alt="image-20191220001757864"></p><p>(7,3)码多位错余数情况</p><ul><li>两位数出错余数与一位错有重叠（见表）</li><li>三位错余数有可能为零   如 C1，C2，C4   （无法全部检错）</li></ul><p><img src="/2019/12/19/数据表示/image-20191226232647970.png" alt="image-20191226232647970"></p><p>CRC串行编码电路    (时序逻辑)</p><p><img src="/2019/12/19/数据表示/image-20191226233101210.png" alt="image-20191226233101210"></p><ul><li>有异或门的位置是生成多项式为1的位置，G(X)=X4+X+1    10011</li><li>触发器初始状态为0</li><li>Q4=0时，不够除，下一个时钟，数据左移一位</li><li>Q4=1时，够除，商上1， Q4Q3Q2Q1Serial_in ⊕ 生成多项式  结果左移<br>运算速度慢，高速设备普遍采用 并行CRC 编解码</li></ul><p>备注：<br>下面我们来看一看CRC串行编码电路，注意这个串行编码电路是一个同步时序逻辑，具有统一时钟。<br>从图中我们可以看到这个电路的包括若干个D触发器，Q4这Q3…..一共共4个D触发器，所有D触发器时钟同步，注意D触发器之间的链接，部分是直接串联，部分D触发器之间有一个异或门，异或门一个输入连接的是当前寄存器输出，另外一个是Q4的输出。这里有异或门的地方就是CRC编码电路生成多项式为1的位置，具体如红色文字所示，Q4位置是最高位，默认为1，所以生成多项式为10011，初始状态，所有触发器输出Q4Q3Q2Q1的值均为零，最高位Q4为零，按模2的除法不够除，Q4控制所有的异或门，因为Q4为零，所有异或门位置变成数据直通，Q1直接连接到Q2的D端。<br>四个D触发器直接串联，变成一个移位寄存器，时钟到来数据左移一位<br>这和模2除法的不够除的处理过程是完全一致的。根据这个运算规则，如果左移后Q4的值仍然还是0，则会继续左移，Q3，Q2，Q1初值都为零，所以只有串行输入数据中的第一个1传输到Q4时电路才会改变运行模式，当Q4为1时，所有异或门的地方要异或上1，相当于是Q4Q3Q2Q1串行输入这一组数据和生成多项式做异或，生成多项式为1的地方进行异或运算，为0的地方异或上零还是不变，还是原始数据，这里采用直连方式，计算后的结果下一时钟会左移一位，这个电路状态就是模2除法运时最高位为1，够除，商上1，被除数和除数进行异或运算，结果左移当串行输入的最后一位数据抵达进入电路后，各触发器输入端的值D4D3D2D1就是最终的余数这样一个电路，如果串行输入的数据越长，那么它需要的时钟就越多，所以它的运算速度非常慢的，目前在高速网络设备中必须采用并行的CRC编解码电路。</p><p>(7,3）编码电路</p><p><img src="/2019/12/19/数据表示/image-20191226233311840.png" alt="image-20191226233311840"></p><p>CRC   (N,k)码检错性能      r=N-k</p><ul><li>所有小于等于r长度的突发错<ul><li>通讯中常见，各出错位之间有因果关系</li><li>突发错长度：第一和最后一个错位之间的距离</li></ul></li><li>( 1−2^(–r+1))比例的r+1长度的突发错</li><li>( 1−2^–r )比例的大于r+1长度的突发错</li><li>所有小于最小码距的任意位数的错误</li><li>如果生成多项式中1的数目为偶数，可检测所有奇数错</li><li>广泛运用于通信传输领域，磁存储领域</li></ul><h2 id="海明校验及其实现"><a href="#海明校验及其实现" class="headerlink" title="海明校验及其实现"></a>海明校验及其实现</h2><ul><li><p>多个奇偶校验组</p></li><li><p>既能检错，也能纠错</p></li><li><p>最小码距为3</p></li><li><p>编码规则：分组交叉奇偶校验法</p><ul><li>待编码数据分成 r 个奇偶校验组，r&gt;1</li><li>r 位校验位（冗余），生成r位检错码</li><li>各数据位至少参加2个校验组</li><li>一个数据位出错，可导致多个检错码为1</li></ul></li><li><p>检错纠错：检错码值表示出错位置   （假设1位错）</p><ul><li>检错码全零， 数据大概率正常</li><li>可检错，也可纠错，将出错位取反即可</li></ul></li></ul><p><img src="/2019/12/19/数据表示/image-20191220003136644.png" alt="image-20191220003136644"></p><p><img src="/2019/12/19/数据表示/image-20191220003145152.png" alt="image-20191220003145152"></p><p>(4,3)码分组依据<br><img src="/2019/12/19/数据表示/image-20191226231723570.png" alt="image-20191226231723570"></p><p><img src="/2019/12/19/数据表示/image-20191220003206327.png" alt="image-20191220003206327"></p><p><img src="/2019/12/19/数据表示/image-20191220003218848.png" alt="image-20191220003218848"></p><p><img src="/2019/12/19/数据表示/image-20191220003228764.png" alt="image-20191220003228764"></p><p><img src="/2019/12/19/数据表示/image-20191220003246821.png" alt="image-20191220003246821"></p><ul><li>可检一位错<ul><li>检错码G3G2G1 !=000，具体值为出错位置，取反即可纠错</li></ul></li><li>可检两位错<ul><li>假设D1 ，D2同时出错，  G3G2G1=110  ？</li></ul></li><li>大多数三位错<ul><li>D1，D2，D3同时出错？G3G2G1=000  ？</li></ul></li><li>能否区分区分一位错，两位错？  <ul><li>假设没有3位错</li><li>引入总偶校验位 P4=H1⊕H2⊕H3⊕H4⊕H5⊕H6⊕H7</li><li>G4=P4⊕H1⊕H2⊕H3⊕H4⊕H5⊕H6⊕H7  区分一位两位错</li></ul></li></ul><p><img src="/2019/12/19/数据表示/image-20191226231946271.png" alt="image-20191226231946271"></p><p>海明码特点：</p><ul><li>编码效率高：数据增加一倍，校验位只增加一位</li><li>可纠正一位错</li><li>50年代发明时用于自动处理穿孔卡片的故障</li><li>现在普遍用于ECC  DRAM芯片</li><li>RAID2，卫星通讯</li></ul><h2 id="校验码总结"><a href="#校验码总结" class="headerlink" title="校验码总结"></a>校验码总结</h2><p><img src="/2019/12/19/数据表示/image-20191220010548069.png" alt="image-20191220010548069"></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>下列对海明校验的描述中，正确的描述是  <strong>C</strong><br>A.在任何条件下，海明校验都无法检测到多位数据同时出错的情况<br>B.分成r组时，可以得到r位指误码，因此可以QU区分2^r种只有1位出错的情况<br>C.待编码数据长度为4位，再增加3位校验码就可以检测到仅1位数据出错的情况并纠错<br>D.海明校验码的码距与校验位的位数没有关系</p><hr><p>计算机字长16位，采用补码表示整数，下列关于其表示数据范围的描述中正确的是<strong>ABCD</strong><br>A.能表示的最小正数是1<br>B.能表示的最小负数是- (2 ^15)<br>C.能表示最大正数是(2^15) - 1<br>D.能表示的最大负数是-1</p><hr><p>列关于补码和移码关系的描述中，错误的是<strong>B</strong><br>A.一般用译码表示浮点数的阶码，而用补码表示定点数<br>B.零的补码和移码相同<br>C.同一个数的补码和移码，其数值部分相同，而符号相反<br>D.相同位数的补码和移码具有相同的数据表示范围</p><p>移码：X+2^n</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进制转换&quot;&gt;&lt;a href=&quot;#进制转换&quot; class=&quot;headerlink&quot; title=&quot;进制转换&quot;&gt;&lt;/a&gt;进制转换&lt;/h2&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="组成原理" scheme="http://yorxika.github.io/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的右视图</title>
    <link href="http://yorxika.github.io/2019/12/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/"/>
    <id>http://yorxika.github.io/2019/12/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</id>
    <published>2019-12-19T13:15:29.000Z</published>
    <updated>2019-12-19T13:42:52.558Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第199题二叉树的右视图</p><p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="number">4</span>]</span><br><span class="line">输出: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>            &lt;---</span><br><span class="line"> /   \</span><br><span class="line"><span class="number">2</span>     <span class="number">3</span>         &lt;---</span><br><span class="line"> \     \</span><br><span class="line">  <span class="number">5</span>     <span class="number">4</span>       &lt;---</span><br></pre></td></tr></table></figure><h3 id="错误的遍历"><a href="#错误的遍历" class="headerlink" title="错误的遍历"></a>错误的遍历</h3><p>第一次提交忽略了当右子树比左子树短的情况下，要对左子树进行遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    helper(root);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="keyword">null</span>)</span><br><span class="line">        ans.add(root.val);</span><br><span class="line">    <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">        helper(root.right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)</span><br><span class="line">        helper(root.left);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>既然要考虑所有情况，那么就进行层序遍历，然后保留最后一个进队列的节点即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.add(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> len = queue.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == len - <span class="number">1</span>)</span><br><span class="line">                ans.add(queue.peek().val);</span><br><span class="line">            TreeNode tmp = queue.remove();</span><br><span class="line">            <span class="keyword">if</span>(tmp.left != <span class="keyword">null</span>)</span><br><span class="line">                queue.add(tmp.left);</span><br><span class="line">            <span class="keyword">if</span>(tmp.right != <span class="keyword">null</span>)</span><br><span class="line">                queue.add(tmp.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><p>来源<a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/solution/er-cha-shu-de-you-shi-tu-by-leetcode/" target="_blank" rel="noopener">题解</a></p><p><strong>直觉</strong></p><p>如果按正确的顺序访问每个节点，就可以有效地获得二叉树的右视图。</p><p><strong>算法</strong></p><p>上面提到的顺序之一可以由深度优先搜索定义。在深度优先搜索中，我们总是先访问右子树。这样就保证了当我们访问树的某个特定深度时，我们正在访问的节点总是该深度的最右侧节点。于是，可以存储在每个深度访问的第一个结点，一旦我们知道了树的层数，就可以得到最终的结果数组。</p><p><img src="/2019/12/19/二叉树的右视图/80f65d954842dc68509b516d563f846d1f02a31d099027d5a94b49b465e6030c-image.png" alt="image.png"></p><p>上图表示了问题的一个实例。红色结点自上而下组成答案，边缘以访问顺序标号。</p><p>题解通过维护两个栈（一个深度栈，一个节点栈）栈以及一个HashMap来填充每层的右视图。通过左子树入栈在右子树入栈的顺序保证出栈时是右子树先出栈，在将其对应深度填到HashMap里，最后按照深度对Map做一次遍历即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; rightmostValueAtDepth = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> max_depth = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* These two stacks are always synchronized, providing an implicit</span></span><br><span class="line"><span class="comment">         * association values with the same offset on each stack. */</span></span><br><span class="line">        Stack&lt;TreeNode&gt; nodeStack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; depthStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        nodeStack.push(root);</span><br><span class="line">        depthStack.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!nodeStack.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = nodeStack.pop();</span><br><span class="line">            <span class="keyword">int</span> depth = depthStack.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                max_depth = Math.max(max_depth, depth);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* The first node that we encounter at a particular depth contains</span></span><br><span class="line"><span class="comment">                * the correct value. */</span></span><br><span class="line">                <span class="keyword">if</span> (!rightmostValueAtDepth.containsKey(depth)) &#123;</span><br><span class="line">                    rightmostValueAtDepth.put(depth, node.val);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                nodeStack.push(node.left);</span><br><span class="line">                nodeStack.push(node.right);</span><br><span class="line">                depthStack.push(depth+<span class="number">1</span>);</span><br><span class="line">                depthStack.push(depth+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Construct the solution based on the values that we end up with at the</span></span><br><span class="line"><span class="comment">         * end. */</span></span><br><span class="line">        List&lt;Integer&gt; rightView = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> depth = <span class="number">0</span>; depth &lt;= max_depth; depth++) &#123;</span><br><span class="line">            rightView.add(rightmostValueAtDepth.get(depth));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rightView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>既然题解里用深度标明了每层的元素，那么我也应该可以在递归时多传一个参数，记作是当前节点的深度值，按照右左的顺序递归即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    helper(root,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root,<span class="keyword">int</span> deepth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(deepth == ans.size())</span><br><span class="line">        ans.add(root.val);</span><br><span class="line">    <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">        helper(root.right,deepth + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)</span><br><span class="line">        helper(root.left,deepth + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第199题二叉树的右视图&lt;/p&gt;
&lt;p&gt;给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
      <category term="广度优先搜索" scheme="http://yorxika.github.io/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>求根到叶子节点数字之和</title>
    <link href="http://yorxika.github.io/2019/12/18/%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/"/>
    <id>http://yorxika.github.io/2019/12/18/%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</id>
    <published>2019-12-18T15:09:23.000Z</published>
    <updated>2019-12-19T13:08:45.070Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第129题求根到叶子节点数字之和</p><p>给定一个二叉树，它的每个结点都存放一个 <code>0-9</code> 的数字，每条从根到叶子节点的路径都代表一个数字。</p><a id="more"></a><p>例如，从根到叶子节点路径 <code>1-&gt;2-&gt;3</code> 代表数字 <code>123</code>。</p><p>计算从根到叶子节点生成的所有数字之和。</p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">输出: <span class="number">25</span></span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 <span class="number">1</span>-&gt;<span class="number">2</span> 代表数字 <span class="number">12.</span></span><br><span class="line">从根到叶子节点路径 <span class="number">1</span>-&gt;<span class="number">3</span> 代表数字 <span class="number">13.</span></span><br><span class="line">因此，数字总和 = <span class="number">12</span> + <span class="number">13</span> = <span class="number">25.</span></span><br></pre></td></tr></table></figure><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p>跟之前写的路径总和差不多，也是要注意DFS在返回时需要去掉最后一个加入的点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    helper(root,ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="keyword">null</span>)</span><br><span class="line">        sum = sum * <span class="number">10</span> + root.val;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</span><br><span class="line">        ans += sum;</span><br><span class="line">    <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)</span><br><span class="line">        helper(root.left,sum);</span><br><span class="line">    <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">        helper(root.right,sum);</span><br><span class="line">    sum /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>来源<a href="https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/solution/3zhong-jie-fa-di-gui-xian-xu-fei-di-gui-xian-xu-ce/" target="_blank" rel="noopener">题解</a><br>通常还可以用 <code>stack</code> 的思路来解递归的题目。先序非递归的代码我们知道是用 <code>stack</code> 来保存遍历过的元素。而因为本题要记录到叶节点的数字，所以需要一个额外的 <code>stack</code> 来记录数字。每次出 <code>stack</code> 之后，如果是叶子节点，那么加和；如果不是，那么就看左右子树，入 <code>stack</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> sum;</span><br><span class="line">       Stack&lt;TreeNode&gt; nodeStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">       Stack&lt;Integer&gt; numStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">       nodeStack.add(root);</span><br><span class="line">       numStack.add(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">while</span> (!nodeStack.isEmpty()) &#123;</span><br><span class="line">           TreeNode current = nodeStack.pop();</span><br><span class="line">           Integer currentNum = numStack.pop() * <span class="number">10</span> + current.val;</span><br><span class="line">           <span class="keyword">if</span> (current.left == <span class="keyword">null</span> &amp;&amp; current.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">               sum += currentNum;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (current.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">               nodeStack.add(current.left);</span><br><span class="line">               numStack.add(currentNum);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (current.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">               nodeStack.add(current.right);</span><br><span class="line">               numStack.add(currentNum);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; </span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第129题求根到叶子节点数字之和&lt;/p&gt;
&lt;p&gt;给定一个二叉树，它的每个结点都存放一个 &lt;code&gt;0-9&lt;/code&gt; 的数字，每条从根到叶子节点的路径都代表一个数字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
      <category term="深度优先搜索" scheme="http://yorxika.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>复制带随机指针的链表</title>
    <link href="http://yorxika.github.io/2019/12/18/%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>http://yorxika.github.io/2019/12/18/%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</id>
    <published>2019-12-17T16:51:34.000Z</published>
    <updated>2019-12-18T05:47:41.092Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第138题复制带随机指针的链表</p><p>给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。</p><p>要求返回这个链表的<strong><a href="https://baike.baidu.com/item/深拷贝/22785317?fr=aladdin" target="_blank" rel="noopener">深拷贝</a></strong>。 <a id="more"></a></p><p><strong>示例：</strong></p><p><strong><img src="/2019/12/18/复制带随机指针的链表/1470150906153-2yxeznm.png" alt="img"></strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">&#123;<span class="string">"<span class="subst">$id</span>"</span>:<span class="string">"1"</span>,<span class="string">"next"</span>:&#123;<span class="string">"<span class="subst">$id</span>"</span>:<span class="string">"2"</span>,<span class="string">"next"</span>:<span class="keyword">null</span>,<span class="string">"random"</span>:&#123;<span class="string">"<span class="subst">$ref</span>"</span>:<span class="string">"2"</span>&#125;,<span class="string">"val"</span>:<span class="number">2</span>&#125;,<span class="string">"random"</span>:&#123;<span class="string">"<span class="subst">$ref</span>"</span>:<span class="string">"2"</span>&#125;,<span class="string">"val"</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">节点 <span class="number">1</span> 的值是 <span class="number">1</span>，它的下一个指针和随机指针都指向节点 <span class="number">2</span> 。</span><br><span class="line">节点 <span class="number">2</span> 的值是 <span class="number">2</span>，它的下一个指针指向 <span class="keyword">null</span>，随机指针指向它自己。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>你必须返回<strong>给定头的拷贝</strong>作为对克隆列表的引用。</li></ol><h3 id="哈希Map"><a href="#哈希Map" class="headerlink" title="哈希Map"></a>哈希Map</h3><p>利用一个哈希Map存储原链表结点和对应的拷贝结点，在原链表里遍历，但是要注意当原结点的随机结点为空时，不能将空结点及其拷贝放入哈希Map里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    Map&lt;Node,Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Node newHead = <span class="keyword">new</span> Node();</span><br><span class="line">    map.put(head,newHead);</span><br><span class="line">    Node p1 = newHead;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p1.val = head.val;</span><br><span class="line">        <span class="comment">//p1.next = head.next;</span></span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(head.random) &amp;&amp; head.random != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Node tmp = <span class="keyword">new</span> Node();</span><br><span class="line">            map.put(head.random,tmp);</span><br><span class="line">            p1.random = tmp;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(head.random != <span class="keyword">null</span>)</span><br><span class="line">            p1.random = map.get(head.random);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p1.random = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//map.put(head,p1);</span></span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(head))&#123;</span><br><span class="line">            p1.next = <span class="keyword">new</span> Node();</span><br><span class="line">            map.put(head,p1.next);</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1.next = map.get(head);</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原结点后追加新结点"><a href="#原结点后追加新结点" class="headerlink" title="原结点后追加新结点"></a>原结点后追加新结点</h3><p> <code>HashMap</code> 额外需要 <code>O(n)</code> 的空间复杂度，现在考虑不需要额外空间的方法。</p><p>主要参考了<a href="https://leetcode.com/problems/copy-list-with-random-pointer/discuss/43491/A-solution-with-constant-space-complexity-O(1)-and-linear-time-complexity-O(N)" target="_blank" rel="noopener">这里</a>。主要解决的问题就是我们生成节点以后，当更新它的 <code>random</code> 的时候，怎么找到之前生成的节点，前两种解法用了 <code>HashMap</code> 全部存起来，这里的话可以利用原来的链表的指针域。</p><p>主要需要三步。</p><ol><li>生成所有的节点，并且分别插入到原有节点的后边</li><li>更新插入节点的 <code>random</code></li><li>将新旧节点分离开来</li></ol><p>一图胜千言，大家看一下下边的图吧。</p><p><img src="https://pic.leetcode-cn.com/9bd4662fdbcb1e44f5ce208e29f3459d1adbf1e7ceb723e4bfc8ba2eff3bd186.jpg" alt="img"></p><p>代码对应如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node l1 = head;</span><br><span class="line">    Node l2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//生成所有的节点，并且分别插入到原有节点的后边</span></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        l2 = <span class="keyword">new</span> Node();</span><br><span class="line">        l2.val = l1.val;</span><br><span class="line">        l2.next = l1.next;</span><br><span class="line">        l1.next = l2;</span><br><span class="line">        l1 = l1.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新插入节点的 random</span></span><br><span class="line">    l1 = head;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.random != <span class="keyword">null</span>) &#123;</span><br><span class="line">            l1.next.random = l1.random.next;</span><br><span class="line">        &#125;</span><br><span class="line">        l1 = l1.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l1 = head;</span><br><span class="line">    Node l2_head = l1.next;</span><br><span class="line">    <span class="comment">//将新旧节点分离开来</span></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        l2 = l1.next;</span><br><span class="line">        l1.next = l2.next;</span><br><span class="line">        <span class="keyword">if</span> (l2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            l2.next = l2.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l2_head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用random保存新结点"><a href="#利用random保存新结点" class="headerlink" title="利用random保存新结点"></a>利用random保存新结点</h3><p>不利用额外的空间复杂度还有一种思路，参考 <a href="https://leetcode.com/problems/copy-list-with-random-pointer/discuss/43497/2-clean-C%2B%2B-algorithms-without-using-extra-arrayhash-table.-Algorithms-are-explained-step-by-step." target="_blank" rel="noopener">这里</a>。</p><p>上一个解法利用原链表的 <code>next</code> 域把新生成的节点保存了起来。类似的，我们还可以利用原链表的 <code>random</code> 域把新生成的节点保存起来。</p><p>主要还是三个步骤。</p><ol><li>生成所有的节点，将它们保存到原链表的 <code>random</code> 域，同时利用新生成的节点的 <code>next</code> 域保存原链表的 <code>random</code>。</li><li>更新新生成节点的 <code>random</code> 指针。</li><li>恢复原链表的 <code>random</code> 指针，同时更新新生成节点的 <code>next</code> 指针。</li></ol><p>一图胜千言。</p><p><img src="https://pic.leetcode-cn.com/9d18d01597f5ca7562c8dd3908082b13c27b989fcaebb37c163d6e7ced65f412.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node l1 = head;</span><br><span class="line">    Node l2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//生成所有的节点，讲它们保存到原链表的 random 域，</span></span><br><span class="line">    <span class="comment">//同时利用新生成的节点的 next 域保存原链表的 random。</span></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        l2 = <span class="keyword">new</span> Node();</span><br><span class="line">        l2.val = l1.val;</span><br><span class="line">        l2.next = l1.random;</span><br><span class="line">        l1.random = l2;</span><br><span class="line">        l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    l1 = head;</span><br><span class="line">    <span class="comment">//更新新生成节点的 random 指针。</span></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        l2 = l1.random;</span><br><span class="line">        l2.random = l2.next != <span class="keyword">null</span> ? l2.next.random : <span class="keyword">null</span>;</span><br><span class="line">        l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l1 = head;</span><br><span class="line">    Node l2_head = l1.random;</span><br><span class="line">    <span class="comment">//恢复原链表的 random 指针，同时更新新生成节点的 next 指针。</span></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        l2 = l1.random;</span><br><span class="line">        l1.random = l2.next;</span><br><span class="line">        l2.next = l1.next != <span class="keyword">null</span> ? l1.next.random : <span class="keyword">null</span>;</span><br><span class="line">        l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l2_head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第138题复制带随机指针的链表&lt;/p&gt;
&lt;p&gt;给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。&lt;/p&gt;
&lt;p&gt;要求返回这个链表的&lt;strong&gt;&lt;a href=&quot;https://baike.baidu.com/item/深拷贝/22785317?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深拷贝&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>路径总和II</title>
    <link href="http://yorxika.github.io/2019/12/17/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8CII/"/>
    <id>http://yorxika.github.io/2019/12/17/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8CII/</id>
    <published>2019-12-17T12:50:14.000Z</published>
    <updated>2019-12-17T13:05:13.116Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第113题路径总和II</p><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。<a id="more"></a></p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例:</strong><br>给定如下二叉树，以及目标和 <code>sum = 22</code>，</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      <span class="number">5</span></span><br><span class="line">     / \</span><br><span class="line">    <span class="number">4</span>   <span class="number">8</span></span><br><span class="line">   /   / \</span><br><span class="line">  <span class="number">11</span>  <span class="number">13</span>  <span class="number">4</span></span><br><span class="line"> /  \    / \</span><br><span class="line"><span class="number">7</span>    <span class="number">2</span>  <span class="number">5</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure><p>返回:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   [<span class="number">5</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>],</span><br><span class="line">   [<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>在递归返回上一层的时候要删去最后一个加入的节点，这样是否就可以认为是址传递呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    helper(root,sum,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root,<span class="keyword">int</span> sum,List&lt;Integer&gt; ss)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span> || sum &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//List&lt;Integer&gt; ss = new ArrayList&lt;&gt;(s);</span></span><br><span class="line">    ss.add(root.val);</span><br><span class="line">    sum -= root.val;</span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; sum == <span class="number">0</span>)</span><br><span class="line">        ans.add(<span class="keyword">new</span> ArrayList&lt;&gt;(ss));</span><br><span class="line">    <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; sum &gt; <span class="number">0</span>)</span><br><span class="line">        helper(root.left,sum,ss);</span><br><span class="line">    <span class="keyword">if</span>(root.right != <span class="keyword">null</span> &amp;&amp; sum &gt; <span class="number">0</span>)</span><br><span class="line">        helper(root.right,sum,ss);</span><br><span class="line">    ss.remove(ss.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第113题路径总和II&lt;/p&gt;
&lt;p&gt;给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="递归" scheme="http://yorxika.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>printf缓冲区问题</title>
    <link href="http://yorxika.github.io/2019/12/17/printf%E7%BC%93%E5%86%B2%E5%8C%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://yorxika.github.io/2019/12/17/printf%E7%BC%93%E5%86%B2%E5%8C%BA%E9%97%AE%E9%A2%98/</id>
    <published>2019-12-17T06:11:20.000Z</published>
    <updated>2019-12-17T11:15:18.380Z</updated>
    
    <content type="html"><![CDATA[<p>这里就要区分一下标准库函数和系统调用了。</p><p> 系统调用是内核提供给上层程序的接口，能够实现内核和上层之间的交互，系统调用在内核中的实现是软中断的方式，通过相应的中断服务例程来实现，<a id="more"></a>而标准库函数是在系统调用的基础之上封装的应用程序，完全运行在用户态，在必要的时候调用系统调用。编写应用程序可以直接使用应用程序也可以使用库函数，那为什么还要有库函数呢。</p><p> 以printf为例，在printf的实现中，在调用write之前加入了IO缓冲区，这是一个用户空间的缓冲，首先要说明一点，系统调用是软中断，频繁调用，需要内核频繁陷入内核态，这样的效率不是很高，而printf实际是向用户空间的IO缓冲写，在满足条件的情况下（条件下面会说）才会调用write系统调用，这样也就提高了内核的效率。</p><p>  对于普通的文件操作，库函数因为IO缓冲区，效率高，其他方面与直接调用系统调用无异，但是对于一些特殊的文件，如串口终端以及网络设备。对于应用程序来将，我们更加希望的是每次的操作能够真真正正的反映在底层的硬件上，这时我们最好就不要使用类似与printf这样的带IO缓冲区的标准库函数了，而是直接使用系统调用，我上面就是犯了这个错误。</p><p>  说完标准库函数和系统调用的区别，我们就要具体的分析一下printf。</p><p>  printf是一个行缓冲函数，先写到缓冲区，满足条件后，才将缓冲区刷到对应文件中，刷缓冲区的条件如下：</p><p>  1 缓冲区填满</p><p>  2 写入的字符中有‘\n’ ‘\r’</p><p>  3 调用fflush手动刷新缓冲区</p><p>  4 调用scanf要从缓冲区中读取数据时，也会将缓冲区内的数据刷新</p><p> 满足上面4个条件之一缓冲区就会刷新，也就是printf会真正调用write来写入</p><p>  当我们执行printf的进程或者线程结束的时候会主动调用flush来刷新缓冲区，所以程序结束，也会刷新</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里就要区分一下标准库函数和系统调用了。&lt;/p&gt;
&lt;p&gt; 系统调用是内核提供给上层程序的接口，能够实现内核和上层之间的交互，系统调用在内核中的实现是软中断的方式，通过相应的中断服务例程来实现，&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yorxika.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://yorxika.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Crossing River</title>
    <link href="http://yorxika.github.io/2019/12/14/Crossing-River/"/>
    <id>http://yorxika.github.io/2019/12/14/Crossing-River/</id>
    <published>2019-12-14T15:56:22.000Z</published>
    <updated>2019-12-14T16:01:05.906Z</updated>
    
    <content type="html"><![CDATA[<p>来源POJ第1700题Crossing River</p><p><strong>Description</strong></p><p>A group of N people wishes to go across a river with only one boat, which can at most carry two persons. Therefore some sort of shuttle arrangement must be arranged in order to row the boat back and forth so that all people may cross.<a id="more"></a> Each person has a different rowing speed; the speed of a couple is determined by the speed of the slower one. Your job is to determine a strategy that minimizes the time for these people to get across.</p><p><strong>Input</strong></p><p>The first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. The first line of each case contains N, and the second line contains N integers giving the time for each people to cross the river. Each case is preceded by a blank line. There won’t be more than 1000 people and nobody takes more than 100 seconds to cross.</p><p><strong>Output</strong></p><p>For each test case, print a line containing the total number of seconds required for all the N people to cross the river.</p><p>Sample Input</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">5</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><p>思路比较简单，分情况讨论，1个人过河，时长取最短的，2个人，时长取nums[1]，3个人取nums[0] + nums[1] + nums[2],当人数增加到4个人以上时要讨论，最快的(即所用时间nums[0])和次快的过河,然后最快的将船划回来,再次慢的和最慢的过河,然后次快的将船划回来.即所需时间为:nums[0]+2<em>nums[1]+nums[n-1],最快的和最慢的过河,然后最快的将船划回来,再最快的和次慢的过河,然后最快的将船划回来.即所需时间为:2</em>nums[0]+nums[n-2]+nums[n-1]这样就将过河所需时间最大的两个人送过了河,而对于剩下的人,采用同样的处理方式,接下来做的就是判断怎样用的时间最少.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//public static int[] nums;</span></span><br><span class="line"><span class="comment">//public static long mid;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> all = in.nextInt(), len, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (all &gt; <span class="number">0</span>) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">len = in.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">nums[i] = in.nextInt();</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="keyword">int</span> times = len;</span><br><span class="line"><span class="keyword">while</span>(times &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (times == <span class="number">1</span>) &#123;  <span class="comment">//特殊情况1</span></span><br><span class="line">ans += nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (times == <span class="number">2</span>) &#123;  <span class="comment">//特殊情况2</span></span><br><span class="line">ans += nums[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (times == <span class="number">3</span>) &#123;  <span class="comment">//特殊情况3</span></span><br><span class="line"><span class="comment">//0 2 过河，0回来，0 1 过河</span></span><br><span class="line">ans += nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans += Math.min(<span class="number">2</span> * nums[<span class="number">1</span>] + nums[<span class="number">0</span>] + nums[times - <span class="number">1</span>], nums[times - <span class="number">1</span>] + <span class="number">2</span> * nums[<span class="number">0</span>] + nums[times - <span class="number">2</span>]);</span><br><span class="line">times -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(ans);</span><br><span class="line">all--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源POJ第1700题Crossing River&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A group of N people wishes to go across a river with only one boat, which can at most carry two persons. Therefore some sort of shuttle arrangement must be arranged in order to row the boat back and forth so that all people may cross.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="POJ" scheme="http://yorxika.github.io/tags/POJ/"/>
    
      <category term="贪心" scheme="http://yorxika.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Median</title>
    <link href="http://yorxika.github.io/2019/12/14/Median/"/>
    <id>http://yorxika.github.io/2019/12/14/Median/</id>
    <published>2019-12-14T15:48:11.000Z</published>
    <updated>2019-12-14T15:55:55.520Z</updated>
    
    <content type="html"><![CDATA[<p>来源POJ第3579题Median</p><p><strong>Description</strong></p><p>Given <em>N</em> numbers, <em>X</em>1, <em>X</em>2, … , <em>XN</em>, let us calculate the difference of every pair of numbers: ∣<em>Xi</em> - <em>Xj*∣ (1 ≤ *i</em> ＜ <em>j</em> ≤ <em>N</em>). We can get <em>C(N,2)</em> differences through this work, <a id="more"></a>and now your task is to find the median of the differences as quickly as you can!</p><p>Note in this problem, the median is defined as the <em>(m/2)-th</em> smallest number if <em>m</em>,the amount of the differences, is even. For example, you have to find the third smallest one in the case of <em>m</em> = 6.</p><p><strong>Input</strong></p><p>The input consists of several test cases.<br>In each test case, <em>N</em> will be given in the first line. Then <em>N</em> numbers are given, representing <em>X</em>1, <em>X</em>2, … , <em>XN</em>, ( <em>Xi</em> ≤ 1,000,000,000 3 ≤ N ≤ 1,00,000 )</p><p><strong>Output</strong></p><p>For each test case, output the median in a separate line.</p><p><strong>Sample Input</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">10</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>一共有n*(n-1)/2种不同的配对，一一枚举的时间复杂度为O(n^2)，显然无法在1s内给出答案。在此使用二分法，先将数组排序，然后我们可以确定最大的距离为Xn-X1，那么我们只需要在0~|Xn-X1|，这些数之间寻找中位数即可。</p><p>  一共需要两次二分。第一次二分，是用来寻找（猜测）可能的中位数的大小，当我们选择了一个mid值，我们需要计算有多少组配对的距离是小于这个mid值，如果不到k/2，则需要增加mid值，反之亦然；第二次二分用于对特定的元素计算小于mid的距离点对有多少个。</p><p>  需要注意的是，在发现小于mid的点对刚好是一半的时候，并不能说明mid就是中位数，我们一定要找到满足这一性质最小的mid，才是最终的答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] nums;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> Mid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">n = in.nextInt();</span><br><span class="line">Mid = ((<span class="keyword">long</span>) n * (n - <span class="number">1</span>)) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">Mid = (Mid + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>; <span class="comment">//中位数的位置</span></span><br><span class="line">nums = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">nums[i] = in.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="keyword">int</span> left = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> right = nums[n - <span class="number">1</span>] - nums[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (right - left &gt; <span class="number">1</span>) &#123;<span class="comment">//二分搜索</span></span><br><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (test(mid,n)) &#123;</span><br><span class="line">right = mid;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">left = mid;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> mid, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (nums[i] - nums[j] &gt; mid)</span><br><span class="line">j++;</span><br><span class="line">count += (i - j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count &gt;= Mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源POJ第3579题Median&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given &lt;em&gt;N&lt;/em&gt; numbers, &lt;em&gt;X&lt;/em&gt;1, &lt;em&gt;X&lt;/em&gt;2, … , &lt;em&gt;XN&lt;/em&gt;, let us calculate the difference of every pair of numbers: ∣&lt;em&gt;Xi&lt;/em&gt; - &lt;em&gt;Xj*∣ (1 ≤ *i&lt;/em&gt; ＜ &lt;em&gt;j&lt;/em&gt; ≤ &lt;em&gt;N&lt;/em&gt;). We can get &lt;em&gt;C(N,2)&lt;/em&gt; differences through this work,&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="POJ" scheme="http://yorxika.github.io/tags/POJ/"/>
    
      <category term="中位数" scheme="http://yorxika.github.io/tags/%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    
      <category term="二分" scheme="http://yorxika.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>路径总和</title>
    <link href="http://yorxika.github.io/2019/12/14/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/"/>
    <id>http://yorxika.github.io/2019/12/14/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</id>
    <published>2019-12-14T15:37:24.000Z</published>
    <updated>2019-12-14T15:44:42.173Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第112题路径总和</p><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><a id="more"></a><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例:</strong><br>给定如下二叉树，以及目标和 <code>sum = 22</code>，</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      <span class="number">5</span></span><br><span class="line">     / \</span><br><span class="line">    <span class="number">4</span>   <span class="number">8</span></span><br><span class="line">   /   / \</span><br><span class="line">  <span class="number">11</span>  <span class="number">13</span>  <span class="number">4</span></span><br><span class="line"> /  \      \</span><br><span class="line"><span class="number">7</span>    <span class="number">2</span>      <span class="number">1</span></span><br></pre></td></tr></table></figure><p>返回 <code>true</code>, 因为存在目标和为 22 的根节点到叶子节点的路径 <code>5-&gt;4-&gt;11-&gt;2</code>。</p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>利用两个栈分别保存到当前叶子节点走过的路径和总和，最后比对出栈换向.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; tree = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; val = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    TreeNode tmp = root;</span><br><span class="line">    <span class="keyword">int</span> tmp_sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp != <span class="keyword">null</span> || !tree.empty())&#123;</span><br><span class="line">        <span class="comment">//遍历完左子树</span></span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            tree.push(tmp);</span><br><span class="line">            tmp_sum += tmp.val;</span><br><span class="line">            val.push(tmp_sum);</span><br><span class="line">            tmp = tmp.left;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = tree.pop();</span><br><span class="line">        tmp_sum = val.pop();</span><br><span class="line">        <span class="comment">//依次遍历值</span></span><br><span class="line">        <span class="keyword">if</span>(tmp_sum == sum &amp;&amp; tmp.left == <span class="keyword">null</span> &amp;&amp; tmp.right == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//更改方向到右子树</span></span><br><span class="line">        tmp = tmp.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归来源于<a href="https://leetcode-cn.com/problems/path-sum/solution/lu-jing-zong-he-by-leetcode/" target="_blank" rel="noopener">题解</a></p><p>最直接的方法就是利用递归，遍历整棵树：如果当前节点不是叶子，对它的所有孩子节点，递归调用 <code>hasPathSum</code> 函数，其中 sum 值减去当前节点的权值；如果当前节点是叶子，检查 sum 值是否为 0，也就是是否找到了给定的目标和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  sum -= root.val;</span><br><span class="line">  <span class="keyword">if</span> ((root.left == <span class="keyword">null</span>) &amp;&amp; (root.right == <span class="keyword">null</span>))</span><br><span class="line">    <span class="keyword">return</span> (sum == <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> hasPathSum(root.left, sum) || hasPathSum(root.right, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第112题路径总和&lt;/p&gt;
&lt;p&gt;给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="栈" scheme="http://yorxika.github.io/tags/%E6%A0%88/"/>
    
      <category term="深度优先搜索" scheme="http://yorxika.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>SOLDIERS</title>
    <link href="http://yorxika.github.io/2019/12/14/SOLDIERS/"/>
    <id>http://yorxika.github.io/2019/12/14/SOLDIERS/</id>
    <published>2019-12-14T11:43:49.000Z</published>
    <updated>2019-12-14T11:51:43.287Z</updated>
    
    <content type="html"><![CDATA[<p>来源POJ第1723题SOLDIERS</p><p><strong>Description</strong></p><p>N soldiers of the land Gridland are randomly scattered around the country.<br>A position in Gridland is given by a pair (x,y) of integer coordinates.<a id="more"></a> Soldiers can move - in one move, one soldier can go one unit up, down, left or right (hence, he can change either his x or his y coordinate by 1 or -1).</p><p>The soldiers want to get into a horizontal line next to each other (so that their final positions are (x,y), (x+1,y), …, (x+N-1,y), for some x and y). Integers x and y, as well as the final order of soldiers along the horizontal line is arbitrary.</p><p>The goal is to minimise the total number of moves of all the soldiers that takes them into such configuration.</p><p>Two or more soldiers must never occupy the same position at the same time.</p><p><strong>Input</strong></p><p>The first line of the input contains the integer N, 1 &lt;= N &lt;= 10000, the number of soldiers.<br>The following N lines of the input contain initial positions of the soldiers : for each i, 1 &lt;= i &lt;= N, the (i+1)st line of the input file contains a pair of integers x[i] and y[i] separated by a single blank character, representing the coordinates of the ith soldier, -10000 &lt;= x[i],y[i] &lt;= 10000.</p><p><strong>Output</strong></p><p>The first and the only line of the output should contain the minimum total number of moves that takes the soldiers into a horizontal line next to each other.</p><p><strong>Sample Input</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span>-<span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>其实本题求的是距离，反映到数学上，就是求两点之间的绝对值吗。</p><p>对于一个数列，其各点到此数列的中位数处的距离之和是最短的。</p><p>因此，分别对两个数列进行排序对于纵坐标，直接求出各点到中位数处的距离即可。对于横坐标，首先先将其排序后减去自身的位置，即x[i] - i,这是因为最终要求是在同一横排上，因而当x[i] - i，一样的时候，说明他们本身就是相邻的，最后通过构建出的x[i]-i数组，取中位数d[mid]-d[i]求和即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> len = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> [] dx = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">int</span> [] dy = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">dx[i] = in.nextInt();</span><br><span class="line">dy[i] = in.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(dx);</span><br><span class="line">Arrays.sort(dy);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= len ; i++)</span><br><span class="line">dx[i - <span class="number">1</span>] -= i;</span><br><span class="line">Arrays.sort(dx);</span><br><span class="line"><span class="keyword">int</span> midx = dx[(len) / <span class="number">2</span> ];</span><br><span class="line"><span class="keyword">int</span> midy = dy[(len) / <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">ans += Math.abs(midx - dx[i]) + Math.abs(midy - dy[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源POJ第1723题SOLDIERS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;N soldiers of the land Gridland are randomly scattered around the country.&lt;br&gt;A position in Gridland is given by a pair (x,y) of integer coordinates.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="POJ" scheme="http://yorxika.github.io/tags/POJ/"/>
    
      <category term="中位数" scheme="http://yorxika.github.io/tags/%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Sacrament of the sum</title>
    <link href="http://yorxika.github.io/2019/12/14/Sacrament-of-the-sum/"/>
    <id>http://yorxika.github.io/2019/12/14/Sacrament-of-the-sum/</id>
    <published>2019-12-14T11:23:33.000Z</published>
    <updated>2019-12-14T11:42:29.754Z</updated>
    
    <content type="html"><![CDATA[<p>来源POJ第2366题Sacrament of the sum</p><p><strong>Description</strong></p><p>— The Brother of mine, the Head of Monastic Order wants to know tomorrow about the results long-term researches. He wants to see neither more nor less than the <a id="more"></a>Summering Machine! Even moreover, he wants our Machine — only a machine — to demonstrate its comprehension of the Sacrament of the Sum as deeply as it is possible. He wants our Machine to find two numbers that give the sum equal to the Sacred Number 10 000.<br>— Tsh-sh-sh! This is madness that borders on blasphemy! How can the Machine calculate the Sacred Number? Twenty seven years we work on it, but we’ve could teach it to tell if the sum of two introduced numbers greater or lower than 10 000. Can an ordinary mortal find two numbers that there sum will be equal to 10 000?<br>— But we’ll have to do it with the help of our Machine, even if it is not capable. Otherwise we’ll have… let’s say, big problems, if it is possible to call boiling oil like this. However, I have an idea. Do you remember, last week we’ve entered two numbers -7 and 13 into the Machine, and it answered that their sum is lower than 10 000. I don’t know how to check this, but nothing’s left for us than to believe to the fruit of our work. Let’s enter now a greater number than -7 and start up the Machine again. We’ll do like this again and again until we find a number that being added to 13 will give us 10 000. The only thing we are to do is to prepare an ascending list of numbers.<br>— I don’t believe in this… Let’s start with the sum that is obviously greater than the Sacred Number and we’ll decrease one of the summand. So we have more chances to avoid boilin… big problems.</p><p>Haven’t come to an agreement, the Brothers went away to their cells. By next day everyone of them has prepared a list of numbers that, to his opinion, could save them… Can both of the lists save them together?<br>Your program should decide, if it is possible to choose from two lists of integers such two numbers that their sum would be equal to 10 000.</p><p><strong>Input</strong></p><p>You are given both of these lists one by one. Format of each of these lists is as follows: in the first line of the list the quantity of numbers Ni of the i-th list is written. Further there is an i-th list of numbers each number in its line (Ni lines).The following conditions are satisfied: 1 &lt;= Ni &lt;= 50 000, each element of the lists lays in the range from -32768 to 32767. The first list is ascending and the second one is descending.</p><p><strong>Output</strong></p><p>You should write “YES” to the standard output if it is possible to choose from the two lists of integers such two numbers that their sum would be equal to 10 000. Otherwise you should write “NO”.</p><p><strong>Sample Input</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">-175</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">10424</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">8951</span></span><br><span class="line"><span class="number">-424</span></span><br><span class="line"><span class="number">-788</span></span><br></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">YES</span></span><br></pre></td></tr></table></figure><p><strong>Hint</strong></p><p>This problem has huge input data,use scanf() instead of cin to read data to avoid time limit exceed.</p><h3 id="空间换时间"><a href="#空间换时间" class="headerlink" title="空间换时间"></a>空间换时间</h3><p>由题目可知数据大小再-32768到32768之间，因而可以直接利用大数组来存输入的数据，输入的输入如果大于0，放在第一个数组对应的A[in]位置，否则放在B[-in]，输入第二个数组的值时，先求出1000-in的值，如果大于0且A[10000-in]的值存在，说明找到了，或者B[in - 10000]存在，否则继续输入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> len1 = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> [] A = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">65535</span>];</span><br><span class="line"><span class="keyword">int</span> [] B = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">65535</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">temp = in.nextInt();  <span class="comment">//数组A升序</span></span><br><span class="line"><span class="keyword">if</span>(temp &gt;= <span class="number">0</span>)</span><br><span class="line">A[temp] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">B[-temp] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len2 = in.nextInt();</span><br><span class="line"><span class="keyword">if</span>(len1 &lt;= <span class="number">0</span> || len2 &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len2;i++) &#123;</span><br><span class="line">temp = in.nextInt();  <span class="comment">//数组B降序</span></span><br><span class="line">temp = <span class="number">10000</span> - temp;</span><br><span class="line"><span class="keyword">if</span>(temp &gt;= <span class="number">0</span> &amp;&amp; A[temp] == <span class="number">1</span>)&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp &lt; <span class="number">0</span> &amp;&amp; B[-temp] == <span class="number">1</span>)&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">System.out.println(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希Map"><a href="#哈希Map" class="headerlink" title="哈希Map"></a>哈希Map</h3><p>利用一个Map存放输入的值，和对应的数组标志，在数组B边输入时边查询即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> len1 = in.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] A = <span class="keyword">new</span> <span class="keyword">int</span>[len1];</span><br><span class="line">Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">A[i] = in.nextInt();  <span class="comment">//数组A升序</span></span><br><span class="line">map.put(A[i],<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len2 = in.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">65535</span>];</span><br><span class="line"><span class="comment">//Arrays.setAll(B,a -&gt; -2147483647);</span></span><br><span class="line"><span class="keyword">if</span> (len1 &lt;= <span class="number">0</span> || len2 &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2 ; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> complement;</span><br><span class="line">B[i] = in.nextInt();</span><br><span class="line"><span class="comment">//key = 1;</span></span><br><span class="line">complement = <span class="number">10000</span> - B[i];</span><br><span class="line"><span class="keyword">if</span>(map.containsKey(complement) &amp;&amp; (map.get(complement) == <span class="number">0</span>))&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">map.put(B[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">System.out.println(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>思路同上，对输入数组B的每一个数在数组A里进行二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> len1 = in.nextInt();</span><br><span class="line"><span class="keyword">int</span> [] A = <span class="keyword">new</span> <span class="keyword">int</span>[len1];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">A[i] = in.nextInt();  <span class="comment">//数组A升序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len2 = in.nextInt();</span><br><span class="line"><span class="keyword">if</span>(len1 &lt;= <span class="number">0</span> || len2 &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp,left,right,mid,complement;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; len2 ; j++) &#123;</span><br><span class="line">temp = in.nextInt();</span><br><span class="line">complement = <span class="number">10000</span> - temp;</span><br><span class="line"><span class="comment">//对数组a中的每个元素进行二分搜索</span></span><br><span class="line">left = <span class="number">0</span>;</span><br><span class="line">right = len1 - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (complement == A[mid]) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (complement &lt; A[mid]) &#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">System.out.println(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源POJ第2366题Sacrament of the sum&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;— The Brother of mine, the Head of Monastic Order wants to know tomorrow about the results long-term researches. He wants to see neither more nor less than the&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="POJ" scheme="http://yorxika.github.io/tags/POJ/"/>
    
      <category term="哈希" scheme="http://yorxika.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
      <category term="二分" scheme="http://yorxika.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Matrix Power Series</title>
    <link href="http://yorxika.github.io/2019/12/14/Matrix-Power-Series/"/>
    <id>http://yorxika.github.io/2019/12/14/Matrix-Power-Series/</id>
    <published>2019-12-14T11:18:48.000Z</published>
    <updated>2019-12-14T11:29:44.832Z</updated>
    
    <content type="html"><![CDATA[<p>来源POJ第3233题Matrix Power Series</p><p><strong>Description</strong></p><p>Given a <em>n</em> × <em>n</em> matrix <em>A</em> and a positive integer <em>k</em>, find the sum <em>S</em> = <em>A</em> + <em>A</em>2 + <em>A</em>3 + … + <em>Ak</em>.</p><a id="more"></a><p><strong>Input</strong></p><p>The input contains exactly one test case. The first line of input contains three positive integers <em>n</em> (<em>n</em> ≤ 30), <em>k</em> (<em>k</em> ≤ 109) and <em>m</em> (<em>m</em> &lt; 104). Then follow <em>n</em> lines each containing <em>n</em> nonnegative integers below 32,768, giving <em>A</em>’s elements in row-major order.</p><p><strong>Output</strong></p><p>Output the elements of <em>S</em> modulo <em>m</em> in the same way as <em>A</em> is given.</p><p><strong>Sample Input</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br></pre></td></tr></table></figure><p>题目要求的是 A+A2+…+Ak，而不是单个矩阵的幂</p><p>　　那么我们可以构造一个分块的辅助矩阵 S，其中 A 为原矩阵，E 为单位矩阵，O 为0矩阵</p><p>　　<img src="/2019/12/14/Matrix-Power-Series/999549-20160924161629731-1694213740.png" alt="img"></p><p>　　我们将 S 取幂，会发现一个特性</p><p>　　<img src="/2019/12/14/Matrix-Power-Series/999549-20160924162453731-374268381.png" alt="img"></p><p>　　Sk 右上角那一块不正是我们要求的 A+A2+…+Ak 吗？</p><p>　　于是我们构造出 S 矩阵，然后对它求矩阵快速幂即可，最后别忘了减去一个单位阵</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">n = in.nextInt();  <span class="comment">//n阶矩阵</span></span><br><span class="line"><span class="keyword">int</span> k = in.nextInt();  <span class="comment">//k次幂</span></span><br><span class="line"><span class="keyword">int</span> m = in.nextInt();  <span class="comment">//mod m</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> [][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*n][<span class="number">2</span>*n];</span><br><span class="line"><span class="keyword">int</span> [][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">matrix[i][j] = in.nextInt();</span><br><span class="line"><span class="comment">//ans[i][j] = matrix[i][j] % m;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造右边的单位矩阵</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = n ; j &lt; <span class="number">2</span>*n; j++)</span><br><span class="line"><span class="keyword">if</span>(j - i == n)</span><br><span class="line">matrix[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//构造右下方单位矩阵</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &lt; <span class="number">2</span>*n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = n ; j &lt; <span class="number">2</span>*n ; j++)</span><br><span class="line"><span class="keyword">if</span>(i == j)</span><br><span class="line">matrix[i][j] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">matrix = pow(matrix,k + <span class="number">1</span>,m);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减去一个单位矩阵</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt; <span class="number">2</span>*n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j - i == n)</span><br><span class="line">matrix[i][j] = (matrix[i][j] - <span class="number">1</span> + m) % m;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">2</span>*n - <span class="number">1</span>)</span><br><span class="line">System.out.println(matrix[i][j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.print(matrix[i][j] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵乘法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] matrixMul(<span class="keyword">int</span> [][] a, <span class="keyword">int</span> [][]b,<span class="keyword">int</span> mod)&#123;</span><br><span class="line"><span class="keyword">int</span> [][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[a.length][a.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; n ; k++)&#123;</span><br><span class="line">ans[i][j] += a[i][k] * b[k][j];</span><br><span class="line">ans[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵加法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> [][]a,<span class="keyword">int</span> [][]b,<span class="keyword">int</span> mod)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; a.length ; j++)&#123;</span><br><span class="line">a[i][j] += b[i][j];</span><br><span class="line">a[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵快速幂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] pow(<span class="keyword">int</span> [][] a,<span class="keyword">int</span> n,<span class="keyword">int</span> mod)&#123;</span><br><span class="line"><span class="keyword">int</span> [][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[a.length][a.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length / <span class="number">2</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; a.length / <span class="number">2</span>; j++)</span><br><span class="line"><span class="keyword">if</span>(i == j)</span><br><span class="line">ans[i][j] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((n &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">ans = matrixMul(ans,a,mod);</span><br><span class="line">a = matrixMul(a,a,mod);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源POJ第3233题Matrix Power Series&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a &lt;em&gt;n&lt;/em&gt; × &lt;em&gt;n&lt;/em&gt; matrix &lt;em&gt;A&lt;/em&gt; and a positive integer &lt;em&gt;k&lt;/em&gt;, find the sum &lt;em&gt;S&lt;/em&gt; = &lt;em&gt;A&lt;/em&gt; + &lt;em&gt;A&lt;/em&gt;2 + &lt;em&gt;A&lt;/em&gt;3 + … + &lt;em&gt;Ak&lt;/em&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="POJ" scheme="http://yorxika.github.io/tags/POJ/"/>
    
      <category term="快速幂" scheme="http://yorxika.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>Babelfish</title>
    <link href="http://yorxika.github.io/2019/12/14/Babelfish/"/>
    <id>http://yorxika.github.io/2019/12/14/Babelfish/</id>
    <published>2019-12-13T16:44:06.000Z</published>
    <updated>2019-12-13T16:48:51.120Z</updated>
    
    <content type="html"><![CDATA[<p>来源POJ第2503题</p><p><strong>Description</strong></p><p>You have just moved from Waterloo to a big city. The people here speak an incomprehensible dialect of a foreign language. Fortunately, <a id="more"></a>you have a dictionary to help you understand them.</p><p><strong>Input</strong></p><p>Input consists of up to 100,000 dictionary entries, followed by a blank line, followed by a message of up to 100,000 words. Each dictionary entry is a line containing an English word, followed by a space and a foreign language word. No foreign word appears more than once in the dictionary. The message is a sequence of words in the foreign language, one word on each line. Each word in the input is a sequence of at most 10 lowercase letters.</p><p><strong>Output</strong></p><p>Output is the message translated to English, one word per line. Foreign words not in the dictionary should be translated as “eh”.</p><p><strong>Sample Input</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dog</span> <span class="string">ogday</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">atcay</span></span><br><span class="line"><span class="attr">pig</span> <span class="string">igpay</span></span><br><span class="line"><span class="attr">froot</span> <span class="string">ootfray</span></span><br><span class="line"><span class="attr">loops</span> <span class="string">oopslay</span></span><br><span class="line"></span><br><span class="line"><span class="attr">atcay</span></span><br><span class="line"><span class="attr">ittenkay</span></span><br><span class="line"><span class="attr">oopslay</span></span><br></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cat</span></span><br><span class="line"><span class="attribute">eh</span></span><br><span class="line"><span class="attribute">loops</span></span><br></pre></td></tr></table></figure><p><strong>Hint</strong></p><p>Huge input and output,scanf and printf are recommended.</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>提示方案上说可用二分查找啥的，但是懒人直接当HashMap水题，直接过了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String input;</span><br><span class="line">String key,value;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">while</span> (!(input = in.nextLine()).equals(<span class="string">""</span>))&#123;</span><br><span class="line">index = input.indexOf(<span class="string">' '</span>);</span><br><span class="line">key = input.substring(<span class="number">0</span>,index);</span><br><span class="line">value = input.substring(index + <span class="number">1</span>,input.length());</span><br><span class="line">map.put(value,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!(input = in.nextLine()).equals(<span class="string">""</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(map.containsKey(input))&#123;</span><br><span class="line">System.out.println(map.get(input));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eh"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源POJ第2503题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You have just moved from Waterloo to a big city. The people here speak an incomprehensible dialect of a foreign language. Fortunately,&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/"/>
    
      <category term="字符串" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="POJ" scheme="http://yorxika.github.io/tags/POJ/"/>
    
      <category term="字符串" scheme="http://yorxika.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Flip Game</title>
    <link href="http://yorxika.github.io/2019/12/14/Flip-Game/"/>
    <id>http://yorxika.github.io/2019/12/14/Flip-Game/</id>
    <published>2019-12-13T16:20:25.000Z</published>
    <updated>2019-12-13T16:44:56.766Z</updated>
    
    <content type="html"><![CDATA[<p>来源POJ第1753题Flip Game</p><p><strong>Description</strong></p><p>Flip game is played on a rectangular 4x4 field with two-sided pieces placed on each of its 16 squares. One side of each piece is white and the other one is black and each piece is lying either it’s black or white side up. <a id="more"></a>Each round you flip 3 to 5 pieces, thus changing the color of their upper side from black to white and vice versa. The pieces to be flipped are chosen every round according to the following rules:</p><ol><li>Choose any one of the 16 pieces.</li><li>Flip the chosen piece and also all adjacent pieces to the left, to the right, to the top, and to the bottom of the chosen piece (if there are any).</li></ol><p><img src="/2019/12/14/Flip-Game/1753_1.jpg" alt="img">Consider the following position as an example:</p><p>bwbw<br>wwww<br>bbwb<br>bwwb<br>Here “b” denotes pieces lying their black side up and “w” denotes pieces lying their white side up. If we choose to flip the 1st piece from the 3rd row (this choice is shown at the picture), then the field will become:</p><p>bwbw<br>bwww<br>wwwb<br>wwwb<br>The goal of the game is to flip either all pieces white side up or all pieces black side up. You are to write a program that will search for the minimum number of rounds needed to achieve this goal.</p><p><strong>Input</strong></p><p>The input consists of 4 lines with 4 characters “w” or “b” each that denote game field position.</p><p><strong>Output</strong></p><p>Write to the output file a single integer number - the minimum number of rounds needed to achieve the goal of the game from the given position. If the goal is initially achieved, then write 0. If it’s impossible to achieve the goal, then write the word “Impossible” (without quotes).</p><p><strong>Sample Input</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bwwb</span></span><br><span class="line"><span class="keyword">bbwb</span></span><br><span class="line"><span class="keyword">bwwb</span></span><br><span class="line"><span class="keyword">bwww</span></span><br></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p>递归遍历所有情况，即从当前点出发，翻还是不翻，然后进入下一层递归，直到满足条件为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> ans = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> [][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> first = matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">4</span> ;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[i][j] != first)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">matrix[x][y] = matrix[x][y] ^ <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">matrix[x - <span class="number">1</span>][y] ^= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">matrix[x][y - <span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x + <span class="number">1</span> &lt; <span class="number">4</span>)</span><br><span class="line">matrix[x + <span class="number">1</span>][y] ^= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y + <span class="number">1</span> &lt; <span class="number">4</span>)</span><br><span class="line">matrix[x][y + <span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> times)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(judge())&#123;</span><br><span class="line"><span class="keyword">if</span>(ans &gt; times)</span><br><span class="line">&#123;</span><br><span class="line">ans = times;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">4</span> || y &gt;= <span class="number">4</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> aX,aY;</span><br><span class="line">aX = (x + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">aY = y + (x + <span class="number">1</span>) / <span class="number">4</span>;</span><br><span class="line">dfs(aX,aY,times);</span><br><span class="line">change(x, y);</span><br><span class="line">dfs(aX,aY,times + <span class="number">1</span>);</span><br><span class="line">change(x, y);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">temp = in.nextLine();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp.charAt(j) == <span class="string">'b'</span>) &#123;</span><br><span class="line">matrix[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义黑为1，白为0</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(ans == Integer.MAX_VALUE)</span><br><span class="line">System.out.println(<span class="string">"Impossible"</span>);</span><br><span class="line"><span class="keyword">else</span> System.out.println(ans);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="BFS-位压缩"><a href="#BFS-位压缩" class="headerlink" title="BFS+位压缩"></a>BFS+位压缩</h3><p>来源于<a href="https://blog.csdn.net/hackbuteer1/article/details/7392245" target="_blank" rel="noopener">blog</a></p><p>主要思想：</p><p>1、如果用一个4*4的数组存储每一种状态，不但存储空间很大，而且在穷举状态时也不方便记录。因为每一颗棋子都只有两种状态，所以可以用二进制0和1表示每一个棋子的状态，则棋盘的状态就可以用一个16位的整数唯一标识。而翻转的操作也可以通过通过位操作来完成。显然当棋盘状态id为0（全白）或65535（全黑）时，游戏结束。</p><p>2、对于棋盘的每一个状态，都有十六种操作，首先要判断这十六种操作之后是否有完成的情况，如果没有，则再对这十六种操作的结果分别再进行上述操作，显然这里就要用到队列来存储了。而且在翻转的过程中有可能会回到之前的某种状态，而这种重复的状态是不应该再次入队的，所以维护 Visit[i]数组来判断 id==i 的状态之前是否已经出现过，如果不是才将其入队。如果游戏无法完成，状态必定会形成循环，由于重复状态不会再次入队，所以最后的队列一定会是空队列。</p><p>3、由于0^1=1，1^1=0，所以翻转的操作可以通过异或操作来完成，而翻转的位置可以通过移位来确定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> state;</span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">65536</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> change[<span class="number">16</span>] =   <span class="comment">//16种状态转换，对应4*4的翻子位置</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="number">51200</span>,<span class="number">58368</span>,<span class="number">29184</span>,<span class="number">12544</span>,</span><br><span class="line">     <span class="number">35968</span>,<span class="number">20032</span>,<span class="number">10016</span>,<span class="number">4880</span>,</span><br><span class="line"> <span class="number">2248</span>,<span class="number">1252</span>,<span class="number">626</span>,<span class="number">305</span>,</span><br><span class="line"> <span class="number">140</span>,<span class="number">78</span>,<span class="number">39</span>,<span class="number">19</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visit));    <span class="comment">//标记每一个状态都未访问过</span></span><br><span class="line"><span class="built_in">queue</span>&lt;Node&gt;q;</span><br><span class="line">Node cur,next;</span><br><span class="line">cur.state = state;</span><br><span class="line">cur.step = <span class="number">0</span>;</span><br><span class="line">q.push(cur);</span><br><span class="line">visit[state] = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">cur = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(cur.state == <span class="number">0</span> || cur.state == <span class="number">0xffff</span>)   <span class="comment">//65535</span></span><br><span class="line"><span class="keyword">return</span> cur.step;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">next.state = cur.state^change[i];</span><br><span class="line">next.step = cur.step + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(visit[next.state])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(next.state == <span class="number">0</span> || next.state == <span class="number">0xffff</span>)   <span class="comment">//65535</span></span><br><span class="line"><span class="keyword">return</span> next.step;</span><br><span class="line">visit[next.state] = <span class="literal">true</span>;</span><br><span class="line">q.push(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,state,ans;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch[<span class="number">0</span>])!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt; <span class="number">4</span> ; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch[i]);</span><br><span class="line">state = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化棋盘状态</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span> ; j &lt; <span class="number">4</span> ; ++j)</span><br><span class="line">&#123;</span><br><span class="line">state &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[i][j] == <span class="string">'b'</span>)</span><br><span class="line">state += <span class="number">1</span>;</span><br><span class="line"><span class="comment">//state ^= (1&lt;&lt;((3-i)*4+(3-j)));</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = bfs(state);</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DFS-1"><a href="#DFS-1" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码二：DFS+Bit</span></span><br><span class="line"><span class="comment">本题由于要输出每次翻转的棋子，因此不适宜用BFS，应该使用DFS输出完整路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> chess;        <span class="comment">//棋盘状态</span></span><br><span class="line"> <span class="keyword">int</span> step;</span><br><span class="line"> <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">int</span> ri[<span class="number">16</span>],cj[<span class="number">16</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">isopen</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(chess == <span class="number">0xFFFF</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> bit)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     chess=chess^(<span class="number">0x1</span>&lt;&lt;bit);  <span class="comment">//对翻转位取反</span></span><br><span class="line">     <span class="keyword">int</span> row=bit/<span class="number">4</span>;</span><br><span class="line">     <span class="keyword">int</span> col=bit%<span class="number">4</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;<span class="number">4</span>;c++)</span><br><span class="line">         chess=chess^(<span class="number">0x1</span>&lt;&lt;(row*<span class="number">4</span>+c));  <span class="comment">//对全行取反</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;<span class="number">4</span>;r++)</span><br><span class="line">         chess=chess^(<span class="number">0x1</span>&lt;&lt;(r*<span class="number">4</span>+col));  <span class="comment">//对全列取反</span></span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> bit,<span class="keyword">int</span> deep)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(deep==step)</span><br><span class="line">     &#123;</span><br><span class="line">         flag=isopen();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span>(flag || bit&gt;<span class="number">15</span>)</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">int</span> row=ri[deep]=bit/<span class="number">4</span>;</span><br><span class="line">     <span class="keyword">int</span> col=cj[deep]=bit%<span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line">     flip(bit);</span><br><span class="line">     <span class="keyword">if</span>(col&lt;<span class="number">4</span>)</span><br><span class="line">         dfs(bit+<span class="number">1</span>,deep+<span class="number">1</span>);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         dfs((bit+<span class="number">4</span>)/<span class="number">4</span>*<span class="number">4</span>,deep+<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">     flip(bit);</span><br><span class="line">     <span class="keyword">if</span>(col&lt;<span class="number">4</span>)</span><br><span class="line">         dfs(bit+<span class="number">1</span>,deep);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         dfs((bit+<span class="number">4</span>)/<span class="number">4</span>*<span class="number">4</span>,deep);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">char</span> temp;</span><br><span class="line">     <span class="keyword">int</span> i,j;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line">         <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">             <span class="keyword">if</span>(temp==<span class="string">'-'</span>)</span><br><span class="line">                 chess=chess^(<span class="number">1</span>&lt;&lt;(i*<span class="number">4</span>+j));</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/*DFS*/</span></span><br><span class="line">     <span class="keyword">for</span>(step=<span class="number">0</span>;step&lt;=<span class="number">16</span>;step++)</span><br><span class="line">     &#123;</span><br><span class="line">         dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">         <span class="keyword">if</span>(flag)</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,step);</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;step;i++)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ri[i]+<span class="number">1</span>,cj[i]+<span class="number">1</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源POJ第1753题Flip Game&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flip game is played on a rectangular 4x4 field with two-sided pieces placed on each of its 16 squares. One side of each piece is white and the other one is black and each piece is lying either it’s black or white side up.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="POJ" scheme="http://yorxika.github.io/tags/POJ/"/>
    
      <category term="DFS" scheme="http://yorxika.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>I Think I Need a Houseboat</title>
    <link href="http://yorxika.github.io/2019/12/14/I-Think-I-Need-a-Houseboat/"/>
    <id>http://yorxika.github.io/2019/12/14/I-Think-I-Need-a-Houseboat/</id>
    <published>2019-12-13T16:12:33.000Z</published>
    <updated>2019-12-13T16:19:03.860Z</updated>
    
    <content type="html"><![CDATA[<p>来源POJ第1005题</p><p><strong>Description</strong></p><p>Fred Mapper is considering purchasing some land in Louisiana to build his house on. In the process of investigating the land, he learned that the state of Louisiana is actually shrinking by 50 square miles each year,<a id="more"></a> due to erosion caused by the Mississippi River. Since Fred is hoping to live in this house the rest of his life, he needs to know if his land is going to be lost to erosion.</p><p>After doing more research, Fred has learned that the land that is being lost forms a semicircle. This semicircle is part of a circle centered at (0,0), with the line that bisects the circle being the X axis. Locations below the X axis are in the water. The semicircle has an area of 0 at the beginning of year 1. (Semicircle illustrated in the Figure.)</p><p><img src="/2019/12/14/I-Think-I-Need-a-Houseboat/semicircle.GIF" alt="img"></p><p><strong>Input</strong></p><p>The first line of input will be a positive integer indicating how many data sets will be included (N). Each of the next N lines will contain the X and Y Cartesian coordinates of the land Fred is considering. These will be floating point numbers measured in miles. The Y coordinate will be non-negative. (0,0) will not be given.</p><p><strong>Output</strong></p><p>For each data set, a single line of output should appear. This line should take the form of: “Property N: This property will begin eroding in year Z.” Where N is the data set (counting from 1), and Z is the first year (start from 1) this property will be within the semicircle AT THE END OF YEAR Z. Z must be an integer. After the last data set, this should print out “END OF OUTPUT.”</p><p><strong>Sample Input</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1.0</span> <span class="number">1.0</span></span><br><span class="line"><span class="number">25.0</span> <span class="number">0.0</span></span><br></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Property</span><span class="title"> 1:</span> This <span class="keyword">property</span><span class="title"> </span>will begin eroding <span class="keyword">in</span> year <span class="number">1</span>.</span><br><span class="line"><span class="keyword">Property</span><span class="title"> 2:</span> This <span class="keyword">property</span><span class="title"> </span>will begin eroding <span class="keyword">in</span> year <span class="number">20</span>.</span><br><span class="line">END OF OUTPUT.</span><br></pre></td></tr></table></figure><p><strong>Hint</strong></p><p>1.No property will appear exactly on the semicircle boundary: it will either be inside or outside.<br>2.This problem will be judged automatically. Your answer must match exactly, including the capitalization, punctuation, and white-space. This includes the periods at the ends of the lines.<br>3.All locations are given in miles.</p><hr><p>水题一题，求目标点与原点构成的圆的面积与100之比即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> len = in.nextInt();</span><br><span class="line"><span class="keyword">float</span> years;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len ;i ++)&#123;</span><br><span class="line"><span class="keyword">float</span> a = in.nextFloat();</span><br><span class="line"><span class="keyword">float</span> b = in.nextFloat();</span><br><span class="line">years = (<span class="keyword">float</span>)(Math.PI)*(a*a + b*b)/<span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">"Property "</span> + (i+<span class="number">1</span>) + <span class="string">": This property will begin eroding in year "</span> + (<span class="keyword">int</span>)(years + <span class="number">1</span>) + <span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"END OF OUTPUT."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源POJ第1005题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fred Mapper is considering purchasing some land in Louisiana to build his house on. In the process of investigating the land, he learned that the state of Louisiana is actually shrinking by 50 square miles each year,&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/POJ/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="POJ" scheme="http://yorxika.github.io/tags/POJ/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的最小深度</title>
    <link href="http://yorxika.github.io/2019/12/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/"/>
    <id>http://yorxika.github.io/2019/12/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</id>
    <published>2019-12-13T15:31:48.000Z</published>
    <updated>2019-12-13T16:11:25.335Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第111题二叉树的最小深度</p><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><a id="more"></a><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例:</strong></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><p>返回它的最小深度  2.</p><hr><h3 id="翻车现场"><a href="#翻车现场" class="headerlink" title="翻车现场"></a>翻车现场</h3><p>最开始以为是和最大深度那题差不多的，结果忽略了一种情况，即[1,2]这种根结点只有一个叶子结点的情况，这时最小深度应该是2，因为按题目定义根结点不能作为自己的叶结点，以下是初始代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> left_height = minDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right_height = minDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.min(left_height,right_height) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>根据上面的分析，知道要在递归里做判断，判断是否是叶子结点,然后再进行递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> minDepth = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)</span><br><span class="line">        minDepth = Math.min(minDepth,minDepth(root.left));</span><br><span class="line">    <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)</span><br><span class="line">        minDepth = Math.min(minDepth,minDepth(root.right));</span><br><span class="line">    <span class="keyword">return</span> minDepth + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BFS迭代"><a href="#BFS迭代" class="headerlink" title="BFS迭代"></a>BFS迭代</h3><p>利用一个队列进行层次遍历，用一个 <code>level</code> 变量保存当前的深度,只要在 <code>for</code> 循环中判断当前是不是叶子节点，如果是的话，返回当前的 level 就可以了。此外要把<code>level</code>初始化改为<code>1</code>，因为如果只有一个根节点，它就是叶子节点，而在代码中，level 是在 <code>for</code>循环以后才<code>++</code>的，如果被提前结束的话，此时应该返回<code>1</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> levelNum = queue.size();  <span class="comment">//当前层元素个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; levelNum ; i++)&#123;</span><br><span class="line">            TreeNode tmp = queue.poll();  <span class="comment">//队列首元素出队</span></span><br><span class="line">            <span class="keyword">if</span>(tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp.left == <span class="keyword">null</span> &amp;&amp; tmp.right == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> level;</span><br><span class="line">                <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>)</span><br><span class="line">                    queue.offer(tmp.left);  <span class="comment">//节点入队尾</span></span><br><span class="line">                <span class="keyword">if</span>(tmp.right != <span class="keyword">null</span>)</span><br><span class="line">                    queue.offer(tmp.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        level ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第111题二叉树的最小深度&lt;/p&gt;
&lt;p&gt;给定一个二叉树，找出其最小深度。&lt;/p&gt;
&lt;p&gt;最小深度是从根节点到最近叶子节点的最短路径上的节点数量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="递归" scheme="http://yorxika.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>配置gitalk的坑</title>
    <link href="http://yorxika.github.io/2019/12/12/%E9%85%8D%E7%BD%AEgitalk%E7%9A%84%E5%9D%91/"/>
    <id>http://yorxika.github.io/2019/12/12/%E9%85%8D%E7%BD%AEgitalk%E7%9A%84%E5%9D%91/</id>
    <published>2019-12-12T14:36:25.000Z</published>
    <updated>2019-12-13T16:10:32.067Z</updated>
    
    <content type="html"><![CDATA[<p>今天在把主题从yilia迁移到next的时候，配置gitalk出现了坑，先是gitalk notfound，然后又是说issue过长，把解决办法mark一下。</p><p>先是配置gitalk的gitalk.swig</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script src=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;div id=<span class="string">"gitalk-container"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="string">      clientID: '&#123;&#123; theme.gitalk.clientID &#125;&#125;',</span></span><br><span class="line"><span class="string">      clientSecret: '&#123;&#123; theme.gitalk.clientSecret &#125;&#125;',</span></span><br><span class="line"><span class="string">      repo: '&#123;&#123; theme.gitalk.repo &#125;&#125;',</span></span><br><span class="line"><span class="string">      owner: '&#123;&#123; theme.gitalk.owner &#125;&#125;',</span></span><br><span class="line"><span class="string">      admin: ['&#123;&#123; theme.gitalk.admin &#125;&#125;'],</span></span><br><span class="line"><span class="string">      id: md5(window.location.pathname),</span></span><br><span class="line"><span class="string">      distractionFreeMode: '&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;'</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    gitalk.render('gitalk-container')</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>在网上找的配置或多或少有问题，折腾之后发现创建issue时会提示名称过长的问题，百度了解决办法是md5加密，但是会与之前创建的issue冲突，折腾了半天才想起来，直接照搬之前yilia里的gitalk即可，发现他的id直接就是md5加密好的，利用md5，不用担心名称过长的问题，并且利用之前的gitalk.swig，可以解决其他的问题，特此mark。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在把主题从yilia迁移到next的时候，配置gitalk出现了坑，先是gitalk notfound，然后又是说issue过长，把解决办法mark一下。&lt;/p&gt;
&lt;p&gt;先是配置gitalk的gitalk.swig&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yorxika.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://yorxika.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>重排链表</title>
    <link href="http://yorxika.github.io/2019/12/12/%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/"/>
    <id>http://yorxika.github.io/2019/12/12/%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</id>
    <published>2019-12-12T12:25:05.000Z</published>
    <updated>2019-12-12T13:39:53.660Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第143题重排链表</p><p>给定一个单链表 <em>L</em>：<em>L</em>0→<em>L</em>1→…→<em>L</em>n-1→<em>L</em>n ，<br>将其重新排列后变为： <em>L</em>0→<em>L</em>n→<em>L</em>1→<em>L</em>n-1→<em>L</em>2→<em>L</em>n-2→…</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定链表 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>, 重新排列为 <span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3.</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定链表 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>, 重新排列为 <span class="number">1</span>-&gt;<span class="number">5</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3.</span></span><br></pre></td></tr></table></figure><h3 id="空间换时间"><a href="#空间换时间" class="headerlink" title="空间换时间"></a>空间换时间</h3><p>创建线性表，依次存储各个链表结点，然后用双指针依次取头尾元素，避免了每次从头遍历.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    List&lt;ListNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//保存结点</span></span><br><span class="line">    <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">        list.add(head);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//头尾指针取元素</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span> , j = list.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">        list.get(i).next = list.get(j);</span><br><span class="line">        i++;</span><br><span class="line">        <span class="comment">//偶数结点相遇</span></span><br><span class="line">        <span class="keyword">if</span>(i == j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        list.get(j).next = list.get(i);</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    list.get(i).next = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>参考 <a href="https://leetcode.com/problems/reorder-list/discuss/45113/Share-a-consise-recursive-solution-in-C%2B%2B" target="_blank" rel="noopener">这里</a>。</p><p>解法一中也说到了，我们的问题就是取尾元素的时候，需要遍历一遍链表。</p><p>如果我们的递归函数能够返回当前头元素对应的尾元素，并且将头元素和尾元素之间的链表按要求完成，那就变得简单了。</p><p><img src="https://pic.leetcode-cn.com/cc05523815b2eb5baf80741809193cc5b17f29b6a6efe2c235007a036aff5625.jpg" alt="img"></p><p>如上图，我们只需要将 <code>head</code> 指向 <code>tail</code>，<code>tail</code> 指向处理完的链表头即可。</p><p><img src="https://pic.leetcode-cn.com/0a9173afb9b7f62587f5132689ad5bceb98cd24f8f7a3d5f938ca2886d308892.jpg" alt="img"></p><p>然后我们把之前的 <code>tail.next</code> 返回就是外层 <code>head</code> 对应的 <code>tail</code> 了。</p><p>递归出口的话，如果只有一个节点，那么我们只需要将 <code>head.next</code> 返回。</p><p>递归出口的话，如果只有一个节点，那么我们只需要将 <code>head.next</code> 返回。</p><p>如果是两个节点，我们需要将 <code>head.next.next</code> 返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    ListNode ahead = head;</span><br><span class="line">    <span class="keyword">while</span> (ahead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        ahead = ahead.next;</span><br><span class="line">    &#125;</span><br><span class="line">    reorderListHelper(head, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">reorderListHelper</span><span class="params">(ListNode head, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">        ListNode outTail = head.next;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> outTail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">2</span>) &#123;</span><br><span class="line">        ListNode outTail = head.next.next;</span><br><span class="line">        head.next.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> outTail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到对应的尾节点，并且将头结点和尾节点之间的链表通过递归处理</span></span><br><span class="line">    ListNode tail = reorderListHelper(head.next, len - <span class="number">2</span>);</span><br><span class="line">    ListNode subHead = head.next;<span class="comment">//中间链表的头结点</span></span><br><span class="line">    head.next = tail;</span><br><span class="line">    ListNode outTail = tail.next;  <span class="comment">//上一层 head 对应的 tail</span></span><br><span class="line">    tail.next = subHead;</span><br><span class="line">    <span class="keyword">return</span> outTail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h3><p>参考 <a href="https://leetcode.com/problems/reorder-list/discuss/44992/Java-solution-with-3-steps" target="_blank" rel="noopener">这里</a>，主要是利用到一头一尾取元素的特性。</p><p>主要是三步，举个例子。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; <span class="number">5</span> -&gt; <span class="number">6</span></span><br><span class="line">第一步，将链表平均分成两半</span><br><span class="line"><span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">4</span> -&gt; <span class="number">5</span> -&gt; <span class="number">6</span></span><br><span class="line">    </span><br><span class="line">第二步，将第二个链表逆序</span><br><span class="line"><span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">6</span> -&gt; <span class="number">5</span> -&gt; <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">第三步，依次连接两个链表</span><br><span class="line"><span class="number">1</span> -&gt; <span class="number">6</span> -&gt; <span class="number">2</span> -&gt; <span class="number">5</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><p>第一步找中点的话，可以应用 19 题的方法，快慢指针。快指针一次走两步，慢指针一次走一步，当快指针走到终点的话，慢指针会刚好到中点。如果节点个数是偶数的话，<code>slow</code> 走到的是左端点，利用这一点，我们可以把奇数和偶数的情况合并，不需要分开考虑。</p><p>第二步链表逆序的话，在 第 2 题]讨论过了，有迭代和递归的两种方式，迭代的话主要利用两个指针，依次逆转。</p><p>第三步的话就很简单了，两个指针分别向后移动就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快慢指针找中点，链表一分为二</span></span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode newHead = slow.next;</span><br><span class="line">    slow.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二个链表倒置</span></span><br><span class="line">    newHead = reverseList(newHead);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表节点依次连接</span></span><br><span class="line">    <span class="keyword">while</span> (newHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode temp = newHead.next;</span><br><span class="line">        newHead.next = head.next;</span><br><span class="line">        head.next = newHead;</span><br><span class="line">        head = newHead.next;</span><br><span class="line">        newHead = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode tail = head;</span><br><span class="line">    head = head.next;</span><br><span class="line"></span><br><span class="line">    tail.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode temp = head.next;</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail = head;</span><br><span class="line">        head = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第143题重排链表&lt;/p&gt;
&lt;p&gt;给定一个单链表 &lt;em&gt;L&lt;/em&gt;：&lt;em&gt;L&lt;/em&gt;0→&lt;em&gt;L&lt;/em&gt;1→…→&lt;em&gt;L&lt;/em&gt;n-1→&lt;em&gt;L&lt;/em&gt;n ，&lt;br&gt;将其重新排列后变为： &lt;em&gt;L&lt;/em&gt;0→&lt;em&gt;L&lt;/em&gt;n→&lt;em&gt;L&lt;/em&gt;1→&lt;em&gt;L&lt;/em&gt;n-1→&lt;em&gt;L&lt;/em&gt;2→&lt;em&gt;L&lt;/em&gt;n-2→…&lt;/p&gt;
&lt;p&gt;你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>对链表进行插入排序</title>
    <link href="http://yorxika.github.io/2019/12/12/%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yorxika.github.io/2019/12/12/%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2019-12-12T11:52:04.000Z</published>
    <updated>2019-12-12T12:21:41.397Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第147题对链表进行插入排序</p><p>对链表进行插入排序。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif" alt="img"><br>插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。<a id="more"></a><br>每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。</p><p><strong>插入排序算法：</strong></p><ol><li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li><li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li><li>重复直到所有输入数据插入完为止。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">4</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">3</span></span><br><span class="line">输出: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="转换成列表后排序"><a href="#转换成列表后排序" class="headerlink" title="转换成列表后排序"></a>转换成列表后排序</h3><p>最简单思路，转换成数组（列表）后直接sort，最后转回链表即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        list.add(p1.val);</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line">    p1 = head;</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">        head.val = it.next();</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>先假定一个伪头结点，并把尾结点tail设置为伪头结点，接着依次比较当前结点cur与tai的值，如果tail的值大于等于cur，则说明cur应该插入tail之前，先记录下cur.next，并将tail.next设置为cur.next,从伪头结点开始遍历，直到找到一个结点下一个结点的值大于cur，这样就找到了cur结点的插入位置，修改对应结点的位置即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode p1 = <span class="keyword">new</span> ListNode(Integer.MIN_VALUE);  <span class="comment">//傀儡头结点</span></span><br><span class="line">    ListNode pre = p1, tail = p1, cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tail.val &lt; cur.val)&#123;</span><br><span class="line">            tail.next = cur;</span><br><span class="line">            tail = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ListNode tmp = cur.next;</span><br><span class="line">            tail.next = tmp;</span><br><span class="line">            <span class="comment">//不加这一句，当前面是已经排好序的1-&gt;2-&gt;3-&gt;4这种情况时，</span></span><br><span class="line">            <span class="comment">//如果要再把5插入里面，会造成后面的while语句一直循环</span></span><br><span class="line">            <span class="comment">//tail.next后面接的就是cur，然后cur.next = pre.next;</span></span><br><span class="line">            <span class="comment">//pre.next = cur;就成环了，因为成环接下来会一直困在主while循环</span></span><br><span class="line">            <span class="comment">//找到适当的插入位置</span></span><br><span class="line">            <span class="keyword">while</span> (pre.next != <span class="keyword">null</span> &amp;&amp; pre.next.val &lt; cur.val)</span><br><span class="line">                pre = pre.next;</span><br><span class="line">            cur.next = pre.next;</span><br><span class="line">            pre.next = cur;</span><br><span class="line">            pre = p1;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第147题对链表进行插入排序&lt;/p&gt;
&lt;p&gt;对链表进行插入排序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif&quot; alt=&quot;img&quot;&gt;&lt;br&gt;插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="排序" scheme="http://yorxika.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Excel表列名称</title>
    <link href="http://yorxika.github.io/2019/12/12/Excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/"/>
    <id>http://yorxika.github.io/2019/12/12/Excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</id>
    <published>2019-12-11T16:14:57.000Z</published>
    <updated>2019-12-12T12:42:13.990Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第168题Excel表列名称</p><p>给定一个正整数，返回它在 Excel 表中相对应的列名称。</p><p>例如，</p><a id="more"></a><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> -&gt; A</span><br><span class="line"><span class="number">2</span> -&gt; B</span><br><span class="line"><span class="number">3</span> -&gt; C</span><br><span class="line">...</span><br><span class="line"><span class="number">26</span> -&gt; Z</span><br><span class="line"><span class="number">27</span> -&gt; AA</span><br><span class="line"><span class="number">28</span> -&gt; AB </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: 1</span></span><br><span class="line"><span class="section">输出: "A"</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: 28</span></span><br><span class="line"><span class="section">输出: "AB"</span></span><br></pre></td></tr></table></figure><h4 id="伪进制转换I"><a href="#伪进制转换I" class="headerlink" title="伪进制转换I"></a>伪进制转换I</h4><p>一开始以为是10进制转26进制的题目，但是提交之后发现不对，因为题目要求是从1-26，而不是从0-25，所以取模后取余的方法不适用，需要修改。</p><blockquote><p>此题可以近似看成一个求26进制的题，但是值得注意的是对于26的整数倍，如果我们不加以限制的话就会造成A0的情况出现，而题目给出的条件中是不考虑这种情况的。所以我们只需要排除这种情况对于任何26的整数倍，我们就直接先插入‘Z’，同时还要对原数进行减一的操作。因为如果不进行减一的话对于26所对应的就是AZ（其实就是为了将A0映射为Z要对A0整体减一，由于0-1不够，所以要向A借一位，所以最后就得到了Z。所以我们要插入Z之后再对原数减1。）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        i = n % <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)  <span class="comment">//第26个字母</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">26</span>;</span><br><span class="line">            n -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string.insert(<span class="number">0</span>,(<span class="keyword">char</span>)(<span class="string">'A'</span> + i - <span class="number">1</span>));</span><br><span class="line">        n /= <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="伪进制转换II"><a href="#伪进制转换II" class="headerlink" title="伪进制转换II"></a>伪进制转换II</h4><blockquote><p>上一种思路我们看到了为什么对于26的整数倍要进行减一的操作，同时对于1-25而言，我们应该映射到A-Y，但是对于1我们直接加上A的ascii码就会得到B，所以我们也要进行减一的操作，(char)(temp+’A’-1)。对于Z我们需要减一，对于A-Y也需要减一，如果我们可以减这两种减一统一起来事情就变得简单了。所以我们可以考虑在取余之前就整体减一。我们可以证明对于26的N倍（num%26 = N），我们整体减一在取余就会得到(num-1)%26 = N-1余25，所以25直接加上A的ASCII码就得Z，所以对于Z而言是可以提前减一的。对于A-Y而言num%26 = N余t，t属于1到25的范围。这个t减一在加上’A’的ASCII码就对于与A-Y（t+’A’-1），而如果我们提前减一的话这个表达式就变成了(num-1)%26 =N余t-1;最后我们的到的值就不用进行减一操作（t-1+’A’）。所以可以将Z和A-Y的操作统一起来了，提前减一，然后再正常取模即可。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n--;</span><br><span class="line">            temp = n%<span class="number">26</span>;</span><br><span class="line">            res =(<span class="keyword">char</span>)(temp+<span class="string">'A'</span>) + res;</span><br><span class="line">            n = n/<span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第168题Excel表列名称&lt;/p&gt;
&lt;p&gt;给定一个正整数，返回它在 Excel 表中相对应的列名称。&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>多数元素</title>
    <link href="http://yorxika.github.io/2019/12/11/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/"/>
    <id>http://yorxika.github.io/2019/12/11/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</id>
    <published>2019-12-11T15:46:14.000Z</published>
    <updated>2019-12-12T12:44:57.730Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第169题多数元素</p><p>给定一个大小为 <em>n</em> 的数组，找到其中的多数元素。多数元素是指在数组中出现次数<strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><a id="more"></a><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>利用HashMap存储每个元素的出现次数，最后在对HashMap做一次遍历，找出最大值即可.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(i))</span><br><span class="line">            map.put(i,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            map.put(i,map.get(i) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Map.Entry&lt;Integer,Integer&gt; major = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry : map.entrySet())&#123;</span><br><span class="line">        <span class="keyword">if</span>(major == <span class="keyword">null</span> || entry.getValue() &gt; major.getValue())</span><br><span class="line">            major = entry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> major.getKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>由题目可知，出现次数最多的元素大于n / 2，因而排序后返回中位即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Boyer-Moore-投票算法"><a href="#Boyer-Moore-投票算法" class="headerlink" title="Boyer-Moore 投票算法"></a>Boyer-Moore 投票算法</h4><p>来源<a href="https://leetcode-cn.com/problems/majority-element/solution/qiu-zhong-shu-by-leetcode-2/" target="_blank" rel="noopener">题解</a></p><p><strong>想法</strong></p><p>如果我们把众数记为 +1+1 ，把其他数记为 -1−1 ，将它们全部加起来，显然和大于 0 ，从结果本身我们可以看出众数比其他数多。</p><p><strong>算法</strong></p><p>本质上， Boyer-Moore 算法就是找 <code>nums</code> 的一个后缀 suf<em>s<strong>u</strong>f</em> ，其中 suf[0]<em>s<strong>u</strong>f</em>[0] 就是后缀中的众数。我们维护一个计数器，如果遇到一个我们目前的候选众数，就将计数器加一，否则减一。只要计数器等于 0 ，我们就将 <code>nums</code> 中之前访问的数字全部 <em>忘记</em> ，并把下一个数字当做候选的众数。直观上这个算法不是特别明显为何是对的，我们先看下面这个例子（竖线用来划分每次计数器归零的情况）</p><p>[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 7, 7, 7, 7]</p><p>首先，下标为 0 的 <code>7</code> 被当做众数的第一个候选。在下标为 5 处，计数器会变回0 。所以下标为 6 的 <code>5</code> 是下一个众数的候选者。由于这个例子中 <code>7</code> 是真正的众数，所以通过忽略掉前面的数字，我们忽略掉了同样多数目的众数和非众数。因此， <code>7</code> 仍然是剩下数字中的众数。</p><p>[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | <strong>5, 5, 5, 5</strong>]</p><p>现在，众数是 <code>5</code> （在计数器归零的时候我们把候选从 <code>7</code> 变成了 <code>5</code>）。此时，我们的候选者并不是真正的众数，但是我们在 <em>遗忘</em> 前面的数字的时候，要去掉相同数目的众数和非众数（如果遗忘更多的非众数，会导致计数器变成负数）。</p><p>因此，上面的过程说明了我们可以放心地遗忘前面的数字，并继续求解剩下数字中的众数。最后，总有一个后缀满足计数器是大于 0 的，此时这个后缀的众数就是整个数组的众数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Integer ans = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">            ans = i;</span><br><span class="line">        count += (i == ans)? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>看到 <a href="https://leetcode.com/problems/majority-element/discuss/51612/C%2B%2B-6-Solutions" target="_blank" rel="noopener">这里</a> 介绍的，就是把数字放眼到二进制的形式，举个例子。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> 都写成 <span class="number">2</span> 进制</span><br><span class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>由于 <code>2</code> 是超过半数的数，它的二进制是 <code>010</code>，所以对于从右边数第一列一定是 <code>0</code> 超过半数，从右边数第二列一定是 <code>1</code> 超过半数，从右边数第三列一定是 <code>0</code> 超过半数。然后每一列超过半数的 <code>0,1,0</code> 用 <code>10</code>进制表示就是 <code>2</code> 。</p><p>所以我们只需要统计每一列超过半数的数，<code>0</code> 或者 <code>1</code>，然后这些超过半数的二进制位组成一个数字，就是我们要找的数。</p><p>当然，我们可以只统计 <code>1</code> 的个数，让每一位开始默认为 <code>0</code>，如果发现某一列的 <code>1</code> 的个数超过半数，就将当前位改为 <code>1</code>。</p><p>具体算法通过按位与和按位或实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> majority = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = nums.length;</span><br><span class="line">    <span class="comment">//判断每一位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, mask = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++, mask &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录当前列 1 的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mask &amp; nums[j]) == mask) &#123;</span><br><span class="line">                bits++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前列 1 的个数是否超过半数</span></span><br><span class="line">        <span class="keyword">if</span> (bits &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line">            majority |= mask;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> majority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第169题多数元素&lt;/p&gt;
&lt;p&gt;给定一个大小为 &lt;em&gt;n&lt;/em&gt; 的数组，找到其中的多数元素。多数元素是指在数组中出现次数&lt;strong&gt;大于&lt;/strong&gt; &lt;code&gt;⌊ n/2 ⌋&lt;/code&gt; 的元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="位运算" scheme="http://yorxika.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法习题</title>
    <link href="http://yorxika.github.io/2019/12/09/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%B9%A0%E9%A2%98/"/>
    <id>http://yorxika.github.io/2019/12/09/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%B9%A0%E9%A2%98/</id>
    <published>2019-12-09T08:43:23.000Z</published>
    <updated>2019-12-12T12:49:29.490Z</updated>
    
    <content type="html"><![CDATA[<h4 id="活动教室分配"><a href="#活动教室分配" class="headerlink" title="活动教室分配"></a>活动教室分配</h4><p>T16.1-4 活动教室分配(区间着色问题)</p><p>题目：</p><p>　　有一组活动，我们需要将它们安排到一些教室，任意活动都可以在任意教室进行。我们希望使用最少的教室完成所有活动。</p><p>　　设计一个高效的贪心算法求每个活动应该在哪个教室进行。<a id="more"></a></p><p>分析：</p><p>　　本题是对书中活动选择问题的一个扩展。在活动选择问题中，我们要求的是一个最大兼容活动集，也就是在所有时间内时间不重叠的最多的活动集合。</p><p>　　易知，这样一个活动集，就是一个教室最多能够举办的活动集。所以剩下的活动一定不能和该活动集内的活动在同一个教室举行。我们不断对剩下的活动使用贪心算法，需要多少次贪心能够选取完所有的活动，就最少需要几个教室。</p><p>　　我们首先对所有活动按结束时间排序。遍历所有活动，如果下一个活动开始时间比某教室中最后一个活动结束时间晚，则加入该教室。如果不能加入已使用的任何教室，则需要新开一个教室。　　</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Acti;<span class="comment">//用起始时间和结束时间的pair表示一个活动。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">party</span><span class="params">(<span class="built_in">vector</span>&lt;Acti&gt;&amp; acti_vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(acti_vec.begin(),acti_vec.end(),[](<span class="keyword">const</span> Acti&amp; a,<span class="keyword">const</span> Acti&amp; b)&#123;<span class="keyword">return</span> a.second &lt; b.second;&#125;);<span class="comment">//按结束时间对所有活动排序。</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Acti&gt;&gt; classroom;<span class="comment">//教室列表。</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Acti&gt; classroom1;</span><br><span class="line">    classroom1.push_back(*acti_vec.begin());<span class="comment">//初始化第一个教室，将结束时间最早的活动放入。</span></span><br><span class="line">    classroom.push_back(classroom1);<span class="comment">//将第一个教室加入教室列表。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;(<span class="keyword">int</span>)acti_vec.size();i++)<span class="comment">//遍历一遍活动列表。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; (<span class="keyword">int</span>)classroom.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(acti_vec[i].first &gt;= (*(classroom[j].end()<span class="number">-1</span>)).second)<span class="comment">//如果该活动的开始时间比某教室目前为止最后一个活动结束结束时间晚，则加入该教室。</span></span><br><span class="line">            &#123;</span><br><span class="line">                classroom[j].push_back(acti_vec[i]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == (<span class="keyword">int</span>)classroom.size())<span class="comment">//如果无法加入当前任何一个教室，则需要一个新的教室。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;Acti&gt; classroom_temp;</span><br><span class="line">            classroom_temp.push_back(acti_vec[i]);</span><br><span class="line">            classroom.push_back(classroom_temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="keyword">int</span>)classroom.size();i++)<span class="comment">//对每一个教室，按起始时间 结束时间输出每一个活动。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"classroom "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; (<span class="keyword">int</span>)classroom[i].size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;classroom[i][j].first&lt;&lt;<span class="string">" "</span>&lt;&lt;classroom[i][j].second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Acti&gt; acti_vec = &#123;</span><br><span class="line">                            &#123;<span class="number">1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">0</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">5</span>,<span class="number">7</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">3</span>,<span class="number">9</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">5</span>,<span class="number">9</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">6</span>,<span class="number">10</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">8</span>,<span class="number">11</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">8</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">2</span>,<span class="number">14</span>&#125;,</span><br><span class="line">                            &#123;<span class="number">12</span>,<span class="number">16</span>&#125;</span><br><span class="line">                            &#125;;</span><br><span class="line">    party(acti_vec);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找零问题"><a href="#找零问题" class="headerlink" title="找零问题"></a>找零问题</h4><p>题目：<br>考虑用最少的硬币找n美分零钱的问题。假设每种硬币的面额都是整数。</p><p>A.设计贪心算法求解找零问题，假定有25美分、10美分、5美分和1美分4种面额的硬币。证明你的算法能找到最优解。</p><p>B.假定硬币的面额是c的幂，即面额c0,c1,…,ck,c和k为整数，c&gt;1,k&gt;=1.证明：贪心算法总能得到最优解。</p><p>C.设计一组硬币面额，使得贪心算法不能保证得到最优解。这组硬币面额中应该包含1美分，使得对每个零钱值都存在找零方案。</p><p>D.设计一个O(nk)时间的找零算法，适用于任何k种不同面额的硬币，假定问题包含1美分硬币。</p><p>分析:</p><p>A：</p><p>引理1（离散数学其及应用3.1.4）：若n是正整数，则用25美分、10美分、5美分和1美分等尽可能少的硬币找出的n美分零钱中，至多有2个10美分、至多有1个5美分、至多有4个1美分硬币，而不能有2个10美分和1个5美分硬币。用10美分、5美分和1美分硬币找出的零钱不能超过24美分。</p><p>证用反证法。证明如果有超过规定数目的各种类型的硬币，就可以用等值的数目更少的硬币来替换。注意，如果有3个10美分硬币，就可以换成1个25美分和1个5美分硬币；如果有2个5美分硬币，就可以换成1个10美分硬币；如果有5个1美分硬币，就可以换成1个5美分硬币；如果有2个10美分和1个5美分硬币，就可以换成1个25美分硬币。由于至多可以有2个10美分、1个5美分和4个1美分硬币，而不能有2个10美分和1个5美分硬币，所以当用尽可能少的硬币找n美分零钱时，24美分就是用10美分、5美分和1美分硬币能找出的最大值。</p><p>假设存在正整数n，使得有办法将25美分、10美分、5美分和1美分硬币用少于贪心算法所求出的硬币去找n美分零钱。首先注意，在这种找n美分零钱的最优方式中使用25美分硬币的个数q′，一定等于贪心算法所用25美分硬币的个数。为说明这一点，注意贪心算法使用尽可能多的25美分硬币，所以q′≤q。但是q′也不能小于q。假如q′小于q，需要在这种最优方式中用10美分、5美分和1美分硬币至少找出25美分零钱。而根据引理1，这是不可能的。由于在找零钱的这两种方式中一定有同样多的25美分硬币，所以在这两种方式中10美分、5美分和1美分硬币的总值一定相等，并且这些硬币的总值不超过24美分。10美分硬币的个数一定相等，因为贪心算法使用尽可能多的10美分硬币。而根据引理1，当使用尽可能少的硬币找零钱时，至多使用1个5分硬币和4个1分硬币，所以在找零钱的最优方式中也使用尽可能多的10美分硬币。类似地，5美分硬币的个数相等；最终，1美分的个数相等。</p><p>B：</p><p>分析——同A题，由于1+c1+c2+c3+…ck-1=ck - 1&lt;ck,故当n大于ck时，可以分解为ck与n-ck的值，其中ck只用一个硬币值为ck的硬币就能得到最少硬币数，而子问题变成n-ck的最少硬币数，依次类推，贪心算法总能得到最好的结果。</p><p>C:<br>分析——要分析什么情况下贪心算法无效，如果出现一组硬币25，6，5，1.由于1+5=6，当遇到10元时，按照贪心算法将分解为6+4<em>1，而其实为2</em>5.</p><p>D：<br>假设m(n)表示找零n美分需要的最少硬币数，硬币面值为c1,c2, …,ck，并令m[0]=0,则m(n)=1如果n等于某个ci，否则m(n) =min{ m(n-c1)+1, m(n-c2)+1, …, m(n-ck)+1 }</p><p>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;c,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;s,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = c.size()<span class="number">-1</span>;<span class="comment">//减掉填充符</span></span><br><span class="line">m[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">m[i] = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k &amp;&amp; (i&gt;=c[j]);j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m[i-c[j]]+<span class="number">1</span>&lt; m[i])</span><br><span class="line">&#123;</span><br><span class="line">m[i] = m[i-c[j]]+<span class="number">1</span>;</span><br><span class="line">s[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;c,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;s,<span class="keyword">int</span> n,<span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = c.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;number(k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">number[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">number[s[n]] ++;</span><br><span class="line">n = n - c[s[n]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"needs coins : %d \n"</span>,count);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(number[i] &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"need %d %d cents coin  "</span>,number[i],c[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//const int c1[] = &#123;0,1,5,10,25&#125;;//零钱种类 第一个元素0起填充的作用 方便下标处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c1[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> k = <span class="keyword">sizeof</span>(c1)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">15</span>;<span class="comment">//所需找零钱数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">c.push_back(c1[i]);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;m(n+<span class="number">1</span>);<span class="comment">//不同零钱数对应的最小硬币数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;s(n+<span class="number">1</span>);<span class="comment">//记录所选硬币</span></span><br><span class="line">change(c,m,s,n);</span><br><span class="line">print(c,s,n,m[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;活动教室分配&quot;&gt;&lt;a href=&quot;#活动教室分配&quot; class=&quot;headerlink&quot; title=&quot;活动教室分配&quot;&gt;&lt;/a&gt;活动教室分配&lt;/h4&gt;&lt;p&gt;T16.1-4 活动教室分配(区间着色问题)&lt;/p&gt;
&lt;p&gt;题目：&lt;/p&gt;
&lt;p&gt;　　有一组活动，我们需要将它们安排到一些教室，任意活动都可以在任意教室进行。我们希望使用最少的教室完成所有活动。&lt;/p&gt;
&lt;p&gt;　　设计一个高效的贪心算法求每个活动应该在哪个教室进行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法导论" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
      <category term="贪心" scheme="http://yorxika.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>乘积最大子序列</title>
    <link href="http://yorxika.github.io/2019/12/07/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://yorxika.github.io/2019/12/07/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2019-12-06T16:22:02.000Z</published>
    <updated>2019-12-12T12:45:14.157Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第152题乘积最大子序列</p><p>给定一个整数数组 <code>nums</code> ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">2</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">4</span>]</span><br><span class="line">输出: <span class="number">6</span></span><br><span class="line">解释: 子数组 [<span class="number">2</span>,<span class="number">3</span>] 有最大乘积 <span class="number">6</span>。</span><br></pre></td></tr></table></figure><hr><h4 id="同最大连续子序和"><a href="#同最大连续子序和" class="headerlink" title="同最大连续子序和"></a>同最大连续子序和</h4><ul><li>遍历数组时计算当前最大值，不断更新</li><li>令imax为当前最大值，则当前最大值为 <code>imax = max(imax * nums[i], nums[i])</code></li><li>由于存在负数，那么会导致最大的变最小的，最小的变最大的。因此还需要维护当前最小值imin，<code>imin = min(imin * nums[i], nums[i])</code></li><li><strong>当负数出现时则imax与imin进行交换再进行下一步计算</strong></li><li>时间复杂度：O(n)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE, imax = <span class="number">1</span>, imin = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = imax;</span><br><span class="line">            imax = imin;</span><br><span class="line">            imin = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        imax = Math.max(imax*nums[i], nums[i]);</span><br><span class="line">        imin = Math.min(imin*nums[i], nums[i]);</span><br><span class="line">        max = Math.max(max, imax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第152题乘积最大子序列&lt;/p&gt;
&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>翻转字符串里的单词</title>
    <link href="http://yorxika.github.io/2019/12/06/%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <id>http://yorxika.github.io/2019/12/06/%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/</id>
    <published>2019-12-06T15:54:45.000Z</published>
    <updated>2019-12-12T12:45:32.588Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第151题翻转字符串里的单词</p><p>给定一个字符串，逐个翻转字符串中的每个单词。</p><a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: "  hello world!  "</span></span><br><span class="line"><span class="section">输出: "world! hello"</span></span><br><span class="line"><span class="section">解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>无空格字符构成一个单词。</li><li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li><li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li></ul><hr><h4 id="2次遍历"><a href="#2次遍历" class="headerlink" title="2次遍历"></a>2次遍历</h4><p>第一次倒序遍历将单词缓存，接着将单词翻转加入答案字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    String ans = <span class="keyword">new</span> String();</span><br><span class="line">    String temp = <span class="keyword">new</span> String();</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">""</span>) || s.equals(<span class="string">" "</span>))</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">' '</span> &amp;&amp; i &gt; <span class="number">1</span>  &amp;&amp; s.charAt(i - <span class="number">1</span>) == <span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">' '</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp.length() == <span class="number">0</span> ||temp.charAt(<span class="number">0</span>) == <span class="string">' '</span> )</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                ans += reverse(temp);</span><br><span class="line">                ans += <span class="string">' '</span>;</span><br><span class="line">                temp = <span class="keyword">new</span> String();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp += s.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!temp.equals(<span class="string">" "</span>))&#123;</span><br><span class="line">        ans += reverse(temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans.length() &gt; <span class="number">0</span> &amp;&amp; ans.charAt(ans.length() - <span class="number">1</span>) == <span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">return</span> ans.substring(<span class="number">0</span>,ans.length() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] array = s.toCharArray();</span><br><span class="line">    String reverse = <span class="string">""</span>;<span class="comment">//新建空字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        reverse += array[i];</span><br><span class="line">    <span class="keyword">return</span> reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h4><p>trim()方法：去掉字符串两端的多余空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    StringBuilder ans = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">//去掉s的首尾空格 然后将字符串拆分</span></span><br><span class="line">    String[] s1 = s.trim().split(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s1.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="comment">//空格后面的空格会变成空字符串</span></span><br><span class="line">        <span class="keyword">if</span>(!s1[i].equals(<span class="string">""</span>)) ans.append(s1[i] + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去掉最后添加上的空格</span></span><br><span class="line">    ans = <span class="keyword">new</span> StringBuilder(ans.toString().trim());</span><br><span class="line">    <span class="keyword">return</span> ans.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == s || s.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">char</span>[] c = s.toCharArray();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> len = c.length;</span><br><span class="line">        <span class="keyword">int</span> i = len - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去掉末尾的空格</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; c[i] == <span class="string">' '</span>) i--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = i + <span class="number">1</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(i + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] == <span class="string">' '</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (right != left) </span><br><span class="line">                <span class="comment">//左不等于右是为了判断没有空格</span></span><br><span class="line">                sb.append(c, left, right - left).append(<span class="string">" "</span>);</span><br><span class="line">                <span class="comment">//加入单词</span></span><br><span class="line">                left = i;</span><br><span class="line">                right = i;</span><br><span class="line">                <span class="comment">//调整指针位置</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left = i;</span><br><span class="line">            <span class="comment">//往前找到不为空格的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right != left)</span><br><span class="line">            <span class="keyword">return</span> sb.append(c, left, right - left).toString();</span><br><span class="line">        <span class="keyword">return</span> sb.length() &gt; <span class="number">0</span> ? sb.substring(<span class="number">0</span>, sb.length() - <span class="number">1</span>) : <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第151题翻转字符串里的单词&lt;/p&gt;
&lt;p&gt;给定一个字符串，逐个翻转字符串中的每个单词。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="字符串" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="字符串" scheme="http://yorxika.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>两数之和II</title>
    <link href="http://yorxika.github.io/2019/12/06/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII/"/>
    <id>http://yorxika.github.io/2019/12/06/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII/</id>
    <published>2019-12-05T16:02:08.000Z</published>
    <updated>2019-12-12T12:46:07.057Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第167题两数之和 II - 输入有序数组</p><blockquote><p>给定一个已按照<strong><em>升序排列\</em></strong> 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2<em>。</em></p><p><strong>说明:</strong></p><a id="more"></a><ul><li>返回的下标值（index1 和 index2）不是从零开始的。</li><li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li></ul><p><strong>示例:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 输入: numbers = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">&gt; 输出: [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt; 解释: <span class="number">2</span> 与 <span class="number">7</span> 之和等于目标数 <span class="number">9</span> 。因此 index1 = <span class="number">1</span>, index2 = <span class="number">2</span> 。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><hr><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span> [] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(numbers.length == <span class="number">0</span> || numbers.length == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = numbers.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">        sum = numbers[i] + numbers[j];</span><br><span class="line">        <span class="keyword">if</span>(sum == target)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line">            ans[<span class="number">1</span>] = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span> [] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(numbers.length == <span class="number">0</span> || numbers.length == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers.length ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(target - numbers[i]))&#123;</span><br><span class="line">            ans[<span class="number">0</span>] = map.get(target - numbers[i]);</span><br><span class="line">            ans[<span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            map.put(numbers[i], i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>固定一个数，用二分查找搜索target-nums[I]，时间复杂度O(nlgn)，不如双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span> [] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(numbers.length == <span class="number">0</span> || numbers.length == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>,right = numbers.length - <span class="number">1</span>,mid;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        left = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(numbers[mid] &gt; target - numbers[i])</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid] &lt; target - numbers[i])</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans[<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line">                ans[<span class="number">1</span>] = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第167题两数之和 II - 输入有序数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个已按照&lt;strong&gt;&lt;em&gt;升序排列\&lt;/em&gt;&lt;/strong&gt; 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;/p&gt;
&lt;p&gt;函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2&lt;em&gt;。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="双指针" scheme="http://yorxika.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>最小栈</title>
    <link href="http://yorxika.github.io/2019/12/05/%E6%9C%80%E5%B0%8F%E6%A0%88/"/>
    <id>http://yorxika.github.io/2019/12/05/%E6%9C%80%E5%B0%8F%E6%A0%88/</id>
    <published>2019-12-05T15:29:41.000Z</published>
    <updated>2019-12-12T12:45:50.347Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第155题最小栈</p><blockquote><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) – 将元素 x 推入栈中。</li><li>pop() – 删除栈顶的元素。<a id="more"></a></li><li>top() – 获取栈顶元素。</li><li>getMin() – 检索栈中的最小元素。</li></ul><p><strong>示例:</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  M<span class="keyword">in</span>Stack <span class="keyword">min</span>Stack = new M<span class="keyword">in</span>Stack();</span><br><span class="line">&gt;  <span class="keyword">min</span>Stack.push(-<span class="number">2</span>);</span><br><span class="line">&gt;  <span class="keyword">min</span>Stack.push(<span class="number">0</span>);</span><br><span class="line">&gt;  <span class="keyword">min</span>Stack.push(-<span class="number">3</span>);</span><br><span class="line">&gt;  <span class="keyword">min</span>Stack.getM<span class="keyword">in</span>();   --&gt; 返回 -<span class="number">3</span>.</span><br><span class="line">&gt;  <span class="keyword">min</span>Stack.pop();</span><br><span class="line">&gt;  <span class="keyword">min</span>Stack.top();      --&gt; 返回 <span class="number">0</span>.</span><br><span class="line">&gt;  <span class="keyword">min</span>Stack.getM<span class="keyword">in</span>();   --&gt; 返回 -<span class="number">2</span>.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 双栈</span><br><span class="line"></span><br><span class="line">利用两个栈，一个数据栈，一个保存所有最小值栈实现。</span><br><span class="line"></span><br><span class="line">当最小值栈非空时，元素直接入栈，否则需要比较栈顶元素与入栈元素大小，如果小于等于，则入栈</span><br><span class="line"></span><br><span class="line">代码如下：</span><br><span class="line"></span><br><span class="line">​```JAVA</span><br><span class="line">    class MinStack &#123;</span><br><span class="line"></span><br><span class="line">        /** initialize your data structure here. */</span><br><span class="line"></span><br><span class="line">        private Stack&lt;Integer&gt; stack;</span><br><span class="line">        private Stack&lt;Integer&gt; miniStack;</span><br><span class="line"></span><br><span class="line">        public MinStack() &#123;</span><br><span class="line">            stack = new Stack&lt;&gt;();</span><br><span class="line">            miniStack = new Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void push(int x) &#123;</span><br><span class="line">            <span class="attribute">stack.push(x);</span></span><br><span class="line">            if(!miniStack.empty())&#123;</span><br><span class="line">                if(x &lt;= miniStack.peek())&#123;</span><br><span class="line">                    <span class="attribute">miniStack.push(x);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else</span><br><span class="line">                <span class="attribute">miniStack.push(x);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void pop() &#123;</span><br><span class="line">            int pop = stack.pop();</span><br><span class="line"></span><br><span class="line">            if(pop == miniStack.peek())</span><br><span class="line">                <span class="attribute">miniStack.pop();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int top() &#123;</span><br><span class="line">            return stack.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getMin() &#123;</span><br><span class="line">            return miniStack.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="单栈"><a href="#单栈" class="headerlink" title="单栈"></a>单栈</h4><p>当有更小的值来的时候，我们只需要把之前的最小值入栈，当前更小的值再入栈即可。当这个最小值要出栈的时候，下一个值便是之前的最小值了。</p><p>例如：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">入栈 3 </span><br><span class="line">|<span class="string">   </span>|<span class="string">   min = 3</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">     </span></span><br><span class="line">|<span class="string">_3_</span>|<span class="string">    </span></span><br><span class="line"><span class="string">stack   </span></span><br><span class="line"></span><br><span class="line"><span class="string">入栈 5 </span></span><br><span class="line">|<span class="string">   </span>|<span class="string">   min = 3</span></span><br><span class="line">|<span class="string"> 5 </span>|<span class="string">     </span></span><br><span class="line">|<span class="string">_3_</span>|<span class="string">    </span></span><br><span class="line"><span class="string">stack  </span></span><br><span class="line"></span><br><span class="line"><span class="string">入栈 2 </span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string">   min = 2?</span></span><br><span class="line">|<span class="string"> 5 </span>|<span class="string">     </span></span><br><span class="line">|<span class="string">_3_</span>|<span class="string">    </span></span><br><span class="line"><span class="string">stack  </span></span><br><span class="line"></span><br><span class="line"><span class="string">入栈 2 ，同时将之前的 min 值 3 入栈，再把 2 入栈，同时更新 min = 2</span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string">   min = 2</span></span><br><span class="line">|<span class="string"> 3 </span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> 5 </span>|<span class="string">     </span></span><br><span class="line">|<span class="string">_3_</span>|<span class="string">    </span></span><br><span class="line"><span class="string">stack  </span></span><br><span class="line"></span><br><span class="line"><span class="string">入栈 6 </span></span><br><span class="line">|<span class="string"> 6 </span>|<span class="string">  min = 2</span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string">   </span></span><br><span class="line">|<span class="string"> 3 </span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> 5 </span>|<span class="string">     </span></span><br><span class="line">|<span class="string">_3_</span>|<span class="string">    </span></span><br><span class="line"><span class="string">stack  </span></span><br><span class="line"></span><br><span class="line"><span class="string">出栈 6     </span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string">   min = 2</span></span><br><span class="line">|<span class="string"> 3 </span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> 5 </span>|<span class="string">     </span></span><br><span class="line">|<span class="string">_3_</span>|<span class="string">    </span></span><br><span class="line"><span class="string">stack  </span></span><br><span class="line"></span><br><span class="line"><span class="string">出栈 2     </span></span><br><span class="line">|<span class="string"> 2 </span>|<span class="string">   min = 2</span></span><br><span class="line">|<span class="string"> 3 </span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> 5 </span>|<span class="string">     </span></span><br><span class="line">|<span class="string">_3_</span>|<span class="string">    </span></span><br><span class="line"><span class="string">stack  </span></span><br><span class="line"></span><br><span class="line"><span class="string">出栈 2     </span></span><br><span class="line">|<span class="string">   </span>|<span class="string">  min = 3   </span></span><br><span class="line">|<span class="string"> 5 </span>|<span class="string">   </span></span><br><span class="line">|<span class="string">_3_</span>|<span class="string">    </span></span><br><span class="line"><span class="string">stack</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当前值更小</span></span><br><span class="line">        <span class="keyword">if</span>(x &lt;= min)&#123;   </span><br><span class="line">            <span class="comment">//将之前的最小值保存</span></span><br><span class="line">            stack.push(min);</span><br><span class="line">            <span class="comment">//更新最小值</span></span><br><span class="line">            min=x;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果弹出的值是最小值，那么将下一个元素更新为最小值</span></span><br><span class="line">        <span class="keyword">if</span>(stack.pop() == min) &#123;</span><br><span class="line">            min=stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="差值栈"><a href="#差值栈" class="headerlink" title="差值栈"></a>差值栈</h4><p>用一个 min 变量保存最小值。只不过栈里边我们不去保存原来的值，而是去存储入栈的值和最小值的差值。然后得到之前的最小值的话，我们就可以通过 min 值和栈顶元素得到，举个例子。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">入栈 <span class="number">3</span>，存入 <span class="number">3</span> - <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">|   |   min = <span class="number">3</span></span><br><span class="line">|   |     </span><br><span class="line">|_0_|    </span><br><span class="line">stack   </span><br><span class="line"></span><br><span class="line">入栈 <span class="number">5</span>，存入 <span class="number">5</span> - <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">|   |   min = <span class="number">3</span></span><br><span class="line">| <span class="number">2</span> |     </span><br><span class="line">|_0_|    </span><br><span class="line">stack  </span><br><span class="line"></span><br><span class="line">入栈 <span class="number">2</span>，因为出现了更小的数，所以我们会存入一个负数，这里很关键</span><br><span class="line">也就是存入  <span class="number">2</span> - <span class="number">3</span> = <span class="number">-1</span>, 并且更新 min = <span class="number">2</span> </span><br><span class="line">对于之前的 min 值 <span class="number">3</span>, 我们只需要用更新后的 min - 栈顶元素 <span class="number">-1</span> 就可以得到    </span><br><span class="line">| <span class="number">-1</span>|   min = <span class="number">2</span></span><br><span class="line">| <span class="number">5</span> |     </span><br><span class="line">|_3_|    </span><br><span class="line">stack  </span><br><span class="line"></span><br><span class="line">入栈 <span class="number">6</span>，存入  <span class="number">6</span> - <span class="number">2</span> = <span class="number">4</span></span><br><span class="line">| <span class="number">4</span> |   min = <span class="number">2</span></span><br><span class="line">| <span class="number">-1</span>| </span><br><span class="line">| <span class="number">5</span> |     </span><br><span class="line">|_3_|    </span><br><span class="line">stack  </span><br><span class="line"></span><br><span class="line">出栈，返回的值就是栈顶元素 <span class="number">4</span> 加上 min，就是 <span class="number">6</span></span><br><span class="line">|   |   min = <span class="number">2</span></span><br><span class="line">| <span class="number">-1</span>| </span><br><span class="line">| <span class="number">5</span> |     </span><br><span class="line">|_3_|    </span><br><span class="line">stack  </span><br><span class="line"></span><br><span class="line">出栈，此时栈顶元素是负数，说明之前对 min 值进行了更新。</span><br><span class="line">入栈元素 - min = 栈顶元素，入栈元素其实就是当前的 min 值 <span class="number">2</span></span><br><span class="line">所以更新前的 min 就等于入栈元素 <span class="number">2</span> - 栈顶元素(<span class="number">-1</span>) = <span class="number">3</span></span><br><span class="line">|   | min = <span class="number">3</span></span><br><span class="line">| <span class="number">5</span> |     </span><br><span class="line">|_3_|    </span><br><span class="line">stack</span><br></pre></td></tr></table></figure><p>再理一下上边的思路，我们每次存入的是 <code>原来值 - 当前最小值</code>。</p><p>当原来值大于等于当前最小值的时候，我们存入的肯定就是非负数，所以出栈的时候就是 <code>栈中的值 + 当前最小值</code> 。</p><p>当原来值小于当前最小值的时候，我们存入的肯定就是负值，此时的值我们不入栈，用 <code>min</code> 保存起来，同时将差值入栈。</p><p>当后续如果出栈元素是负数的时候，那么要出栈的元素其实就是 <code>min</code>。此外之前的 <code>min</code> 值，我们可以通过栈顶的值和当前 <code>min</code> 值进行还原，就是用 <code>min</code> 减去栈顶元素即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> min;</span><br><span class="line">Stack&lt;Long&gt; stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">min = x;</span><br><span class="line">stack.push(x - min);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">stack.push(x - min);</span><br><span class="line"><span class="keyword">if</span> (x &lt; min)&#123;</span><br><span class="line">min = x; <span class="comment">// 更新最小值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (stack.isEmpty())</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> pop = stack.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出的是负值，要更新 min</span></span><br><span class="line"><span class="keyword">if</span> (pop &lt; <span class="number">0</span>) &#123;</span><br><span class="line">min = min - pop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> top = stack.peek();</span><br><span class="line"><span class="comment">//负数的话，出栈的值保存在 min 中</span></span><br><span class="line"><span class="keyword">if</span> (top &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (min);</span><br><span class="line">        <span class="comment">//出栈元素加上最小值即可</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (top + min);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) min;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>再分享一个有趣的解法，参考 <a href="https://leetcode.com/problems/min-stack/discuss/49217/6ms-Java-Solution-using-Linked-List.-Clean-self-explanatory-and-efficient." target="_blank" rel="noopener">这里</a> 。</p><p>回到最初的疑虑，我们要不要用 <code>java</code> 提供的 <code>stack</code> 。如果不用的话，可以怎么做的？</p><p>直接用一个链表即可实现栈的基本功能，那么最小值该怎么得到呢？我们可以在 <code>Node</code> 节点中增加一个 <code>min</code> 字段，这样的话每次加入一个节点的时候，我们同时只要确定它的 <code>min</code> 值即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> x, <span class="keyword">int</span> min)&#123;</span><br><span class="line">            <span class="keyword">this</span>.value=x;</span><br><span class="line">            <span class="keyword">this</span>.min=min;</span><br><span class="line">            next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node head;</span><br><span class="line">    <span class="comment">//每次加入的节点放到头部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==head)&#123;</span><br><span class="line">            head = <span class="keyword">new</span> Node(x,x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//当前值和之前头结点的最小值较小的做为当前的 min</span></span><br><span class="line">            Node n = <span class="keyword">new</span> Node(x, Math.min(x,head.min));</span><br><span class="line">            n.next=head;</span><br><span class="line">            head=n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head!=<span class="keyword">null</span>)</span><br><span class="line">            head =head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head!=<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head.value;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=head)</span><br><span class="line">            <span class="keyword">return</span> head.min;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第155题最小栈&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) – 将元素 x 推入栈中。&lt;/li&gt;
&lt;li&gt;pop() – 删除栈顶的元素。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="栈" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%88/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="栈" scheme="http://yorxika.github.io/tags/%E6%A0%88/"/>
    
      <category term="设计" scheme="http://yorxika.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的后序遍历</title>
    <link href="http://yorxika.github.io/2019/12/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yorxika.github.io/2019/12/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2019-12-04T16:08:30.000Z</published>
    <updated>2019-12-12T12:46:18.927Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第145题二叉树的后序遍历</p><blockquote><p>给定一个二叉树，返回它的 <strong>后序</strong> 遍历。</p></blockquote><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归顺序左右根就完事了嗷。<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">if</span> (root.left != <span class="keyword">null</span>)</span><br><span class="line">        postorderTraversal(root.left);</span><br><span class="line">    <span class="keyword">if</span> (root.right != <span class="keyword">null</span>)</span><br><span class="line">        postorderTraversal(root.right);</span><br><span class="line">    ans.add(root.val);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BFS-倒序输出-后序？"><a href="#BFS-倒序输出-后序？" class="headerlink" title="BFS+倒序输出 = 后序？"></a>BFS+倒序输出 = 后序？</h4><p>再改前序遍历的代码改的时候发现直接reverse输出左右子树的顺序不对，于是将入栈顺序改了就行了。。。<br>原理就是这样的遍历顺序是根右左，而后序遍历是左右根，因而翻转就是左右根了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">        TreeNode temp = stack.pop();</span><br><span class="line">        ans.add(temp.val);</span><br><span class="line">        <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>)</span><br><span class="line">            stack.add(temp.left);</span><br><span class="line">        <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>)</span><br><span class="line">            stack.add(temp.right);</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.reverse(ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第145题二叉树的后序遍历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树，返回它的 &lt;strong&gt;后序&lt;/strong&gt; 遍历。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h4&gt;&lt;p&gt;递归顺序左右根就完事了嗷。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的前序遍历</title>
    <link href="http://yorxika.github.io/2019/12/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yorxika.github.io/2019/12/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2019-12-04T15:55:18.000Z</published>
    <updated>2019-12-12T12:46:26.169Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第144题二叉树的前序遍历</p><blockquote><p>给定一个二叉树，返回它的<strong>前序</strong>遍历。</p></blockquote><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归很简单，在大二上就已经学过了，按根左右的顺序即可。<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    ans.add(root.val);</span><br><span class="line">    <span class="keyword">if</span> (root.left != <span class="keyword">null</span>)</span><br><span class="line">        preorderTraversal(root.left);</span><br><span class="line">    <span class="keyword">if</span> (root.right != <span class="keyword">null</span>)</span><br><span class="line">        preorderTraversal(root.right);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>利用栈，首先根结点入栈，当栈非空，栈顶元素出栈，并且其值写入List，如果左右子树都非空，就右子树入栈再左子树出栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">        TreeNode temp = stack.pop();</span><br><span class="line">        ans.add(temp.val);</span><br><span class="line">        <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>)</span><br><span class="line">            stack.add(temp.right);</span><br><span class="line">        <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>)</span><br><span class="line">            stack.add(temp.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="莫里斯遍历"><a href="#莫里斯遍历" class="headerlink" title="莫里斯遍历"></a>莫里斯遍历</h4><p>题解里有，好像之前也看到过，摸了咕咕咕</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第144题二叉树的前序遍历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树，返回它的&lt;strong&gt;前序&lt;/strong&gt;遍历。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h4&gt;&lt;p&gt;递归很简单，在大二上就已经学过了，按根左右的顺序即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>验证二叉搜索树</title>
    <link href="http://yorxika.github.io/2019/12/03/%E9%AA%8C%E8%AF%81%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yorxika.github.io/2019/12/03/%E9%AA%8C%E8%AF%81%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2019-12-03T13:27:19.000Z</published>
    <updated>2019-12-12T12:46:40.324Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第98题验证二叉搜索树</p><blockquote><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><ul><li>节点的左子树只包含小于当前节点的数。</li><li>节点的右子树只包含大于当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。<a id="more"></a></li></ul></blockquote><hr><h4 id="错误的思路"><a href="#错误的思路" class="headerlink" title="错误的思路"></a>错误的思路</h4><p>做的时候忘记判断当前结点的左子树数据是否大于上一结点的数据了，最终在第70/75个用例时出错</p><p>错误的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> root.val&lt; root.right.val &amp;&amp; isValidBST(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> root.val &gt; root.left.val &amp;&amp; isValidBST(root.left);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root.val &gt; root.left.val &amp;&amp; root.val&lt; root.right.val &amp;&amp; isValidBST(root.left) &amp;&amp; isValidBST(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>来源<a href="https://leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode/" target="_blank" rel="noopener">题解</a><br>首先将结点的值与上界和下界（如果有）比较。然后，对左子树和右子树递归进行该过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode node, Integer lower, Integer upper)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> val = node.val;</span><br><span class="line">   <span class="keyword">if</span> (lower != <span class="keyword">null</span> &amp;&amp; val &lt;= lower) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (upper != <span class="keyword">null</span> &amp;&amp; val &gt;= upper) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//遍历右子树，当前结点的值放入lower</span></span><br><span class="line">   <span class="keyword">if</span> (! helper(node.right, val, upper)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//遍历左子树，当前结点的值放入upper</span></span><br><span class="line">   <span class="keyword">if</span> (! helper(node.left, lower, val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> helper(root, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历迭代"><a href="#中序遍历迭代" class="headerlink" title="中序遍历迭代"></a>中序遍历迭代</h4><p>利用中序遍历来判断是否是二叉搜索树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        TreeNode p = root;</span><br><span class="line">        TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//先将左子树全部入栈</span></span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(p);</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//弹出最后一个左边结点</span></span><br><span class="line">            p = stack.pop();</span><br><span class="line"><span class="comment">//如果右子树的值比左子树的值小</span></span><br><span class="line"><span class="comment">//直接返回false</span></span><br><span class="line">            <span class="keyword">if</span> (pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= p.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            pre = p;</span><br><span class="line"><span class="comment">//右子树入栈</span></span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历递归"><a href="#中序遍历递归" class="headerlink" title="中序遍历递归"></a>中序遍历递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> last = -Double.MAX_VALUE;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (isValidBST(root.left)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (last &lt; root.val) &#123;</span><br><span class="line">               last = root.val;</span><br><span class="line">               <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第98题验证二叉搜索树&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树，判断其是否是一个有效的二叉搜索树。&lt;/p&gt;
&lt;p&gt;假设一个二叉搜索树具有如下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点的左子树只包含小于当前节点的数。&lt;/li&gt;
&lt;li&gt;节点的右子树只包含大于当前节点的数。&lt;/li&gt;
&lt;li&gt;所有左子树和右子树自身必须也是二叉搜索树。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>位1的个数</title>
    <link href="http://yorxika.github.io/2019/12/03/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://yorxika.github.io/2019/12/03/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2019-12-03T12:07:34.000Z</published>
    <updated>2019-12-12T12:47:35.356Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第191题位1的个数</p><blockquote><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p><p>示例 1：</p><p>输入：00000000000000000000000000001011<br>输出：3<br>解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 ‘1’。<a id="more"></a></p></blockquote><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><ul><li>1.计算出来的值i的二进制可以按每2个二进制位为一组进行分组，各组的十进制表示的就是该组的汉明重量。</li><li>2.计算出来的值i的二进制可以按每4个二进制位为一组进行分组，各组的十进制表示的就是该组的汉明重量。</li><li>3.计算出来的值i的二进制可以按每8个二进制位为一组进行分组，各组的十进制表示的就是该组的汉明重量。</li><li>4.i * (0x01010101)计算出汉明重量并记录在二进制的高八位，&gt;&gt;24语句则通过右移运算，将汉明重量移到最低八位，最后二进制对应的十进制数就是汉明重量。<br>算法时间复杂度是O（1）的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">i = (i &amp; <span class="number">0x55555555</span>) + ((i &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);  <span class="comment">//相邻位相加</span></span><br><span class="line">i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);  <span class="comment">//相邻为以2为单位相加</span></span><br><span class="line">i = (i &amp; <span class="number">0x0F0F0F0F</span>) + ((i &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F0F0F0F</span>);  <span class="comment">//相邻为以4为单位相加</span></span><br><span class="line">i = (i * (<span class="number">0x01010101</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环移位"><a href="#循环移位" class="headerlink" title="循环移位"></a>循环移位</h4><p>执行32次，每次与1相与，判断结果后累加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mask = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n &amp; mask) != <span class="number">0</span>) &#123;</span><br><span class="line">            bits++;</span><br><span class="line">        &#125;</span><br><span class="line">        mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h4><p>来源官方题解</p><blockquote><p>在二进制表示中，数字 nn 中最低位的 11 总是对应 n - 1n−1 中的 00 。因此，将 nn 和 n - 1n−1 与运算总是能把 nn 中最低位的 11 变成 00 ，并保持其他位不变。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        n &amp;= (n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Integet类库"><a href="#Integet类库" class="headerlink" title="Integet类库"></a>Integet类库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.bitCount(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lowbit公式"><a href="#lowbit公式" class="headerlink" title="lowbit公式"></a>lowbit公式</h4><p>lowbit公式： x &amp; ~x<br>作用是找出数字n中最后一个1出现的位置<br>例如n = 10。用二进制表示就是1010，而它的负数-10用二进制补码表示则为0110，<br>取&amp;后得到的结果为10，这就得到了n最后一个1出现的位置对应的数字。<br>知道lowbit公式后，这个题目就非常简单了。每次通过lowbit公式找到最后一个1对应的数，然后将它减去，直到n为0为止。统计减法操作的次数即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            n -= lowbit(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第191题位1的个数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：00000000000000000000000000001011&lt;br&gt;输出：3&lt;br&gt;解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 ‘1’。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="位运算" scheme="http://yorxika.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>打家劫舍</title>
    <link href="http://yorxika.github.io/2019/12/02/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
    <id>http://yorxika.github.io/2019/12/02/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</id>
    <published>2019-12-02T15:31:39.000Z</published>
    <updated>2019-12-12T12:48:55.783Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第198题打家劫舍</p><blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><a id="more"></a><p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><p>示例 1:</p><p>输入: [1,2,3,1]<br>输出: 4<br>解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>     偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><hr><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>易知，当前房屋的最大收益dp[i] = max(dp[i - 1],dp[i - 2] + nums[i]}<br>即当前房屋的收益要么是上一房屋的累积收益，即当前房间不抢劫，要么是前前房屋的收益加上当前房屋的收益</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> [] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= nums.length ; i++)&#123;</span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[nums.length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h4><p>来自<a href="https://leetcode-cn.com/problems/house-robber/solution/da-jia-jie-she-by-leetcode/" target="_blank" rel="noopener">题解</a></p><p>利用3个变量替代了dp数组，使空间利用率从O(n)降到了O(1)</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> prevMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> currMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : num) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = currMax;</span><br><span class="line">        currMax = Math.max(prevMax + x, currMax);</span><br><span class="line">        prevMax = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currMax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第198题打家劫舍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Linux进程的软中断和管道通信</title>
    <link href="http://yorxika.github.io/2019/12/02/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%92%8C%E7%AE%A1%E9%81%93%E9%80%9A%E4%BF%A1/"/>
    <id>http://yorxika.github.io/2019/12/02/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%92%8C%E7%AE%A1%E9%81%93%E9%80%9A%E4%BF%A1/</id>
    <published>2019-12-02T13:15:55.000Z</published>
    <updated>2019-12-12T12:49:59.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux进程管理命令——进程查看"><a href="#Linux进程管理命令——进程查看" class="headerlink" title="Linux进程管理命令——进程查看"></a>Linux进程管理命令——进程查看</h3><ul><li>ps命令：报告进程标识、用户、CPU时间消耗及其他属性 <ul><li>命令单独使用可以看到前台执行的进程；后台进程可以使用带参 数的ps命令（如ps -ax） <a id="more"></a></li><li>提供进程的一次性查看，结果不连续 </li><li>结果数据很精确，但数据量庞大</li></ul></li><li>top命令：显示CPU占用率为前几位的进程 <ul><li>动态显示，输出结果连续 </li><li>消耗较多的系统资源</li></ul></li><li>pstree命令：列出当前的进程，以及它们的树状结构 <ul><li>将当前的执行程序以树状结构显示，弥补ps命令的不足</li><li>支持指定特定程序(PID)或使用者(USER)作为显示的起始</li></ul></li></ul><h3 id="Linux进程管理命令—进程终止"><a href="#Linux进程管理命令—进程终止" class="headerlink" title="Linux进程管理命令—进程终止"></a>Linux进程管理命令—进程终止</h3><ul><li>终止一个进程或终止一个正在运行的程序 <ul><li>kill命令：根据PID向进程发送信号，缺省操作是停止进程 </li><li>如果进程启动了子进程，只终止父进程，子进程运行中将仍 消耗资源成为“僵尸”进程，可用kill -9强制终止退出 </li><li>pkill命令：终止同一进程组内的所有进程。允许指定要终止的进程名称，而非PID </li><li>Killall命令：与pkill应用方法类似，直接杀死运行中的程 序</li><li>数据库服务器的父进程不能用这些命令杀死（容易产生更多 的文件碎片导致数据库崩溃）</li></ul></li></ul><h3 id="Linux进程控制函数——进程创建"><a href="#Linux进程控制函数——进程创建" class="headerlink" title="Linux进程控制函数——进程创建"></a>Linux进程控制函数——进程创建</h3><h4 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h4><p>pid=fork();<br>fork系统调用用于创建一个新进程，称为子进程，它与进程（称为系统调用fork的进程）同时运行，此进程称为父进程。创建新的子进程后，两个进程将执行fork（）系统调用之后的下一条指令。子进程使用相同的pc（程序计数器），相同的CPU寄存器，在父进程中使用的相同打开文件。</p><div align="center"><img width="500" src="/2019/12/02/进程的软中断和管道通信/1.jpg"></div><p>它不需要参数并返回一个整数值。下面是fork（）返回的不同值。</p><ul><li>负值：创建子进程失败。</li><li>零：返回到新创建的子进程。</li><li>正值：返回父母或来电者。该值包含新创建的子进程的进程ID</li></ul><p><strong>头文件</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;/*#包含&lt;unistd.h&gt;*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;/*#包含&lt;sys/types.h&gt;*/</span></span></span><br></pre></td></tr></table></figure><p><strong>函数原型</strong>:<br>pid_t fork( void);<br>（pid_t 是一个宏定义，其实质是int 被定义在#include&lt;sys/types.h&gt;中）<br>返回值： 若成功调用一次则返回两个值，子进程返回0，父进程返回子进程ID；否则，出错返回-1</p><p><strong>函数说明</strong>：<br>一个现有进程可以调用fork函数创建一个新进程。由fork创建的新进程被称为子进程（child process）。fork函数被调用一次但返回两次。两次返回的唯一区别是子进程中返回0值而父进程中返回子进程ID。<br>子进程是父进程的副本，它将获得父进程数据空间、堆、栈等资源的副本。注意，子进程持有的是上述存储空间的“副本”，这意味着父子进程间不共享这些存储空间。<br>UNIX将复制父进程的地址空间内容给子进程，因此，子进程有了独立的地址空间。在不同的UNIX (Like)系统下，我们无法确定fork之后是子进程先运行还是父进程先运行，这依赖于系统的实现。所以在移植代码的时候我们不应该对此作出任何的假设。</p><p><strong>为什么fork会返回两次？</strong><br>由于在复制时复制了父进程的堆栈段，所以两个进程都停留在fork函数中，等待返回。因此fork函数会返回两次，一次是在父进程中返回，另一次是在子进程中返回，这两次的返回值是不一样的。</p><p>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：<br>(1)在父进程中，fork返回新创建子进程的进程ID；<br>(2)在子进程中，fork返回0；<br>(3)如果出现错误，fork返回一个负值。<br>在fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。<br>引用一位网友的话来解释fork函数返回的值为什么在父子进程中不同。“其实就相当于链表，进程形成了链表，父进程的fork函数返回的值指向子进程的进程id, 因为子进程没有子进程，所以其fork函数返回的值为0.<br>调用fork之后，数据、堆、栈有两份，代码仍然为一份但是这个代码段成为两个进程的共享代码段都从fork函数中返回，箭头表示各自的执行处。当父子进程有一个想要修改数据或者堆栈时，两个进程真正分裂。</p><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>函数族exec() ：启动另外的进程取代当前的进程 </p><ul><li>#include &lt;unistd.h&gt; </li><li>extern char **environ;</li><li>int execl(const char *path, const char *arg, …); </li><li>int execlp(const char *file, const char *arg, …); </li><li>int execle(const char *path, const char *arg, const char *envp[]); </li><li>int execv(const char *path, const char *argv[]); </li><li>int execve(const char *path, const char *argv[], const char *envp[]; </li><li>int execvp(const char *file, const char *argv[]);</li></ul><p>其中只有execve是真正意义上的系统调用，其它都是在此基础上经过包装的库函数。</p><p><strong>exec族函数的作用</strong></p><p>exec函数族的作用是根据指定的文件名找到可执行文件，并用它来取代调用进程的内容，换句话说，就是在调用进程内部执行一个可执行文件。这里的可执行文件既可以是二进制文件，也可以是任何Linux下可执行的脚本文件。<br>与一般情况不同，exec函数族的函数执行成功后不会返回，因为调用进程的实体，包括代码段，数据段和堆栈等都已经被新的内容取代，只留下进程ID等一些表面上的信息仍保持原样，颇有些神似”三十六计”中的”金蝉脱壳”。看上去还是旧的躯壳，却已经注入了新的灵魂。只有调用失败了，它们才会返回一个-1，从原程序的调用点接着往下执行。<br>现在我们应该明白了，Linux下是如何执行新程序的，每当有进程认为自己不能为系统和用户做出任何贡献了，他就可以发挥最后一点余热，调用任何一个exec，让自己以新的面貌重生；或者，更普遍的情况是，如果一个进程想执行另一个程序，它就可以fork出一个新进程，然后调用任何一个exec，这样看起来就好像通过执行应用程序而产生了一个新进程一样。<br>事实上第二种情况被应用得如此普遍，以至于Linux专门为其作了优化，我们已经知道，fork会将调用进程的所有内容原封不动的拷贝到新产生的子进程中去，这些拷贝的动作很消耗时间，而如果fork完之后我们马上就调用exec，这些辛辛苦苦拷贝来的东西又会被立刻抹掉，这看起来非常不划算，于是人们设计了一种”写时拷贝（copy-on-write）”技术，使得fork结束后并不立刻复制父进程的内容，而是到了真正实用的时候才复制，这样如果下一条语句是exec，它就不会白白作无用功了，也就提高了效率。<br>对于新程序的命令行参数和环境表有长度大小的限制，对于linux来讲这个限制是4096个字节。执行了exec函数的进程不改变以下进程特征：</p><ul><li>1.进程ID和父进程ID</li><li>2.实际用户ID和实际组ID</li><li>3.进程组ID和附加组ID</li><li>4.控制终端 </li><li>5.会话ID</li><li>6.时钟预留着时间</li><li>7.当前工作目录和根目录</li><li>8.文件创建屏蔽字和文件锁</li><li>9.信号屏蔽字和未处理信号集</li><li>10.资源限制</li></ul><p><strong>返回值</strong><br>如果执行成功则函数不会返回，执行失败则直接返回-1，失败原因存于errno 中。</p><p><strong>注意</strong><br>大家在平时的编程中，如果用到了exec函数族，一定记得要加错误判断语句。因为与其他系统调用比起来，exec很容易受伤，被执行文件的位置，权限等很多因素都能导致该调用的失败。最常见的错误是：</p><ul><li>1.找不到文件或路径，此时errno被设置为ENOENT；</li><li>2.数组argv和envp忘记用NULL结束，此时errno被设置为EFAULT；</li><li>3.没有对要执行文件的运行权限，此时errno被设置为EACCES。</li><li>l表示以参数列表的形式调用</li><li>v表示以参数数组的方式调用</li><li>e表示可传递环境变量</li><li>p表示PATH中搜索执行的文件，如果给出的不是绝对路径就会去PATH搜索相应名字的文件，如PATH没有设置， 则会默认在/bin,/usr/bin下搜索。</li><li>另：调用时参数必须以NULL结束。原进程打开的文件描述符是不会在exec中关闭的，除非用fcntl设置它们的“执行时关闭标志（close on exec）”而原进程打开的目录流都将在新进程中关闭。</li></ul><h4 id="Linux进程属性操作"><a href="#Linux进程属性操作" class="headerlink" title="Linux进程属性操作"></a>Linux进程属性操作</h4><ul><li>设置进程属性 <ul><li>nice()：改变进程执行的优先级 </li><li>setpgid()：将指定进程的组进程设为指定的组识别码 </li><li>setpgrp()：将目前进程的组进程识别码设为目前进程的进程 识别码，等价于setpgid(0,0) </li><li>setpriority()：设置进程、进程组和用户的执行优先权 </li></ul></li><li>获取进程属性 <ul><li>getpid()：获取目前进程的进程标识 </li><li>getpgid()：获得参数pid指定进程所属的组识别码 </li><li>getpgrp()：获得目前进程所属的组识别号，等价于 </li><li>getpgid(0) </li><li>getpriotity()：获得进程、进程组和用户的执行优先权</li></ul></li></ul><h4 id="进程退出"><a href="#进程退出" class="headerlink" title="进程退出"></a>进程退出</h4><ul><li>正常退出：在main()函数中执行return、调用exit()函数 或_exit()函数 </li><li>异常退出：调用abort()函数、进程收到信号而终止 </li><li>区别 <ul><li>exit是一个函数，有参数，把控制权交给系统 </li><li>return是函数执行完后的返回，将控制权交给调用函数 </li><li>exit是正常终止进程，abort是异常终止 </li><li>exit中参数为0代表进程正常终止，为其他值表示程序执行过程 中有错误发生 </li><li>exit()在头文件stdlib.h中声明，先执行清除操作，再将控制权 返回给内核 </li><li>_exit()在头文件unistd.h中声明，执行后立即返回给内核</li></ul></li></ul><h4 id="等待进程终止"><a href="#等待进程终止" class="headerlink" title="等待进程终止"></a>等待进程终止</h4><p>wait();    waitpid();</p><ul><li><p>① wait() 语法格式： pid=wait(stat_addr);<br> wait()函数使父进程暂停执行，直到它的一个子进程结束为止，该函数 的返回值是终止运行的子进程的PID。参数status所指向的变量存放子 进程的退出码，即从子进程的main函数返回的值或子进程中exit()函数 的参数。如果status不是一个空指针，状态信息将被写入它指向的变量。</p></li><li><p>② waitpid() 语法格式：waitpid(pid_t pid,int * status,int options)<br> 用来等待子进程的结束，但它用于等待某个特定进程结束。<br> 参数pid指明要等待的子进程的PID，参数status的含义与wait()函数中的 status相同。</p><p> 如果在调用 waitpid()时子进程已经结束,则 waitpid()会立即返回子进程结束状态值。 子进程的结束状态值会由参数 status 返回,而子进程的进程识别码也会一起返回。如果不在意结束状态值,则参数 status 可以设成 NULL。参数 pid 为欲等待的子进程识别码.<br> 其他数值意义如下:</p><ul><li><p>pid&lt;-1 等待进程组识别码为 pid 绝对值的任何子进程。</p></li><li><p>pid=-1 等待任何子进程,相当于 wait()。</p></li><li><p>pid=0 等待进程组识别码与目前进程相同的任何子进程。</p></li><li><p>pid&gt;0 等待任何子进程识别码为 pid 的子进程。</p></li><li><p>参数options提供了一些额外的选项来控制waitpid，参数 option 可以为 0 或可以用”|”运算符把它们连接起来使用，比如：<code>ret=waitpid(-1,NULL,WNOHANG | WUNTRACED);</code><br>WNOHANG 若pid指定的子进程没有结束，则waitpid()函数返回0，不予以等待。若结束，则返回该子进程的ID。<br>WUNTRACED 若子进程进入暂停状态，则马上返回，但子进程的结束状态不予以理会。WIFSTOPPED(status)宏确定返回值是否对应与一个暂停子进程。</p><p>子进程的结束状态返回后存于 status,底下有几个宏可判别结束情况:<br>WIFEXITED(status)如果若为正常结束子进程返回的状态，则为真；对于这种情况可执行WEXITSTATUS(status)，取子进程传给exit或_eixt的低8位。<br>WEXITSTATUS(status)取得子进程 exit()返回的结束代码,一般会先用 WIFEXITED 来判断是否正常结束才能使用此宏。<br>WIFSIGNALED(status)若为异常结束子进程返回的状态，则为真；对于这种情况可执行WTERMSIG(status)，取使子进程结束的信号编号。<br>WTERMSIG(status) 取得子进程因信号而中止的信号代码,一般会先用 WIFSIGNALED 来判断后才使用此宏。<br>WIFSTOPPED(status) 若为当前暂停子进程返回的状态，则为真；对于这种情况可执行WSTOPSIG(status)，取使子进程暂停的信号编号。<br>WSTOPSIG(status) 取得引发子进程暂停的信号代码,一般会先用 WIFSTOPPED 来判断后才使用此宏。<br>如果执行成功则返回子进程识别码(PID) ,如果有错误发生则返回<br>返回值-1。失败原因存于 errno 中。</p></li></ul></li></ul><h3 id="进程的软中断通信"><a href="#进程的软中断通信" class="headerlink" title="进程的软中断通信"></a>进程的软中断通信</h3><h4 id="signal"><a href="#signal" class="headerlink" title="signal()"></a>signal()</h4><p><strong>表头文件</strong>#include&lt;signal.h&gt;</p><p><strong>功能</strong>：设置某一信号的对应动作</p><p><strong>函数原型</strong>：void (*signal(int signum,void(* handler)(int)))(int);<br>或者：typedef void (*sig_t)( int );<br>sig_t signal(int signum,sig_t handler);</p><p><strong>参数说明</strong>：<br>第一个参数signum指明了所要处理的信号类型，它可以取除了SIGKILL和SIGSTOP外的任何一种信号。<br>第二个参数handler描述了与信号关联的动作，它可以取以下三种值：</p><ul><li>（1）一个无返回值的函数地址<br> 此函数必须在signal()被调用前申明，handler中为这个函数的名字。当接收到一个类型为signum的信号时，就执行handler 所指定的函数。这个函数应有如下形式的定义：<br> void func(int sig);</li><li>（2）SIG_IGN<br> 这个符号表示忽略该信号，执行了相应的signal()调用后，进程会忽略类型为sig的信号。</li><li>（3）SIG_DFL<br> 这个符号表示恢复系统对信号的默认处理。</li></ul><p><strong>函数说明</strong>：<br>signal()会依参数signum 指定的信号编号来设置该信号的处理函数。当指定的信号到达时就会跳转到参数handler指定的函数执行。当一个信号的信号处理函数执行时，如果进程又接收到了该信号，该信号会自动被储存而不会中断信号处理函数的执行，直到信号处理函数执行完毕再重新调用相应的处理函数。但是如果在信号处理函数执行时进程收到了其它类型的信号，该函数的执行就会被中断。</p><p><strong>返回值</strong>：返回先前的信号处理函数指针，如果有错误则返回SIG_ERR(-1)。</p><p>下面的情况可以产生Signal：</p><ul><li>按下CTRL+C产生SIGINT</li><li>硬件中断，如除0，非法内存访问（SIGSEV）等等</li><li>Kill函数可以对进程发送Signal</li><li>Kill命令。实际上是对Kill函数的一个包装</li><li>软件中断。如当Alarm Clock超时（SIGURG），当Reader中止之后又向管道写数据（SIGPIPE），等等</li></ul><p>Signals:</p><table><thead><tr><th align="center">Signal</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">SIGABRT</td><td align="center">由调用abort函数产生，进程非正常退出</td></tr><tr><td align="center">SIGALRM</td><td align="center">用alarm函数设置的timer超时或setitimer函数设置的interval timer超时</td></tr><tr><td align="center">SIGBUS</td><td align="center">某种特定的硬件异常，通常由内存访问引起</td></tr><tr><td align="center">SIGCANCEL</td><td align="center">由Solaris Thread Library内部使用，通常不会使用</td></tr><tr><td align="center">SIGCHLD</td><td align="center">进程Terminate或Stop的时候，SIGCHLD会发送给它的父进程。缺省情况下该Signal会被忽略</td></tr><tr><td align="center">SIGCONT</td><td align="center">当被stop的进程恢复运行的时候，自动发送</td></tr><tr><td align="center">SIGEMT</td><td align="center">和实现相关的硬件异常</td></tr><tr><td align="center">SIGFPE</td><td align="center">数学相关的异常，如被0除，浮点溢出，等等</td></tr><tr><td align="center">SIGFREEZE</td><td align="center">Solaris专用，Hiberate或者Suspended时候发送</td></tr><tr><td align="center">SIGHUP</td><td align="center">发送给具有Terminal的Controlling Process，当terminal被disconnect时候发送</td></tr><tr><td align="center">SIGILL</td><td align="center">非法指令异常</td></tr><tr><td align="center">SIGINFO</td><td align="center">BSD signal。由Status Key产生，通常是CTRL+T。发送给所有Foreground Group的进程</td></tr><tr><td align="center">SIGINT</td><td align="center">由Interrupt Key产生，通常是CTRL+C或者DELETE。发送给所有ForeGround Group的进程</td></tr><tr><td align="center">SIGIO</td><td align="center">异步IO事件</td></tr><tr><td align="center">SIGIOT</td><td align="center">实现相关的硬件异常，一般对应SIGABRT</td></tr><tr><td align="center">SIGKILL</td><td align="center">无法处理和忽略。中止某个进程</td></tr><tr><td align="center">SIGLWP</td><td align="center">由Solaris Thread Libray内部使用</td></tr><tr><td align="center">SIGPIPE</td><td align="center">在reader中止之后写Pipe的时候发送</td></tr><tr><td align="center">SIGPOLL</td><td align="center">当某个事件发送给Pollable Device的时候发送</td></tr><tr><td align="center">SIGPROF</td><td align="center">Setitimer指定的Profiling Interval Timer所产生</td></tr><tr><td align="center">SIGPWR</td><td align="center">和系统相关。和UPS相关。</td></tr><tr><td align="center">SIGQUIT</td><td align="center">输入Quit Key的时候（CTRL+\）发送给所有Foreground Group的进程</td></tr><tr><td align="center">SIGSEGV</td><td align="center">非法内存访问</td></tr><tr><td align="center">SIGSTKFLT</td><td align="center">Linux专用，数学协处理器的栈异常</td></tr><tr><td align="center">SIGSTOP</td><td align="center">中止进程。无法处理和忽略。</td></tr><tr><td align="center">SIGSYS</td><td align="center">非法系统调用</td></tr><tr><td align="center">SIGTERM</td><td align="center">请求中止进程，kill命令缺省发送</td></tr><tr><td align="center">SIGTHAW</td><td align="center">Solaris专用，从Suspend恢复时候发送</td></tr><tr><td align="center">SIGTRAP</td><td align="center">实现相关的硬件异常。一般是调试异常</td></tr><tr><td align="center">SIGTSTP</td><td align="center">Suspend Key，一般是Ctrl+Z。发送给所有Foreground Group的进程</td></tr><tr><td align="center">SIGTTIN</td><td align="center">当Background Group的进程尝试读取Terminal的时候发送</td></tr><tr><td align="center">SIGTTOU</td><td align="center">当Background Group的进程尝试写Terminal的时候发送</td></tr><tr><td align="center">SIGURG</td><td align="center">当out-of-band data接收的时候可能发送</td></tr><tr><td align="center">SIGUSR1</td><td align="center">用户自定义signal 1</td></tr><tr><td align="center">SIGUSR2</td><td align="center">用户自定义signal 2</td></tr><tr><td align="center">SIGVTALRM</td><td align="center">setitimer函数设置的Virtual Interval Timer超时的时候</td></tr><tr><td align="center">SIGWAITING</td><td align="center">Solaris Thread Library内部实现专用</td></tr><tr><td align="center">SIGWINCH</td><td align="center">当Terminal的窗口大小改变的时候，发送给Foreground Group的所有进程</td></tr><tr><td align="center">SIGXCPU</td><td align="center">当CPU时间限制超时的时候</td></tr><tr><td align="center">SIGXFSZ</td><td align="center">进程超过文件大小限制</td></tr><tr><td align="center">SIGXRES</td><td align="center">Solaris专用，进程超过资源限制的时候发送</td></tr></tbody></table><p><strong>注意</strong></p><ul><li>不要使用低级的或者STDIO.H的IO函数</li><li>不要使用对操作</li><li>不要进行系统调用</li><li>不是浮点信号的时候不要用longjmp</li><li>signal函数是由ISO C定义的。因为ISO C不涉及多进程，进程组以及终端I/O等，所以他对信号的定义非常含糊，以至于对UNIX系统而言几乎毫无用处。</li><li>备注：因为signal的语义与现实有关，所以最好使用sigaction函数替代本函数</li></ul><p>当某个信号出现时，系统有三种处理方式： </p><ul><li>忽略信号：大多数信号使用，但SIGKIL和SIGSTOP不能被忽略 </li><li>捕捉信号：通知内核在某种信号发生时，调用一个用户函数 </li><li>执行系统默认动作：异常终止(abort)、退出(exit)、忽略(ignore)、停 止(stop)或继续(continue)</li></ul><p>*<em>功能 *</em></p><ul><li>发送信号：发送进程把信号送到指定进程信号域的某一位上，如目标进程正在一个可被中断的优先级上睡眠，核心便将其唤醒 </li><li>预置对信号的处理方式：进程处于核心态时，即使受到软中断也不予理睬；只有当它返回到用户态后，才处理软中断信号 </li><li>收受信号的进程按事先规定完成对相应事件的处理</li></ul><h3 id="进程的软中断通信——函数的使用"><a href="#进程的软中断通信——函数的使用" class="headerlink" title="进程的软中断通信——函数的使用"></a>进程的软中断通信——函数的使用</h3><ul><li><p>向一个进程或一组进程发送一个信号：int kill(pid, sig)<br> pid&gt;0时，核心将信号发送给进程pid<br> pid&lt;0时，核心将信号发送给与发送进程同组的所有进程<br> pid=-1时，核心将信号发送给所有用户标识符真正等于发送进程的有 效用户标识号的进程</p></li><li><p>预置信号接收后的处理方式：signal(sig, function)<br> function=1时，屏蔽该类信号<br> function=0时，收到sig信号后终止自己<br> function为非0、非1类整数时，执行用户设置的软中断处理程序</p></li></ul><h3 id="Linux进程间通信—管道和有名管道"><a href="#Linux进程间通信—管道和有名管道" class="headerlink" title="Linux进程间通信—管道和有名管道"></a>Linux进程间通信—管道和有名管道</h3><ul><li>管道用于具有亲缘关系进程间的通信<ul><li>管道是半双工的，数据只能单向流动（双方通信需建立两个管道）</li><li>管道只能用于父子进程或兄弟进程之间</li><li>管道对于管道两端的进程而言就是一个文件，并单独构成一种文件 系统，存在于内存中</li><li>写管道的内容添加在管道缓冲区的末尾，读管道则从缓冲区头部读 出</li></ul></li><li>有名管道在普通管道具备功能基础上，通过给管道命名的 方法变成管道文件，允许无亲缘关系进程间通过访问管道 文件进行通信</li></ul><h4 id="无名管道的使用"><a href="#无名管道的使用" class="headerlink" title="无名管道的使用"></a>无名管道的使用</h4><ul><li>int pipefd[2]; int pipe(pipefd); /*创建无名管道*/<br> pipefd[0]只能用于读;  pipe[1]只能用于写</li></ul><p>pipe函数定义中的fd参数是一个大小为2的一个数组类型的指针。该函数成功时返回0，并将一对打开的文件描述符值填入fd参数指向的数组。失败时返回 -1并设置errno。</p><p>通过pipe函数创建的这两个文件描述符 fd[0] 和 fd[1] 分别构成管道的两端，往 fd[1] 写入的数据可以从 fd[0] 读出。并且 fd[1] 一端只能进行写操作，fd[0] 一端只能进行读操作，不能反过来使用。要实现双向数据传输，可以使用两个管道。</p><p>默认情况下，这一对文件描述符都是阻塞的。此时，如果我们用read系统调用来读取一个空的管道，则read将被阻塞，知道管道内有数据可读；如果我们用write系统调用往一个满的管道中写数据，则write也将被阻塞，直到管道有足够的空闲空间可用(read读取数据后管道中将清除读走的数据)。当然，用户可自行将 fd[0] 和 fd[1] 设置为非阻塞的。</p><p>如果管道的写端文件描述符 fd[1] 的引用计数减少至0，即没有任何进程需要往管道中写入数据，则对该管道的读端文件描述符 fd[0] 的read操作将返回0(管道内不存在数据的情况)，即读到了文件结束标记(EOF，End Of File)；反之，如果管道的读端文件描述符 fd[0] 的引用计数减少至0，即没有任何进程需要从管道读取数据，则针对该管道的写端文件描述符 fd[1] 的write操作将失败，并引发SIGPIPE信号(往读端被关闭的管道或socket连接中写数据)。</p><p>管道内部传输的数据是字节流，这和TCP字节流的概念相同。但它们又存在细微的差别。应用层程序能往一个TCP连接中写入多少字节的数据，取决于对方接受窗口的大小和本端的拥塞窗口的大小。而管道的话本身拥有一个容量限制，它规定如果管道的写端应用程序不将管道中数据读走的话，该管道最多还能被写入多少字节的数据。管道容量的大小默认是65536字节。我们也可以使用fcntl函数来修改管道容量。</p><div align="center"><img width="500" src="/2019/12/02/进程的软中断和管道通信/2.jpg"></div><ol><li><p>父进程调用pipe函数创建管道，得到两个文件描述符fd[0]、fd[1]指向管道的读端和写端。</p></li><li><p>父进程调用fork创建子进程，那么子进程也有两个文件描述符指向同一管道。</p></li><li><p>父进程关闭管道读端，子进程关闭管道写端。父进程可以向管道中写入数据，子进程将管道中的数据读出。由于管道是利用环形队列实现的，数据从写端流入管道，从读端流出，这样就实现了进程间通信。</p></li></ol><ul><li>将数据写入管道：write() <ul><li>函数原型:<code>int write(int handle, void *buf, int nbyte)</code></li><li>管道长度受到限制，管道满时写入操作将被阻塞，直到管道中的 数据被读取 </li><li>fcntl()可将管道设置为非阻塞模式</li></ul></li><li>从管道读取数据：read() <ul><li>函数原型:<code>ssize_t read   (int fd, void *buf, size_t count);</code></li><li>返回值：成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。</li><li>参数：参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移。注意这个读写位置和使用C标准I/O库时的读写位置有可能不同，这个读写位置是记在内核中的，而使用C标准I/O库时的读写位置是用户空间I/O缓冲区中的位置。比如用fgetc读一个字节，fgetc有可能从内核中预读1024个字节到I/O缓冲区中，再返回第一个字节，这时该文件在内核中记录的读写位置是1024，而在FILE结构体中记录的读写位置是1。注意返回值类型是ssize_t，表示有符号的size_t，这样既可以返回正的字节数、0（表示到达文件末尾）也可以返回负值-1（表示出错）。<br>read函数返回时，返回值说明了buf中前多少个字节是刚读上来的。有些情况下，实际读到的字节数（返回值）会小于请求读的字节数count，例如：读常规文件时，在读到count个字节之前已到达文件末尾。例如，距文件末尾还有30个字节而请求读100个字节，则read返回30，下次read将返回0。</li><li>当数据被读取后，数据将自动被管道清除 </li><li>不能由一个进程向多个进程同时传递同一个数据 </li><li>fcntl()可将管道读模式设置为非阻塞模式 </li></ul></li><li>关闭管道：close()<ul><li>函数原型:<code>int close(int fd);</code></li><li>返回值：成功返回0，出错返回-1并设置errno</li><li>参数fd是要关闭的文件描述符。需要说明的是，当一个进程终止时，内核对该进程所有尚未关闭的文件描述符调用close关闭，所以即使用户程序不调用close，在终止时内核也会自动关闭它打开的所有文件。但是对于一个长年累月运行的程序（比如网络服务器），打开的文件描述符一定要记得关闭，否则随着打开的文件越来越多，会占用大量文件描述符和系统资源。</li><li>关闭读端口时，在管道上进行写操作的进程将收到SIGPIPE信号 </li><li>关闭写端口时，进行读操作的read()函数将返回0</li></ul></li></ul><h4 id="管道通信的使用—命名管道的创建与读写"><a href="#管道通信的使用—命名管道的创建与读写" class="headerlink" title="管道通信的使用—命名管道的创建与读写"></a>管道通信的使用—命名管道的创建与读写</h4><ul><li><p>创建命名管道： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int mknod(const char *path, mode_t mod, dev_t dev)； </span><br><span class="line">int mkfifo(const char *path, mode_t mode)；</span><br></pre></td></tr></table></figure></li><li><p>命名管道必须先调用open()将其打开 </p><ul><li>同时用读写方式(O_RDWR)打开时，一定不会导致阻塞 </li><li>以只读方式(O_RDONLY)打开时，调用open()函数的进程将会被 阻塞直到有写方打开管道 </li><li>以写方式(O_WRONLY)打开时，阻塞直到有读方打开管道</li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>实现进程简单控制和利用管道通信</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;  //exex、fork头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;  //signal头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  //wait头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;  //wait头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  //exit头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt; //mutex头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pipefd[<span class="number">2</span>];   <span class="comment">/*创建无名管道,pipefd[0]只能用于读;  pipe[1]只能用于写*/</span></span><br><span class="line"><span class="keyword">int</span> child_1, child_2;  <span class="comment">//用于存储创建的子进程pid</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;  <span class="comment">//进程互斥锁，避免抢占打印输出</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kill_child1</span><span class="params">()</span> </span>&#123; <span class="comment">//父进程杀死子进程1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Child process 1 is killed by parent!\n"</span>);</span><br><span class="line">close(pipefd[<span class="number">1</span>]);  <span class="comment">//关闭管道写端</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);  <span class="comment">//子进程1退出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kill_child2</span><span class="params">()</span> </span>&#123; <span class="comment">//父进程杀死子进程2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Child process 2 is killed by parent!\n"</span>);</span><br><span class="line">close(pipefd[<span class="number">0</span>]);  <span class="comment">//关闭管道读端</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);  <span class="comment">//子进程2退出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kill_childprocess</span><span class="params">()</span> </span>&#123;  <span class="comment">//父进程捕捉到中断信号，用系统调用Kill()向两个子进 程发出信号</span></span><br><span class="line"><span class="keyword">if</span> (kill(child_1, SIGUSR1) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Kill child1 process error!\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (kill(child_2, SIGUSR1) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Kill child2 process error!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rtn; </span><br><span class="line">pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>); <span class="comment">//初始化mutex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建管道 </span></span><br><span class="line"><span class="keyword">if</span> (pipe(pipefd) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Create a nameless pipe error!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建第一个子进程</span></span><br><span class="line"><span class="keyword">switch</span> (child_1 = fork())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> - <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Create child process failed!\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">close(pipefd[<span class="number">0</span>]);  <span class="comment">//子进程1关闭读端</span></span><br><span class="line">signal(SIGINT, SIG_IGN);  <span class="comment">//SIGINT:由Interrupt Key产生，通常是CTRL+C或者DELETE。</span></span><br><span class="line"> <span class="comment">//发送给所有ForeGround Group的进程</span></span><br><span class="line">signal(SIGUSR1, kill_child1);   <span class="comment">// 设置进程处理信号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123; <span class="comment">//死循环里每秒通过管道发送信号给子进程2</span></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">write(pipefd[<span class="number">1</span>], (<span class="keyword">void</span>*)&amp;i, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I have send you %d times!\n"</span>, i);</span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建第二个子进程</span></span><br><span class="line"><span class="keyword">switch</span> (child_2 = fork())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Create child process failed!\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">close(pipefd[<span class="number">1</span>]);  <span class="comment">//子进程关闭写端</span></span><br><span class="line">signal(SIGINT, SIG_IGN);  <span class="comment">//SIGINT:由Interrupt Key产生，通常是CTRL+C或者DELETE。</span></span><br><span class="line"> <span class="comment">//发送给所有ForeGround Group的进程</span></span><br><span class="line">signal(SIGUSR1, kill_child2);   <span class="comment">// 设置进程处理信号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123; <span class="comment">//死循环里每秒通过管道发送信号给子进程2</span></span><br><span class="line">read(pipefd[<span class="number">0</span>], (<span class="keyword">void</span>*)&amp;i, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I have received your message %d times!\n"</span>, i);</span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal(SIGINT,kill_childprocess);  <span class="comment">//当捕捉到中断信号后</span></span><br><span class="line"><span class="comment">//父进程用系统调用Kill()向两个子进 程发出信号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等到两个子进程结束</span></span><br><span class="line">waitpid(child_1, &amp;rtn, <span class="number">0</span>);</span><br><span class="line">waitpid(child_2, &amp;rtn, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭管道</span></span><br><span class="line">close(pipefd[<span class="number">0</span>]);</span><br><span class="line">close(pipefd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Parent Process is killed!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Linux进程管理命令——进程查看&quot;&gt;&lt;a href=&quot;#Linux进程管理命令——进程查看&quot; class=&quot;headerlink&quot; title=&quot;Linux进程管理命令——进程查看&quot;&gt;&lt;/a&gt;Linux进程管理命令——进程查看&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ps命令：报告进程标识、用户、CPU时间消耗及其他属性 &lt;ul&gt;
&lt;li&gt;命令单独使用可以看到前台执行的进程；后台进程可以使用带参 数的ps命令（如ps -ax）&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="进程" scheme="http://yorxika.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="Linux" scheme="http://yorxika.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>动态规划习题</title>
    <link href="http://yorxika.github.io/2019/12/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%A0%E9%A2%98/"/>
    <id>http://yorxika.github.io/2019/12/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%A0%E9%A2%98/</id>
    <published>2019-12-02T08:42:59.000Z</published>
    <updated>2019-12-12T12:49:20.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="矩阵链乘法"><a href="#矩阵链乘法" class="headerlink" title="矩阵链乘法"></a>矩阵链乘法</h2><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>本节给出了一个关于矩阵链相乘问题的动态规划算法。给定一个n个矩阵&lt;A1,A2,……,An&gt;的矩阵链，要计算它们的乘积A1*A2*A3……An。矩阵乘法满足结合律，所以通过加括号，一个矩阵链的乘法可以按照不同的顺序进行。例如，4个矩阵的矩阵链，共有5种加括号的方式：<a id="more"></a></p><div align="center"><img width="200" src="/2019/12/02/动态规划习题/矩阵乘法0.png"></div><p>加括号的方式对矩阵链乘法的时间代价产生巨大的影响。我们先来分析两个矩阵相乘的时间代价。下面的代码给出了两个矩阵相乘的标准算法。</p><div align="center"><img width="300" src="/2019/12/02/动态规划习题/矩阵乘法1.png"></div><p>两个矩阵A和B只有相容，即A的列数等于B的行数时，才能相乘。如果A是 p×q 矩阵，B是 q×r 矩阵，那么乘积C是 p×r 矩阵。分析上面的代码，矩阵乘法的时间代价主要由最内层循环的标量乘法的次数决定，一共需要做 pqr 次标量乘法。</p><p>现在考虑计算矩阵链乘法的时间代价。以3个矩阵为例， 它们的维数分别为10×100、100×5和5×50，有以下两种加括号的方式：</p><ul><li>按((A1·A2)·A3)的顺序计算<br> 先(A1·A2)计算，需要做10×100×5 = 5000次标量乘法，得到的结果矩阵的维度为10×5；再与A3相乘，需要做10×5×50 = 2500次标量乘法。总共需要做5000+2500 = 7500次标量乘法。</li><li>按(A1·(A2·A3))的顺序计算<br> 先计算(A2·A3)，需要做100×5×50 = 25000次标量乘法，得到的结果矩阵的维度为100×50;A1再与(A2·A3的结果相乘，需要做10×100×50 = 50000次标量乘法。总共需要做25000+50000 = 75000次标量乘法。</li></ul><p>可以看到，第(2)种计算顺序的时间代价是第(1)种顺序的10倍。</p><p><strong>矩阵链乘法问题</strong>:给定一个n个矩阵的矩阵链，矩阵Ai的维度为 (1 ≤ i ≤ n)，求一个最优的加括号方案，使得计算矩阵A1*A2*A3……An乘积所需要的标量乘法次数最少。<br>矩阵A1的维度为p0*p1，A2的维度为p1*p2，… …。以此类推，矩阵An的维度为pn-1*pn。矩阵的维度可以构成一个n+1元的数组{p0,p1……,pn}。以这个数组作为算法输入。<br>令P(n)表示n个矩阵的矩阵链的所有加括号的方案的数量。当n =1时，由于只有一个矩阵，所以P(1) = 1。当n ≥ 2时，可以先将矩阵链划分为两个子链&lt;A1,……Ak&gt;和&lt;Ak+1……An&gt;，其中k = 1,2,…, n-1，对两个子链加括号又是规模更小的子问题，因此矩阵链乘法问题满足最优子结构。由此，我们可以得到</p><div align="center"><img width="300" src="/2019/12/02/动态规划习题/矩阵乘法2.png"></div><p>易知道,P(n) = O(2^n)。显然，遍历所有加括号的方案，并不是一个明智的选择，这样的算法至少有一个指数增长的时间复杂度。现在我们用动态规划方法来求解这个问题。</p><p>用m[i, j]表示计算矩阵链&lt;A1,A2,……,An&gt;所需标量乘法次数的最小值。如果i = j，矩阵链中只有一个矩阵，显然m[i, j] = 0。对于i &lt; j 的情况，上文提到，可以先将矩阵链划分为两个子链&lt;Ai,Ai+1,……,Ak&gt;和&lt;Ak+1,Ak+2,……,Aj&gt;。左子链的乘积是一个矩阵，右子链的乘积是一个矩阵。假设两个子链的最优解已知，它们分别为m[i, k]和m[k+1, j ]，并且可以知道两个子链的结果相乘需要次pi-1·pk·pj 标量乘法。于是，可以得到m[i,j] = m[i,k] + m[k + 1,j] + pi-1·pk·pj。<br>矩阵链的划分点k可以取值i, i+1,…, j-1，我们需要检查k的所有可能的取值情况，并从中找到最优解。于是有</p><div align="center"><img width="400" src="/2019/12/02/动态规划习题/矩阵乘法3.png"></div><p>我们已经确立了问题的最优子结构，现在要合理安排子问题的求解顺序。子问题的规模是用相应的子链中矩阵的个数来度量的。我们要计算m[i, j]，只依赖于更短的子链的求解结果。因此，我们可以按照长度递增的顺序求解矩阵链乘法问题。另外，还需要在求解过程中记录下每个子问题的最优解的分割点位置k。以下是代码。</p><div align="center"><img width="500" src="/2019/12/02/动态规划习题/矩阵乘法4.png"></div><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>T15.2-1 对矩阵链&lt;5,10,3,12,5,50,6&gt;，求矩阵链最有括号化方案</p><!--more--><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String [] A = &#123;<span class="string">"A0"</span>,<span class="string">"A1"</span>,<span class="string">"A2"</span>,<span class="string">"A3"</span>,<span class="string">"A4"</span>,<span class="string">"A5"</span>,<span class="string">"A6"</span>&#125;;<span class="comment">//六个矩阵A1～A6 但是伪码是从下标1开始计算，因此在首位填充0</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> [] p = &#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">50</span>,<span class="number">6</span>&#125;;  <span class="comment">//矩阵维数为p[i-1]*p[i]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[][] matrix_chain_order(<span class="keyword">int</span> [] p,<span class="keyword">int</span> [][] matrix,<span class="keyword">int</span> [][] brakcet,<span class="keyword">int</span> n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">matrix[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n- len + <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">matrix[i][j] = Integer.MAX_VALUE; <span class="comment">//设置为无穷大</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j - <span class="number">1</span>; k++)&#123;</span><br><span class="line"><span class="keyword">int</span> mulTimes = matrix[i][k] + matrix[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>]*p[k]*p[j];</span><br><span class="line"><span class="keyword">if</span>(mulTimes &lt; matrix[i][j])&#123;</span><br><span class="line">matrix[i][j] = mulTimes;</span><br><span class="line">brakcet[i][j] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n;j++)</span><br><span class="line">System.out.print(matrix[i][j] + <span class="string">" "</span>);</span><br><span class="line">System.out.println(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;= n;j++)</span><br><span class="line">System.out.print(brakcet[i][j] + <span class="string">" "</span>);</span><br><span class="line">System.out.println(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> brakcet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_optimal_parens</span><span class="params">(<span class="keyword">int</span> [][] brakcet,<span class="keyword">int</span> i ,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i == j)</span><br><span class="line">System.out.print(A[i]);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">System.out.print(<span class="string">"("</span>);</span><br><span class="line">print_optimal_parens(brakcet,i,brakcet[i][j]);</span><br><span class="line">print_optimal_parens(brakcet,brakcet[i][j] + <span class="number">1</span>,j);</span><br><span class="line">System.out.print(<span class="string">")"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> [][] brakcet = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">6</span> ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;= <span class="number">6</span> ;j++)</span><br><span class="line">matrix[i][j] = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">brakcet = matrix_chain_order(p,matrix,brakcet,<span class="number">6</span>);</span><br><span class="line">print_optimal_parens(brakcet,<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><blockquote><p>0 150 330 405 1655 2010<br>2147483647 0 360 330 2430 1950<br>2147483647 2147483647 0 180 930 1770<br>2147483647 2147483647 2147483647 0 3000 1860<br>2147483647 2147483647 2147483647 2147483647 0 1500<br>2147483647 2147483647 2147483647 2147483647 2147483647 0 </p><p>0 1 2 2 4 2<br>0 0 2 2 2 2<br>0 0 0 3 4 4<br>0 0 0 0 4 4<br>0 0 0 0 0 5<br>0 0 0 0 0 0  </p><p>((A1A2)((A3A4)(A5A6)))</p></blockquote><h2 id="最优二叉搜索树"><a href="#最优二叉搜索树" class="headerlink" title="最优二叉搜索树"></a>最优二叉搜索树</h2><h3 id="笔记-1"><a href="#笔记-1" class="headerlink" title="笔记"></a>笔记</h3><p>二叉搜索树满足如下性质：假设x xx是二叉搜索树中的一个结点。如果l ll是x xx的左子树的一个结点，那么l.key≤x.key l.key ≤ x.keyl.key≤x.key。如果r rr是x xx的右子树的一个结点，那么r.key≥x.key r.key ≥ x.keyr.key≥x.key。<br>也就是说，二叉搜索树中的任意一个结点，它的左子树中的所有结点都不大于它，它的右子树中的所有结点都不小于它。下图给出了一个二叉搜索树的例子。</p><div align="center"><img width="200" src="/2019/12/02/动态规划习题/二叉搜索树0.png"></div><p><strong>最优二叉搜索树</strong>(Optimal Binary Search Tree)问题描述如下。给定一个n nn个不同关键字的已排序的序列K[1..n]=&lt;k1,k2,…,kn&gt;（因此k1&lt;k2&lt;…&lt;kn），我们希望用这些关键字构造一个二叉搜索树。对每个关键字ki,都有一个概率pi表示其搜索概率。搜索过程中有可能遇到不在K[1..n]中的元素，因此我们还有n+1个元素的“伪关键字”序列D[0..n]=&lt;d0,d1,d2,…,dn&gt; ，表示搜索过程中可能遇到的所有不在K[1..n] K[1..n]K[1..n]中的元素。d0表示所有小于k1的元素；dn 表示所有大于kn 的元素；对i=1,2,…,n−1 i = 1, 2, …, n-1，di表示所有在ki到ki+1之间的元素。对每个伪关键字di，也有一个概率qi 表示对应的搜索概率。在二叉搜索树中，伪关键字di 必然出现在叶结点上，关键字ki 必然出现在非叶结点上。每次搜索要么成功（找到某个关键字ki），要么失败（找到某个伪关键字di）。关键字和伪关键字的概率满足：</p><div align="center"><img width="150" src="/2019/12/02/动态规划习题/二叉搜索树1.png"></div><p>假定一次搜索的代价等于访问的结点数，也就是此次搜索找到的结点在二叉搜索树中的深度再加1 11。给定一棵二叉搜索树T TT，我们可以确定进行一次搜索的期望代价。</p><div align="center"><img width="350" src="/2019/12/02/动态规划习题/二叉搜索树2.png"></div><p>其中depthT表示一个结点在二叉搜索树T中的深度。</p><p>对于一组给定的关键字和伪关键字，以及它们对应的概率，我们希望构造一棵期望搜索代价最小的二叉搜索树，这称之为最优二叉搜索树。现在我们用动态规划方法来求解最优二叉搜索树问题。</p><p>首先我们描述最优二叉搜索树问题的最优子结构：假设由关键字子序列K[i..j]=&lt;ki,…,kj&gt; 和伪关键字子序列D[i−1..j]=&lt;di−1,…,dj&gt; 构成的一棵最优二叉搜索树以kr(i≤r≤j)为根结点。那么它的左子树由子序列K[i..r−1]和D[i−1..r−1]构成，这颗左子树显然也是一棵最优二叉搜索树。同样，它的右子树由子序列K[r+1..j]和D[r..j]构成，这颗右子树显然也是一棵最优二叉搜索树。<br>这里有一个值得注意的细节—空子树。如果包含子序列K[i..j]的最优二叉搜索树以ki为根结点。根据最优子结构性质，它的左子树包含子序列K[i..i−1]，这个子序列不包含任何关键字。但请注意，左子树仍然包含一个伪关键字di−1。同理，如果选择kj为根结点，那么右子树也不包含任何关键字，而只包含一个伪关键字dj。<br>用e[i,j] 表示包含关键字子序列K[i..j]=&lt;ki,…,kj&gt; 的最优二叉搜索树的期望搜索代价。我们最终希望计算出e[1,n]。<br>对于j=i−1的情况，由于子树只包含伪关键字di−1 ，所以期望搜索代价为e[i,i−1]=qi−1。<br>当j≥i时，我们要遍历以ki,ki+1,…,kj作为根结点的情况，然后从中选择期望搜索代价最小的情况作为子问题的最优解。假设选择kr(i≤r≤j)作为根结点，那么子序列K[i..r−1]构成的最优二叉搜索树作为左子树，左子树的期望搜索代价为e[i,r−1]；子序列K[r+1..j]构成的最优二叉搜索树作为右子树，右子树的期望搜索代价为e[r+1,j]。<br>当一棵子树链接到一个根结点上时，子树中所有结点的深度都增加了1 ，那么这棵子树的期望搜索代价的增加值为它的所有结点的概率之和。对于一棵包含子序列K[i..j]的子树，所有结点的概率之和为</p><div align="center"><img width="200" src="/2019/12/02/动态规划习题/二叉搜索树3.png"></div>接上文，若kr(i≤r≤j)作为包含关键字子序列K[i..j]的最优二叉搜索树的根结点，可以得到如下公式e[i,j]=pr+(e[i,r−1]+w[i,r−1])+(e[r+1,j]+w[r+1,j]) 由于w[i,j]=w[i,r−1]+pr+w[r+1,j]，所以上式可重写为e[i,j]=e[i,r−1]+e[r+1,j]+w[i,j]我们要遍历以ki,ki+1,…,kj作为根结点的情况，并选择期望搜索代价最小的情况作为子问题的最优解。于是我们可以得到下面的递归式。<div align="center"><img width="350" src="/2019/12/02/动态规划习题/二叉搜索树4.png"></div><p>e[i,j]给出了最优二叉搜索树子问题的期望搜索代价。我们还需要记录最优二叉搜索树子问题的根结点，用root[i,j]来记录。<br>根据上文给出的递归式，我们可以采用自下而上的动态规划方法来求解最优二叉搜索树问题。下面给出了伪代码。</p><div align="center"><img width="500" src="/2019/12/02/动态规划习题/二叉搜索树5.png"></div><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>T15.5-2:若7 77个关键字的概率如下所示，求其最优二叉搜索树的结构和代价。</p><table><thead><tr><th align="center">i</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">pi</td><td align="center"></td><td align="center">0.04</td><td align="center">0.06</td><td align="center">0.08</td><td align="center">0.02</td><td align="center">0.10</td><td align="center">0.12</td><td align="center">0.14</td></tr><tr><td align="center">qi</td><td align="center">0.06</td><td align="center">0.06</td><td align="center">0.06</td><td align="center">0.06</td><td align="center">0.05</td><td align="center">0.05</td><td align="center">0.05</td><td align="center">0.05</td></tr></tbody></table><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">optimal_bst</span><span class="params">(<span class="keyword">double</span> [] p,<span class="keyword">double</span> [] q,<span class="keyword">double</span> [][] e,<span class="keyword">double</span> [][] w, <span class="keyword">int</span> [][] root)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = p.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">e[i][i-<span class="number">1</span>] = q[i-<span class="number">1</span>];</span><br><span class="line">w[i][i-<span class="number">1</span>] = q[i-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;l++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> start = <span class="number">1</span>;start&lt;=n-l+<span class="number">1</span>;start++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = start + l -<span class="number">1</span>;</span><br><span class="line">w[start][end] = w[start][end-<span class="number">1</span>] + p[end] + q[end];</span><br><span class="line">e[start][end] = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r = start;r&lt;=end;r++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> t = e[start][r-<span class="number">1</span>] + e[r+<span class="number">1</span>][end]  + w[start][end];</span><br><span class="line"><span class="keyword">if</span>(t&lt;e[start][end])</span><br><span class="line">&#123;</span><br><span class="line">e[start][end] = t;</span><br><span class="line">root[start][end] = r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> [][] root,<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p == -<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="string">"k"</span> + root[a][b] + <span class="string">"为根"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r = root[a][b];</span><br><span class="line"><span class="comment">//左子树</span></span><br><span class="line"><span class="keyword">if</span>(r == a)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"d"</span> + (a - <span class="number">1</span>) + <span class="string">"是k"</span> + a + <span class="string">"d的左孩子"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"k"</span> + root[a][r-<span class="number">1</span>] + <span class="string">"是k"</span> + r +<span class="string">"的左孩子"</span>);</span><br><span class="line">print(root,a,r-<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右子树</span></span><br><span class="line"><span class="keyword">if</span>(r == b)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"d"</span> + b + <span class="string">"是k"</span> + b + <span class="string">"的右孩子"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"k"</span> + root[r+<span class="number">1</span>][b] + <span class="string">"是k"</span> + r + <span class="string">"的右孩子"</span>);</span><br><span class="line">print(root,r+<span class="number">1</span>,b,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> [] p1 = &#123;<span class="number">0</span>,<span class="number">0.04</span>,<span class="number">0.06</span>,<span class="number">0.08</span>,<span class="number">0.02</span>,<span class="number">0.10</span>,<span class="number">0.12</span>,<span class="number">0.14</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> [] q1 = &#123;<span class="number">0.06</span>,<span class="number">0.06</span>,<span class="number">0.06</span>,<span class="number">0.06</span>,<span class="number">0.05</span>,<span class="number">0.05</span>,<span class="number">0.05</span>,<span class="number">0.05</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> [] p = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">double</span> [] q = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">8</span>];</span><br><span class="line">System.arraycopy(p1,<span class="number">0</span>,p,<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line">System.arraycopy(q1,<span class="number">0</span>,q,<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> [][] e = <span class="keyword">new</span> <span class="keyword">double</span>[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> [][] root = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">2</span>][n + <span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> [][] w = <span class="keyword">new</span> <span class="keyword">double</span>[n + <span class="number">2</span>][n + <span class="number">2</span>];</span><br><span class="line">optimal_bst(p,q,e,w,root);</span><br><span class="line">print(root,<span class="number">1</span>,n,-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><blockquote><p>k5为根<br>k2是k5的左孩子<br>k1是k2的左孩子<br>d0是k1d的左孩子<br>d1是k1的右孩子<br>k3是k2的右孩子<br>d2是k3d的左孩子<br>k4是k3的右孩子<br>d3是k4d的左孩子<br>d4是k4的右孩子<br>k7是k5的右孩子<br>k6是k7的左孩子<br>d5是k6d的左孩子<br>d6是k6的右孩子<br>d7是k7的右孩子</p></blockquote><p>最优二叉搜索树如下所示。期望搜索代价为3.12。</p><div align="center"><img width="400" src="/2019/12/02/动态规划习题/二叉搜索树6.png"></div><div align="center"><img width="500" src="/2019/12/02/动态规划习题/二叉搜索树7.png"></div><div align="center"><img width="500" src="/2019/12/02/动态规划习题/二叉搜索树8.png"></div><div align="center"><img width="500" src="/2019/12/02/动态规划习题/二叉搜索树9.png"></div><p>图片及部分内容来自<a href="https://blog.csdn.net/yangtzhou" target="_blank" rel="noopener">yangtzhou</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&quot;矩阵链乘法&quot;&gt;&lt;a href=&quot;#矩阵链乘法&quot; class=&quot;headerlink&quot; title=&quot;矩阵链乘法&quot;&gt;&lt;/a&gt;矩阵链乘法&lt;/h2&gt;&lt;h3 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h3&gt;&lt;p&gt;本节给出了一个关于矩阵链相乘问题的动态规划算法。给定一个n个矩阵&amp;lt;A1,A2,……,An&amp;gt;的矩阵链，要计算它们的乘积A1*A2*A3……An。矩阵乘法满足结合律，所以通过加括号，一个矩阵链的乘法可以按照不同的顺序进行。例如，4个矩阵的矩阵链，共有5种加括号的方式：&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法导论" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
      <category term="算法" scheme="http://yorxika.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LRU缓存机制</title>
    <link href="http://yorxika.github.io/2019/12/01/LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yorxika.github.io/2019/12/01/LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</id>
    <published>2019-12-01T15:57:16.000Z</published>
    <updated>2019-12-12T12:47:06.749Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第146题LRU缓存机制</p><blockquote><p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<a id="more"></a><br>写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p><p>示例:</p><p>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );</p><p>cache.put(1, 1);<br>cache.put(2, 2);<br>cache.get(1);       // 返回  1<br>cache.put(3, 3);    // 该操作会使得密钥 2 作废<br>cache.get(2);       // 返回 -1 (未找到)<br>cache.put(4, 4);    // 该操作会使得密钥 1 作废<br>cache.get(1);       // 返回 -1 (未找到)<br>cache.get(3);       // 返回  3<br>cache.get(4);       // 返回  4</p></blockquote><hr><h3 id="硬件实现的4路组相联-LRU算法"><a href="#硬件实现的4路组相联-LRU算法" class="headerlink" title="硬件实现的4路组相联 + LRU算法"></a>硬件实现的4路组相联 + LRU算法</h3><p>参考组原实验mooc</p><p>输入输出引脚图：</p><div align="center"><img width="800" src="/2019/12/01/LRU缓存机制/3.jpg"></div><p>8个cache槽分2组4路：</p><div align="center"><img width="800" src="/2019/12/01/LRU缓存机制/1.jpg"></div><p>替换算法LRU：</p><div align="center"><img width="800" src="/2019/12/01/LRU缓存机制/2.jpg"></div><p>测试图：</p><div align="center"><img width="800" src="/2019/12/01/LRU缓存机制/4.jpg"></div><h3 id="软件实现"><a href="#软件实现" class="headerlink" title="软件实现"></a>软件实现</h3><h4 id="哈希链表实现"><a href="#哈希链表实现" class="headerlink" title="哈希链表实现"></a>哈希链表实现</h4><p>来源<a href="https://leetcode-cn.com/problems/lru-cache/solution/lru-ce-lue-xiang-jie-he-shi-xian-by-labuladong/" target="_blank" rel="noopener">题解</a></p><p>LRU 算法实际上是让你设计数据结构：首先要接收一个 capacity 参数作为缓存的最大容量，然后实现两个 API，一个是 put(key, val) 方法存入键值对，另一个是 get(key) 方法获取 key 对应的 val，如果 key 不存在则返回 -1。</p><p>注意哦，get 和 put 方法必须都是 O(1)O(1) 的时间复杂度，我们举个具体例子来看看 LRU 算法怎么工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 缓存容量为 2 */</span></span><br><span class="line">LRUCache cache = <span class="keyword">new</span> LRUCache(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 你可以把 cache 理解成一个队列</span></span><br><span class="line"><span class="comment">// 假设左边是队头，右边是队尾</span></span><br><span class="line"><span class="comment">// 最近使用的排在队头，久未使用的排在队尾</span></span><br><span class="line"><span class="comment">// 圆括号表示键值对 (key, val)</span></span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// cache = [(1, 1)]</span></span><br><span class="line">cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// cache = [(2, 2), (1, 1)]</span></span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// 返回 1</span></span><br><span class="line"><span class="comment">// cache = [(1, 1), (2, 2)]</span></span><br><span class="line"><span class="comment">// 解释：因为最近访问了键 1，所以提前至队头</span></span><br><span class="line"><span class="comment">// 返回键 1 对应的值 1</span></span><br><span class="line">cache.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// cache = [(3, 3), (1, 1)]</span></span><br><span class="line"><span class="comment">// 解释：缓存容量已满，需要删除内容空出位置</span></span><br><span class="line"><span class="comment">// 优先删除久未使用的数据，也就是队尾的数据</span></span><br><span class="line"><span class="comment">// 然后把新的数据插入队头</span></span><br><span class="line">cache.get(<span class="number">2</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line"><span class="comment">// cache = [(3, 3), (1, 1)]</span></span><br><span class="line"><span class="comment">// 解释：cache 中不存在键为 2 的数据</span></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="number">4</span>);    </span><br><span class="line"><span class="comment">// cache = [(1, 4), (3, 3)]</span></span><br><span class="line"><span class="comment">// 解释：键 1 已存在，把原始值 1 覆盖为 4</span></span><br><span class="line"><span class="comment">// 不要忘了也要将键值对提前到队头</span></span><br></pre></td></tr></table></figure><p>从流程里可以看到，不需要设计计数器来实现对每次未命中的cache槽做计数+1，淘汰时将数值最大的淘汰。<br>在put时将元素放到了队头，每次get都会将元素提前，我们要做的就是把队尾元素替换掉。</p><p>LRU 缓存算法的核心数据结构就是哈希链表，双向链表和哈希表的结合体。这个数据结构长这样：</p><div align="center"><img width="300" src="/2019/12/01/LRU缓存机制/5.jpg"></div><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> key,val;</span><br><span class="line">    <span class="keyword">public</span> Node next,prior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> key,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleList</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head,tail ; <span class="comment">//头尾结点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//链表元素数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);  <span class="comment">//头尾虚结点</span></span><br><span class="line">        tail = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prior = head;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再头部添加结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">        x.next = head.next;</span><br><span class="line">        x.prior = head;</span><br><span class="line">        head.next.prior = x;</span><br><span class="line">        head.next = x;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除链表中的结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">        x.prior.next = x.next;</span><br><span class="line">        x.next.prior = x.prior;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除链表中最后一个节点，并返回该节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//当前链表没有结点</span></span><br><span class="line">        <span class="keyword">if</span>(tail.prior == head)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Node last = tail.prior;</span><br><span class="line">        remove(last);</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回链表长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  HashMap&lt;Integer ,Node&gt; map;</span><br><span class="line">    <span class="keyword">private</span> DoubleList cache; <span class="comment">//双向链表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cache = <span class="keyword">new</span> DoubleList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key))</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> val = map.get(key).val;</span><br><span class="line">        <span class="comment">//利用put方法把数据提前</span></span><br><span class="line">        put(key,val);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 先把新节点 x 做出来</span></span><br><span class="line">        Node x = <span class="keyword">new</span> Node(key, val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 删除旧的节点，新的插到头部</span></span><br><span class="line">            cache.remove(map.get(key));</span><br><span class="line">            cache.addFirst(x);</span><br><span class="line">            <span class="comment">// 更新 map 中对应的数据</span></span><br><span class="line">            map.put(key, x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (capacity == cache.getSize()) &#123;</span><br><span class="line">                <span class="comment">// 删除链表最后一个数据</span></span><br><span class="line">                Node last = cache.removeLast();</span><br><span class="line">                map.remove(last.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 直接添加到头部</span></span><br><span class="line">            cache.addFirst(x);</span><br><span class="line">            map.put(key, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有序字典"><a href="#有序字典" class="headerlink" title="有序字典"></a>有序字典</h4><p>来源<a href="https://leetcode-cn.com/problems/lru-cache/solution/lru-huan-cun-ji-zhi-by-leetcode/" target="_blank" rel="noopener">题解</a></p><p>利用了LinkedHashMap这样一种数据结构<br>在构造器里第三个参数accessOrder,设置为false表示不是访问顺序而是插入顺序存储的，这也是默认值，表示LinkedHashMap中存储的顺序是按照调用put方法插入的顺序进行排序的;true则是按照<strong>访问顺序</strong>，访问过后的元素会到链表的末尾。</p><p>0.75F表示负载因子<br>HashMap有一个初始容量大小，默认是16<br>static final int DEAFULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16<br>为了减少冲突概率，当HashMap的数组长度达到一个临界值就会触发扩容，把所有元素rehash再放回容器中，这是一个非常耗时的操作。<br>而这个临界值由负载因子和当前的容量大小来决定：<br>DEFAULT_INITIAL_CAPACITY<em>DEFAULT_LOAD_FACTOR<br>即默认情况下数组长度是16</em>0.75=12时，触发扩容操作。<br>所以使用hash容器时尽量预估自己的数据量来设置初始值。<br>在理想情况下，使用随机哈希吗，节点出现的频率在hash桶中遵循泊松分布，同时给出了桶中元素的个数和概率的对照表。<br>从上表可以看出当桶中元素到达8个的时候，概率已经变得非常小，也就是说用0.75作为负载因子，每个碰撞位置的链表长度超过8个是几乎不可能的。<br>hash容器指定初始容量尽量为2的幂次方。<br>HashMap负载因子为0.75是空间和时间成本的一种折中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(capacity, <span class="number">0.75F</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LRUCache 对象会以如下语句构造和调用:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第146题LRU缓存机制&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。&lt;/p&gt;
&lt;p&gt;获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数据结构设计" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="设计" scheme="http://yorxika.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="cache" scheme="http://yorxika.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>加油站</title>
    <link href="http://yorxika.github.io/2019/11/30/%E5%8A%A0%E6%B2%B9%E7%AB%99/"/>
    <id>http://yorxika.github.io/2019/11/30/%E5%8A%A0%E6%B2%B9%E7%AB%99/</id>
    <published>2019-11-30T15:39:45.000Z</published>
    <updated>2019-12-12T12:50:42.179Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第134题加油站</p><blockquote><p>在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。<br>你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。<br>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。<a id="more"></a></p><p>说明: </p><ul><li>如果题目有解，该答案即为唯一答案。</li><li>输入数组均为非空数组，且长度相同。</li><li>输入数组中的元素均为非负数。<br>示例 1:</li></ul><p>输入:<br>gas  = [1,2,3,4,5]<br>cost = [3,4,5,1,2]</p><p>输出: 3</p><p>解释:<br>从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油<br>开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油<br>开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油<br>开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油<br>开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油<br>开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。<br>因此，3 可为起始索引。</p></blockquote><hr><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>这题其实和之前的53题<a href="https://yorxika.github.io/2019/11/05/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/">最大子序和是一样的</a></p><p>先考虑每个站点能剩多少油 那么就是 get[i] - cost[i]，因而能不能环形一圈就是判断所有的剩余的油加起来的值是否大于0<br>接下来找从哪出发能环绕一圈。如果当前结点的耗油量为负，或者总的耗油量为负，那么就考虑下一个位置作为起点。因为从题目我们可以知道如果题目有解，该答案即为唯一答案，因而如果在总剩余油量≥0的情况下，唯一解的每一步剩余油量都是≥0的，如果是等于0的话，就不会是唯一解了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>; <span class="comment">//位置</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rest = <span class="number">0</span>; <span class="comment">//剩余油量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; gas.length; i++)&#123;</span><br><span class="line">        rest += gas[i] - cost[i];</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sum += gas[i] - cost[i];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sum = gas[i] - cost[i];</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rest&gt;= <span class="number">0</span>? pos : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重循环"><a href="#双重循环" class="headerlink" title="双重循环"></a>双重循环</h4><p>最简单的无非就是求差后，对每一个元素从该位置开始进行遍历，当剩余油量小于0时continue，直到找到所求.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>; <span class="comment">//位置</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> [] rest  = <span class="keyword">new</span> <span class="keyword">int</span>[gas.length]; <span class="comment">//剩余油量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; gas.length; i++)&#123;</span><br><span class="line">        rest[i] += gas[i] - cost[i];</span><br><span class="line">        sum += rest[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; gas.length ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rest[i] &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i ; j &lt; i + gas.length; j++)&#123;</span><br><span class="line">            sum += rest[j % gas.length];</span><br><span class="line">            <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            pos = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第134题加油站&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。&lt;br&gt;你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。&lt;br&gt;如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>克隆图</title>
    <link href="http://yorxika.github.io/2019/11/30/%E5%85%8B%E9%9A%86%E5%9B%BE/"/>
    <id>http://yorxika.github.io/2019/11/30/%E5%85%8B%E9%9A%86%E5%9B%BE/</id>
    <published>2019-11-30T14:46:56.000Z</published>
    <updated>2019-12-12T12:50:50.754Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第133题克隆图</p><blockquote><p>给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。</p></blockquote><a id="more"></a><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><p>class Node {<br>    public int val;<br>    public List<node> neighbors;</node></p><pre><code>public Node() {}public Node(int _val,List&lt;Node&gt; _neighbors) {    val = _val;    neighbors = _neighbors;}</code></pre><p>};</p><h4 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h4><p>这题的本质就是对图的遍历，在遍历时怎么把图的邻居添加进去。</p><p>首先对图进行一个 BFS，把所有节点 new 出来，不处理 neighbors，并且把所有的节点存到 map 中。<br>然后再对图做一个 BFS，因为此时所有的节点已经创建了，只需要更新所有节点的 neighbors。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">cloneGraph</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">//队列用来判断是否遍历完所有结点</span></span><br><span class="line">    Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//map key值为原结点，val值为克隆结点</span></span><br><span class="line">    Node new_node = <span class="keyword">new</span> Node(node.val, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">    queue.offer(node);</span><br><span class="line">    <span class="comment">//头结点入队</span></span><br><span class="line">    map.put(node, new_node);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        Node cur = queue.poll();</span><br><span class="line">        <span class="keyword">for</span> (Node n : cur.neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(n)) &#123;</span><br><span class="line">                <span class="comment">//不包含的结点加入到map里</span></span><br><span class="line">                queue.offer(n);</span><br><span class="line">                <span class="comment">//同把该结点入队</span></span><br><span class="line">                Node tmp = <span class="keyword">new</span> Node(n.val, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">                map.put(n, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(cur).neighbors.add(map.get(n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><p>同样利用一个map来存储原结点和克隆结点，接着对第一个结点进行深度优先搜索，出口为当所有结点都在map时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">cloneGraph</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    HashMap&lt;Node,Node&gt; map = <span class="keyword">new</span> HashMap&lt;Node,Node&gt;();</span><br><span class="line">    node = dfs(node,map);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">dfs</span><span class="params">(Node node,HashMap&lt;Node,Node&gt; map)</span></span>&#123;</span><br><span class="line">   <span class="comment">//当所有结点都在map里时退出递归</span></span><br><span class="line">    Node aNode = <span class="keyword">new</span> Node(node.val,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    map.put(node,aNode);</span><br><span class="line">    <span class="keyword">for</span>(Node neighbours : node.neighbors)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(neighbours))</span><br><span class="line">            <span class="comment">//如果没有包含此结点，从此结点一直往下遍历</span></span><br><span class="line">            neighbours = dfs(neighbours,map);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//如果包含了此结点，返回其克隆结点</span></span><br><span class="line">            neighbours = map.get(neighbours);</span><br><span class="line">        aNode.neighbors.add(neighbours);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第133题克隆图&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="图" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%9B%BE/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="图" scheme="http://yorxika.github.io/tags/%E5%9B%BE/"/>
    
      <category term="深度优先搜索" scheme="http://yorxika.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>排序链表</title>
    <link href="http://yorxika.github.io/2019/11/30/%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://yorxika.github.io/2019/11/30/%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</id>
    <published>2019-11-30T01:39:03.000Z</published>
    <updated>2019-12-12T12:51:04.202Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第148题排序链表</p><blockquote><p>在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p><p>示例 1:</p><p>输入: 4-&gt;2-&gt;1-&gt;3<br>输出: 1-&gt;2-&gt;3-&gt;4 <a id="more"></a></p></blockquote><hr><h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h4><p>将所有结点放入一个Hashset里，最后依次取出最小值，倒数第二个用例时超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    Set&lt;ListNode&gt; list = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        list.add(p1);</span><br><span class="line">        <span class="comment">//System.out.print(p1);</span></span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//Iterator&lt;Map.Entry&lt;ListNode,Integer&gt;&gt;  it = list.entrySet().iterator();</span></span><br><span class="line">    <span class="keyword">while</span> (!list.isEmpty())&#123;</span><br><span class="line">        Iterator&lt;ListNode&gt;  it = list.iterator();</span><br><span class="line">        ListNode p2 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> val = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            ListNode temp = it.next();</span><br><span class="line">            <span class="keyword">if</span>(temp.val &lt; val)&#123;</span><br><span class="line">                p2 = temp;</span><br><span class="line">                val = temp.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            newHead.val = p2.val;</span><br><span class="line">            k++;</span><br><span class="line">            p1 = newHead;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p1.next = p2;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        list.remove(p2);</span><br><span class="line">    &#125;</span><br><span class="line">    p1.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归归并排序"><a href="#递归归并排序" class="headerlink" title="递归归并排序"></a>递归归并排序</h4><p>来自<a href="https://leetcode-cn.com/problems/sort-list/solution/sort-list-gui-bing-pai-xu-lian-biao-by-jyd/" target="_blank" rel="noopener">题解</a></p><blockquote><p>通过递归实现链表归并排序，有以下两个环节：</p></blockquote><blockquote><ul><li>分割 cut 环节： 找到当前链表中点，并从中点将链表断开（以便在下次递归 cut 时，链表片段拥有正确边界）；<ul><li>我们使用 fast,slow 快慢双指针法，奇数个节点找到中点，偶数个节点找到中心左边的节点。<ul><li>找到中点 slow 后，执行 slow.next = None 将链表切断。</li><li>递归分割时，输入当前链表左端点 head 和中心节点 slow 的下一个节点 tmp(因为链表是从 slow 切断的)。</li></ul></li><li>cut 递归终止条件： 当head.next == None时，说明只有一个节点了，直接返回此节点。</li></ul></li><li>合并 merge 环节： 将两个排序链表合并，转化为一个排序链表。<ul><li>双指针法合并，建立辅助ListNode h 作为头部。</li><li>设置两指针 left, right 分别指向两链表头部，比较两指针处节点值大小，由小到大加入合并链表头部，指针交替前进，直至添加完两个链表。</li><li>返回辅助ListNode h 作为头部的下个节点 h.next。</li><li>时间复杂度 O(l + r)，l, r 分别代表两个链表长度。</li></ul></li><li>当题目输入的 head == None 时，直接返回None。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode fast = head.next,slow = head;</span><br><span class="line">    <span class="comment">//声明两个快慢指针</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode tmp = slow.next;</span><br><span class="line">    <span class="comment">//此时temp是中点后一个结点</span></span><br><span class="line">    <span class="comment">//若是偶数结点，tmp在中点偏右</span></span><br><span class="line">    <span class="comment">//奇数结点，tmp在中点后一个</span></span><br><span class="line">    slow.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//切割链表</span></span><br><span class="line">    ListNode left = sortList(head);</span><br><span class="line">    ListNode right = sortList(tmp);</span><br><span class="line">    <span class="comment">//递归分割左右链表</span></span><br><span class="line">    ListNode h = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//头结点作为合并链表的开始</span></span><br><span class="line">    ListNode res = h;</span><br><span class="line">    <span class="keyword">while</span> (left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//合并过程</span></span><br><span class="line">        <span class="keyword">if</span>(left.val &lt; right.val)&#123;</span><br><span class="line">            h.next = left;</span><br><span class="line">            left = left.next;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            h.next = right;</span><br><span class="line">            right = right.next;</span><br><span class="line">        &#125;</span><br><span class="line">        h = h.next;</span><br><span class="line">    &#125;</span><br><span class="line">    h.next = left != <span class="keyword">null</span> ? left : right;</span><br><span class="line">    <span class="keyword">return</span> res.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表转为数组排序后在转回链表"><a href="#链表转为数组排序后在转回链表" class="headerlink" title="链表转为数组排序后在转回链表"></a>链表转为数组排序后在转回链表</h4><p>来自评论区，首先将链表转为数组，对数组做排序后在放回链表里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        list.add(p1.val);</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line">    p1 = head;</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">        head.val = it.next();</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第148题排序链表&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: 4-&amp;gt;2-&amp;gt;1-&amp;gt;3&lt;br&gt;输出: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="归并" scheme="http://yorxika.github.io/tags/%E5%BD%92%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>后缀表达式求值</title>
    <link href="http://yorxika.github.io/2019/11/29/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <id>http://yorxika.github.io/2019/11/29/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</id>
    <published>2019-11-29T15:33:36.000Z</published>
    <updated>2019-12-12T12:51:15.024Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第150题逆波兰表达式求值</p><blockquote><p>根据逆波兰表示法，求表达式的值。</p><p>有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><a id="more"></a><p>说明：</p><p>整数除法只保留整数部分。<br>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。<br>示例 1：</p><p>输入: [“2”, “1”, “+”, “3”, “*”]<br>输出: 9<br>解释: ((2 + 1) * 3) = 9</p></blockquote><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>老题目了，操作数压栈，运算符2个操作数出栈，运算后在压栈.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : tokens) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">"+"</span>)) &#123;</span><br><span class="line">            stack.push(stack.pop() + stack.pop());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">            stack.push(-stack.pop() + stack.pop());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"*"</span>)) &#123;</span><br><span class="line">            stack.push(stack.pop() * stack.pop());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> num1 = stack.pop();</span><br><span class="line">            stack.push(stack.pop() / num1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.push(Integer.parseInt(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第150题逆波兰表达式求值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据逆波兰表示法，求表达式的值。&lt;/p&gt;
&lt;p&gt;有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="栈" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%88/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="栈" scheme="http://yorxika.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>第十行</title>
    <link href="http://yorxika.github.io/2019/11/28/%E7%AC%AC%E5%8D%81%E8%A1%8C/"/>
    <id>http://yorxika.github.io/2019/11/28/%E7%AC%AC%E5%8D%81%E8%A1%8C/</id>
    <published>2019-11-28T15:24:14.000Z</published>
    <updated>2019-12-12T12:51:26.694Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第195题第10行</p><blockquote><p>给定一个文本文件 file.txt，请只打印这个文件中的第十行。<a id="more"></a></p></blockquote><h3 id="三种解法"><a href="#三种解法" class="headerlink" title="三种解法"></a>三种解法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail -n +10 file.txt | head -n 1</span><br><span class="line">sed -n <span class="string">'10p'</span> file.txt</span><br><span class="line">awk <span class="string">'NR==10 &#123;print $0&#125;'</span> file.txt</span><br></pre></td></tr></table></figure><h4 id="tail命令和head命令"><a href="#tail命令和head命令" class="headerlink" title="tail命令和head命令"></a>tail命令和head命令</h4><p>tail命令显示最后一组文件行。默认情况下，它显示文件的最后10行，但是也是使用命令行参数更改数字，使用tail –h查看命令行参数，截图如下：</p><div align="center"><img width="600" src="https://img-blog.csdn.net/20161123103714273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></div><p>如果K前有+，则表示显示除开头K行外所有行</p><p>head命令显示开头的一组文件行。默认情况下，它显示文件的前10行。通过head –h命令查看参数截图：</p><div align="center"><img width="600" src="https://img-blog.csdn.net/20161123103740312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></div><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><p><strong>说明</strong>：<br>1.从文件中读取数据，StreamEDitor流（行）编辑器，逐行处理文本；<br>Sed 是一个脚本型的编译器，是非交互式的编辑器<br>2.模式空间（将一行数据加载到内存，进行处理），默认不编辑源文件，仅对模式空间中的数据处理，将处理的数据输出到屏幕</p><p>用法：<br>&nbsp;&nbsp;&nbsp;&nbsp;一般用法：<br>&nbsp;&nbsp;&nbsp;&nbsp;sed [-neri] ‘指令’ file…<br>&nbsp;&nbsp;&nbsp;&nbsp;sed -f scriptsfile file…<br>选项：<br>&nbsp;&nbsp;&nbsp;&nbsp;-n 安静模式，只有经过Sed处理的行才显示出来，其他不显示<br>&nbsp;&nbsp;&nbsp;&nbsp;-e 表示直接在命令行模式上进行Sed操作（默认选项）;<br>&nbsp;&nbsp;&nbsp;&nbsp;   进行多项编辑，即对输入行应用多条sed命令时使用<br>&nbsp;&nbsp;&nbsp;&nbsp;-f 将Sed的操作写在一个文件里，用的时候“-f filename”就可以按照内容进行Sed操作<br>&nbsp;&nbsp;&nbsp;&nbsp;-r 使Sed支持扩展正则表达式(预设支持基础正则表达式)<br>&nbsp;&nbsp;&nbsp;&nbsp;-i 直接修改读取的文件内容，而不是输出到终端<br>&nbsp;&nbsp;&nbsp;&nbsp;sed 编辑指令的格式如下 :<br>              [address1[,address2]]function[argument]<br>&nbsp;&nbsp;&nbsp;&nbsp;==addres (指定需要操作的行)==<br>&nbsp;&nbsp;&nbsp;&nbsp;1. n1,n2    例：1,100 表示1至100行<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n1行开始，n2行结束<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;处理n1行开始到n2行结束的数据<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$符号表示文件最后一行<br>&nbsp;&nbsp;&nbsp;&nbsp;2. /RegExp/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;匹配正则表达式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;处理正则表达式匹配的行的数据<br>&nbsp;&nbsp;&nbsp;&nbsp;3. /pattern1/,/pattern2/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern1匹配到为行开始<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern2匹配到为行结束<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;处理pattern1,到pattern2之间所有行数据<br>&nbsp;&nbsp;&nbsp;&nbsp;4. n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指定第n行的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;处理指定第n行的数据<br>&nbsp;&nbsp;&nbsp;&nbsp;5. n1,+n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n1 为行开始<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+n 开始行向后n行<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;处理行开始到向后n行的数据<br>&nbsp;&nbsp;&nbsp;&nbsp;==function(可对数据处理的动作(sed内定函数))==<br>&nbsp;&nbsp;&nbsp;&nbsp;d 删除符合条件的行<br>&nbsp;&nbsp;&nbsp;&nbsp;D 删除模板块的第一行<br>&nbsp;&nbsp;&nbsp;&nbsp;h 拷贝模板块的内容到内存中的缓冲区<br>&nbsp;&nbsp;&nbsp;&nbsp;H 追加模板块的内容到内存中的缓冲区<br>&nbsp;&nbsp;&nbsp;&nbsp;g 获得内存缓冲区的内容，并替代当前模板块中的文本<br>&nbsp;&nbsp;&nbsp;&nbsp;G 获得内存缓冲区的内容，并追加到当前模板块文本的后面<br>&nbsp;&nbsp;&nbsp;&nbsp;p 显示符合条件的行<br>&nbsp;&nbsp;&nbsp;&nbsp;P (大写) 打印模板块的第一行<br>&nbsp;&nbsp;&nbsp;&nbsp;q 退出Sed<br>&nbsp;&nbsp;&nbsp;&nbsp;l 列表不能打印字符的清单<br>&nbsp;&nbsp;&nbsp;&nbsp;n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。<br>&nbsp;&nbsp;&nbsp;&nbsp;N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码<br>&nbsp;&nbsp;&nbsp;&nbsp;a &quot;string” 在指定的行后面追加新行，内容为”string”<br>&nbsp;&nbsp;&nbsp;&nbsp;i &quot;string” 在指定的行前面插入新行，内容为”string”<br>&nbsp;&nbsp;&nbsp;&nbsp;c &quot;string” 将处理的数据行,取代内容为”string”<br>&nbsp;&nbsp;&nbsp;&nbsp;r file 将指定文件的内容天骄到符合条件的行后<br>&nbsp;&nbsp;&nbsp;&nbsp;w file 将指定范围内的内容另存至指定的文件中<br>&nbsp;&nbsp;&nbsp;&nbsp;W file （大写）写并追加模板块的第一行到file末尾。<br>&nbsp;&nbsp;&nbsp;&nbsp;s/pattern/string/修饰符 查找并替换，默认只替换每行第一次被模式匹配到的字符串<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修饰符：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g 表示行内全面替换。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p 表示打印行。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w 表示把行写入一个文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x 表示互换模板块中的文本和缓冲区中的文本。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\1 子串匹配标记<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp; 已匹配字符串标记<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i 忽略大小写<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特别说明: s///,s###,s@@@都可以，当所使用的分割符号与内容中显示<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;的相同时，需使用转义字符转义 ,\1,\2：成组匹配，\1表示匹配第一<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;个‘(’，\2表示匹配第二个‘(’<br>&nbsp;&nbsp;&nbsp;&nbsp;b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾<br>&nbsp;&nbsp;&nbsp;&nbsp;t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾<br>&nbsp;&nbsp;&nbsp;&nbsp;T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾<br>&nbsp;&nbsp;&nbsp;&nbsp;! 表示后面的命令对所有没有被选定的行发生作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;= 打印当前行号码。<br>&nbsp;&nbsp;&nbsp;&nbsp;# 把注释扩展到下一个换行符以前</p><h4 id="awk操作"><a href="#awk操作" class="headerlink" title="awk操作"></a>awk操作</h4><p>awk [-F|-f] ‘BEGIN{}{command1; command2} END{}’ file<br>[-F|-f]   大参数，-F指定分隔符，-f调用脚本<br>‘  ‘          引用代码块<br>//           匹配代码块，可以是字符串或正则表达式<br>{}           命令代码块，包含一条或多条命令<br>；          多条命令使用分号分隔</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">awk -F : <span class="string">'&#123;print $1&#125;'</span> passwd  <span class="comment">###指定分隔符为： ，输出第一列</span></span><br><span class="line">awk -F : <span class="string">'BEGIN&#123;print '</span>hello<span class="string">'&#125;&#123;print $2&#125;'</span> passwd   <span class="comment">###指定分隔符为：，在输出前加上hello，输出第二列【hello在第一行】</span></span><br><span class="line">awk -F : <span class="string">'BEGIN&#123;n=1&#125;&#123;print $2,n&#125;'</span> passwd   <span class="comment">###指定分隔符为：，在输出的第二列每一行后面都输出n的值1</span></span><br><span class="line">awk -F : <span class="string">'BEGIN&#123;n=1&#125;&#123;print $2,n++&#125;'</span> passwd   <span class="comment">###n的值每一行会加1</span></span><br><span class="line">awk -F : <span class="string">'BEGIN&#123;n=1&#125;&#123;print n++，$1&#125;'</span> passwd   <span class="comment">###相当于序号</span></span><br><span class="line">awk -F : <span class="string">'BEGIN&#123;n=1&#125;&#123;print n++,$1&#125;END&#123;print "over"&#125;'</span> passwd <span class="comment">###指定分隔符为：，在第一列每一行开头加上n的值，n每行+1，在最后一行输出over</span></span><br><span class="line">awk -F : <span class="string">'BEGIN&#123;n=1&#125;&#123;print n++,$1&#125;END&#123;print NR&#125;'</span> passwd  <span class="comment">###指定分隔符为：，在第一列每一行开头加上n的值，n每行+1，最后一行输出有多少行</span></span><br><span class="line">awk -F : <span class="string">'BEGIN&#123;n=1&#125;&#123;print n++,$1&#125;END&#123;print NF&#125;'</span> passwd  <span class="comment">###指定分隔符为：，在第一列每一行开头加上n的值，n每行+1，最后一行输出有多少列</span></span><br><span class="line">awk <span class="string">'/bash/&#123;print&#125;'</span> passwd  <span class="comment">###输出包含bash的内容</span></span><br><span class="line">awk -F : <span class="string">'/bash/&#123;print $1&#125;'</span> passwd  <span class="comment">###输出包含bash的第一列</span></span><br><span class="line">awk -F : <span class="string">'NR==3&#123;print $1&#125;'</span> passwd <span class="comment">###输出第三行第一列</span></span><br><span class="line">awk -F : <span class="string">'NR&gt;=4&amp;&amp;NR&lt;=6&#123;print&#125;'</span> passwd <span class="comment">###输出4-6行</span></span><br><span class="line">awk -F : <span class="string">'NR==4||NR==6&#123;PRINT&#125;'</span> passwd  <span class="comment">###输出第四行和第六行</span></span><br><span class="line">awk <span class="string">'BEGIN&#123;a=34;print a+12&#125;'</span>   <span class="comment">###得到a的值46</span></span><br><span class="line">awk <span class="string">'/^[^a-d]/&#123;print&#125;'</span> passwd  <span class="comment">###输出除了以a-d开头的</span></span><br><span class="line">awk <span class="string">'/^r|bash$/&#123;print&#125;'</span> passwd  <span class="comment">###输出以r开头，或许以bash结尾的</span></span><br><span class="line">awk <span class="string">'/^r/&amp;&amp;/bash$/&#123;print&#125;'</span> passwd  <span class="comment">###并且</span></span><br><span class="line">awk -F : <span class="string">'$6~/bin$/&#123;print&#125;'</span> passwd <span class="comment">###以：为分隔符，输出第六列以bin结尾的</span></span><br><span class="line">awk -F : <span class="string">'$6!~/\&lt;bin$/&#123;print&#125;'</span> passwd  <span class="comment">###输出第六列不是以bin结尾且bin前面没有内容的【非贪婪模式】</span></span><br><span class="line">awk -F : <span class="string">'BEGIN=&#123;N=0&#125;$6!~/^\/home/&amp;&amp;$7~/bash$/&#123;print $1;N++&#125;END&#123;print N&#125;'</span> /etc/passwd <span class="comment">###并统计个数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第195题第10行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个文本文件 file.txt，请只打印这个文件中的第十行。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="命令行" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="Bash" scheme="http://yorxika.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>杨辉三角II</title>
    <link href="http://yorxika.github.io/2019/11/28/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/"/>
    <id>http://yorxika.github.io/2019/11/28/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/</id>
    <published>2019-11-28T14:28:11.000Z</published>
    <updated>2019-12-12T12:51:52.505Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第119题杨辉三角II</p><blockquote><p>给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。<br>示例:</p><p>输入: 3<br>输出: [1,3,3,1]<br>进阶：</p><p>你可以优化你的算法到 O(k) 空间复杂度吗？<a id="more"></a></p></blockquote><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>思路同上一题杨辉三角，按序求出第0行到第N行，返回第N行即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rowIndex;i++)&#123;</span><br><span class="line">        List&lt;Integer&gt; subList=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">2</span>) &#123;<span class="comment">//前两行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                subList.add(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(subList);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            subList.add(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                Integer twoSum=list.get(i-<span class="number">1</span>).get(j-<span class="number">1</span>)+list.get(i-<span class="number">1</span>).get(j);</span><br><span class="line">                subList.add(twoSum);</span><br><span class="line">            &#125;</span><br><span class="line">            subList.add(<span class="number">1</span>);</span><br><span class="line">            list.add(subList);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> list.get(rowIndex - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h4><p>只用当前行，从当前行构造出下一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">1</span>;</span><br><span class="line">    List&lt;Integer&gt; cur = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    cur.add(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = cur.get(j);</span><br><span class="line">            cur.set(j, pre + cur.get(j));</span><br><span class="line">            pre = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.add(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h4><p>杨辉三角第n行第k列的值为：<br>C(n,k) =n!/(k!(n−k)!)=(n∗(n−1)∗(n−2)∗…(n−k+1))/k!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> n = rowIndex;</span><br><span class="line">    <span class="keyword">long</span> pre = <span class="number">1</span>;</span><br><span class="line">    ans.add(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k &lt;= (n + <span class="number">1</span>) /<span class="number">2</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">long</span> cur = pre * (n - k + <span class="number">1</span>) / k;</span><br><span class="line">        ans.add((<span class="keyword">int</span>) cur);</span><br><span class="line">        pre = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;k &lt;=n; k++)&#123;</span><br><span class="line">        ans.add(ans.get(n - k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打表"><a href="#打表" class="headerlink" title="打表"></a>打表</h4><p>评论区看到的2333</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">pre33</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Integer[][] list = <span class="keyword">new</span> Integer[][]&#123;</span><br><span class="line">        &#123;<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">21</span>,<span class="number">35</span>,<span class="number">35</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">28</span>,<span class="number">56</span>,<span class="number">70</span>,<span class="number">56</span>,<span class="number">28</span>,<span class="number">8</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">9</span>,<span class="number">36</span>,<span class="number">84</span>,<span class="number">126</span>,<span class="number">126</span>,<span class="number">84</span>,<span class="number">36</span>,<span class="number">9</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">45</span>,<span class="number">120</span>,<span class="number">210</span>,<span class="number">252</span>,<span class="number">210</span>,<span class="number">120</span>,<span class="number">45</span>,<span class="number">10</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">11</span>,<span class="number">55</span>,<span class="number">165</span>,<span class="number">330</span>,<span class="number">462</span>,<span class="number">462</span>,<span class="number">330</span>,<span class="number">165</span>,<span class="number">55</span>,<span class="number">11</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">12</span>,<span class="number">66</span>,<span class="number">220</span>,<span class="number">495</span>,<span class="number">792</span>,<span class="number">924</span>,<span class="number">792</span>,<span class="number">495</span>,<span class="number">220</span>,<span class="number">66</span>,<span class="number">12</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">13</span>,<span class="number">78</span>,<span class="number">286</span>,<span class="number">715</span>,<span class="number">1287</span>,<span class="number">1716</span>,<span class="number">1716</span>,<span class="number">1287</span>,<span class="number">715</span>,<span class="number">286</span>,<span class="number">78</span>,<span class="number">13</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">14</span>,<span class="number">91</span>,<span class="number">364</span>,<span class="number">1001</span>,<span class="number">2002</span>,<span class="number">3003</span>,<span class="number">3432</span>,<span class="number">3003</span>,<span class="number">2002</span>,<span class="number">1001</span>,<span class="number">364</span>,<span class="number">91</span>,<span class="number">14</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">15</span>,<span class="number">105</span>,<span class="number">455</span>,<span class="number">1365</span>,<span class="number">3003</span>,<span class="number">5005</span>,<span class="number">6435</span>,<span class="number">6435</span>,<span class="number">5005</span>,<span class="number">3003</span>,<span class="number">1365</span>,<span class="number">455</span>,<span class="number">105</span>,<span class="number">15</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">16</span>,<span class="number">120</span>,<span class="number">560</span>,<span class="number">1820</span>,<span class="number">4368</span>,<span class="number">8008</span>,<span class="number">11440</span>,<span class="number">12870</span>,<span class="number">11440</span>,<span class="number">8008</span>,<span class="number">4368</span>,<span class="number">1820</span>,<span class="number">560</span>,<span class="number">120</span>,<span class="number">16</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">17</span>,<span class="number">136</span>,<span class="number">680</span>,<span class="number">2380</span>,<span class="number">6188</span>,<span class="number">12376</span>,<span class="number">19448</span>,<span class="number">24310</span>,<span class="number">24310</span>,<span class="number">19448</span>,<span class="number">12376</span>,<span class="number">6188</span>,<span class="number">2380</span>,<span class="number">680</span>,<span class="number">136</span>,<span class="number">17</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">18</span>,<span class="number">153</span>,<span class="number">816</span>,<span class="number">3060</span>,<span class="number">8568</span>,<span class="number">18564</span>,<span class="number">31824</span>,<span class="number">43758</span>,<span class="number">48620</span>,<span class="number">43758</span>,<span class="number">31824</span>,<span class="number">18564</span>,<span class="number">8568</span>,<span class="number">3060</span>,<span class="number">816</span>,<span class="number">153</span>,<span class="number">18</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">19</span>,<span class="number">171</span>,<span class="number">969</span>,<span class="number">3876</span>,<span class="number">11628</span>,<span class="number">27132</span>,<span class="number">50388</span>,<span class="number">75582</span>,<span class="number">92378</span>,<span class="number">92378</span>,<span class="number">75582</span>,<span class="number">50388</span>,<span class="number">27132</span>,<span class="number">11628</span>,<span class="number">3876</span>,<span class="number">969</span>,<span class="number">171</span>,<span class="number">19</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">20</span>,<span class="number">190</span>,<span class="number">1140</span>,<span class="number">4845</span>,<span class="number">15504</span>,<span class="number">38760</span>,<span class="number">77520</span>,<span class="number">125970</span>,<span class="number">167960</span>,<span class="number">184756</span>,<span class="number">167960</span>,<span class="number">125970</span>,<span class="number">77520</span>,<span class="number">38760</span>,<span class="number">15504</span>,<span class="number">4845</span>,<span class="number">1140</span>,<span class="number">190</span>,<span class="number">20</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">21</span>,<span class="number">210</span>,<span class="number">1330</span>,<span class="number">5985</span>,<span class="number">20349</span>,<span class="number">54264</span>,<span class="number">116280</span>,<span class="number">203490</span>,<span class="number">293930</span>,<span class="number">352716</span>,<span class="number">352716</span>,<span class="number">293930</span>,<span class="number">203490</span>,<span class="number">116280</span>,<span class="number">54264</span>,<span class="number">20349</span>,<span class="number">5985</span>,<span class="number">1330</span>,<span class="number">210</span>,<span class="number">21</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">22</span>,<span class="number">231</span>,<span class="number">1540</span>,<span class="number">7315</span>,<span class="number">26334</span>,<span class="number">74613</span>,<span class="number">170544</span>,<span class="number">319770</span>,<span class="number">497420</span>,<span class="number">646646</span>,<span class="number">705432</span>,<span class="number">646646</span>,<span class="number">497420</span>,<span class="number">319770</span>,<span class="number">170544</span>,<span class="number">74613</span>,<span class="number">26334</span>,<span class="number">7315</span>,<span class="number">1540</span>,<span class="number">231</span>,<span class="number">22</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">253</span>,<span class="number">1771</span>,<span class="number">8855</span>,<span class="number">33649</span>,<span class="number">100947</span>,<span class="number">245157</span>,<span class="number">490314</span>,<span class="number">817190</span>,<span class="number">1144066</span>,<span class="number">1352078</span>,<span class="number">1352078</span>,<span class="number">1144066</span>,<span class="number">817190</span>,<span class="number">490314</span>,<span class="number">245157</span>,<span class="number">100947</span>,<span class="number">33649</span>,<span class="number">8855</span>,<span class="number">1771</span>,<span class="number">253</span>,<span class="number">23</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">24</span>,<span class="number">276</span>,<span class="number">2024</span>,<span class="number">10626</span>,<span class="number">42504</span>,<span class="number">134596</span>,<span class="number">346104</span>,<span class="number">735471</span>,<span class="number">1307504</span>,<span class="number">1961256</span>,<span class="number">2496144</span>,<span class="number">2704156</span>,<span class="number">2496144</span>,<span class="number">1961256</span>,<span class="number">1307504</span>,<span class="number">735471</span>,<span class="number">346104</span>,<span class="number">134596</span>,<span class="number">42504</span>,<span class="number">10626</span>,<span class="number">2024</span>,<span class="number">276</span>,<span class="number">24</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">25</span>,<span class="number">300</span>,<span class="number">2300</span>,<span class="number">12650</span>,<span class="number">53130</span>,<span class="number">177100</span>,<span class="number">480700</span>,<span class="number">1081575</span>,<span class="number">2042975</span>,<span class="number">3268760</span>,<span class="number">4457400</span>,<span class="number">5200300</span>,<span class="number">5200300</span>,<span class="number">4457400</span>,<span class="number">3268760</span>,<span class="number">2042975</span>,<span class="number">1081575</span>,<span class="number">480700</span>,<span class="number">177100</span>,<span class="number">53130</span>,<span class="number">12650</span>,<span class="number">2300</span>,<span class="number">300</span>,<span class="number">25</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">26</span>,<span class="number">325</span>,<span class="number">2600</span>,<span class="number">14950</span>,<span class="number">65780</span>,<span class="number">230230</span>,<span class="number">657800</span>,<span class="number">1562275</span>,<span class="number">3124550</span>,<span class="number">5311735</span>,<span class="number">7726160</span>,<span class="number">9657700</span>,<span class="number">10400600</span>,<span class="number">9657700</span>,<span class="number">7726160</span>,<span class="number">5311735</span>,<span class="number">3124550</span>,<span class="number">1562275</span>,<span class="number">657800</span>,<span class="number">230230</span>,<span class="number">65780</span>,<span class="number">14950</span>,<span class="number">2600</span>,<span class="number">325</span>,<span class="number">26</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">27</span>,<span class="number">351</span>,<span class="number">2925</span>,<span class="number">17550</span>,<span class="number">80730</span>,<span class="number">296010</span>,<span class="number">888030</span>,<span class="number">2220075</span>,<span class="number">4686825</span>,<span class="number">8436285</span>,<span class="number">13037895</span>,<span class="number">17383860</span>,<span class="number">20058300</span>,<span class="number">20058300</span>,<span class="number">17383860</span>,<span class="number">13037895</span>,<span class="number">8436285</span>,<span class="number">4686825</span>,<span class="number">2220075</span>,<span class="number">888030</span>,<span class="number">296010</span>,<span class="number">80730</span>,<span class="number">17550</span>,<span class="number">2925</span>,<span class="number">351</span>,<span class="number">27</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">28</span>,<span class="number">378</span>,<span class="number">3276</span>,<span class="number">20475</span>,<span class="number">98280</span>,<span class="number">376740</span>,<span class="number">1184040</span>,<span class="number">3108105</span>,<span class="number">6906900</span>,<span class="number">13123110</span>,<span class="number">21474180</span>,<span class="number">30421755</span>,<span class="number">37442160</span>,<span class="number">40116600</span>,<span class="number">37442160</span>,<span class="number">30421755</span>,<span class="number">21474180</span>,<span class="number">13123110</span>,<span class="number">6906900</span>,<span class="number">3108105</span>,<span class="number">1184040</span>,<span class="number">376740</span>,<span class="number">98280</span>,<span class="number">20475</span>,<span class="number">3276</span>,<span class="number">378</span>,<span class="number">28</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">29</span>,<span class="number">406</span>,<span class="number">3654</span>,<span class="number">23751</span>,<span class="number">118755</span>,<span class="number">475020</span>,<span class="number">1560780</span>,<span class="number">4292145</span>,<span class="number">10015005</span>,<span class="number">20030010</span>,<span class="number">34597290</span>,<span class="number">51895935</span>,<span class="number">67863915</span>,<span class="number">77558760</span>,<span class="number">77558760</span>,<span class="number">67863915</span>,<span class="number">51895935</span>,<span class="number">34597290</span>,<span class="number">20030010</span>,<span class="number">10015005</span>,<span class="number">4292145</span>,<span class="number">1560780</span>,<span class="number">475020</span>,<span class="number">118755</span>,<span class="number">23751</span>,<span class="number">3654</span>,<span class="number">406</span>,<span class="number">29</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">30</span>,<span class="number">435</span>,<span class="number">4060</span>,<span class="number">27405</span>,<span class="number">142506</span>,<span class="number">593775</span>,<span class="number">2035800</span>,<span class="number">5852925</span>,<span class="number">14307150</span>,<span class="number">30045015</span>,<span class="number">54627300</span>,<span class="number">86493225</span>,<span class="number">119759850</span>,<span class="number">145422675</span>,<span class="number">155117520</span>,<span class="number">145422675</span>,<span class="number">119759850</span>,<span class="number">86493225</span>,<span class="number">54627300</span>,<span class="number">30045015</span>,<span class="number">14307150</span>,<span class="number">5852925</span>,<span class="number">2035800</span>,<span class="number">593775</span>,<span class="number">142506</span>,<span class="number">27405</span>,<span class="number">4060</span>,<span class="number">435</span>,<span class="number">30</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">31</span>,<span class="number">465</span>,<span class="number">4495</span>,<span class="number">31465</span>,<span class="number">169911</span>,<span class="number">736281</span>,<span class="number">2629575</span>,<span class="number">7888725</span>,<span class="number">20160075</span>,<span class="number">44352165</span>,<span class="number">84672315</span>,<span class="number">141120525</span>,<span class="number">206253075</span>,<span class="number">265182525</span>,<span class="number">300540195</span>,<span class="number">300540195</span>,<span class="number">265182525</span>,<span class="number">206253075</span>,<span class="number">141120525</span>,<span class="number">84672315</span>,<span class="number">44352165</span>,<span class="number">20160075</span>,<span class="number">7888725</span>,<span class="number">2629575</span>,<span class="number">736281</span>,<span class="number">169911</span>,<span class="number">31465</span>,<span class="number">4495</span>,<span class="number">465</span>,<span class="number">31</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">32</span>,<span class="number">496</span>,<span class="number">4960</span>,<span class="number">35960</span>,<span class="number">201376</span>,<span class="number">906192</span>,<span class="number">3365856</span>,<span class="number">10518300</span>,<span class="number">28048800</span>,<span class="number">64512240</span>,<span class="number">129024480</span>,<span class="number">225792840</span>,<span class="number">347373600</span>,<span class="number">471435600</span>,<span class="number">565722720</span>,<span class="number">601080390</span>,<span class="number">565722720</span>,<span class="number">471435600</span>,<span class="number">347373600</span>,<span class="number">225792840</span>,<span class="number">129024480</span>,<span class="number">64512240</span>,<span class="number">28048800</span>,<span class="number">10518300</span>,<span class="number">3365856</span>,<span class="number">906192</span>,<span class="number">201376</span>,<span class="number">35960</span>,<span class="number">4960</span>,<span class="number">496</span>,<span class="number">32</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">33</span>,<span class="number">528</span>,<span class="number">5456</span>,<span class="number">40920</span>,<span class="number">237336</span>,<span class="number">1107568</span>,<span class="number">4272048</span>,<span class="number">13884156</span>,<span class="number">38567100</span>,<span class="number">92561040</span>,<span class="number">193536720</span>,<span class="number">354817320</span>,<span class="number">573166440</span>,<span class="number">818809200</span>,<span class="number">1037158320</span>,<span class="number">1166803110</span>,<span class="number">1166803110</span>,<span class="number">1037158320</span>,<span class="number">818809200</span>,<span class="number">573166440</span>,<span class="number">354817320</span>,<span class="number">193536720</span>,<span class="number">92561040</span>,<span class="number">38567100</span>,<span class="number">13884156</span>,<span class="number">4272048</span>,<span class="number">1107568</span>,<span class="number">237336</span>,<span class="number">40920</span>,<span class="number">5456</span>,<span class="number">528</span>,<span class="number">33</span>,<span class="number">1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(pre33.list[rowIndex]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第119题杨辉三角II&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。&lt;br&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: 3&lt;br&gt;输出: [1,3,3,1]&lt;br&gt;进阶：&lt;/p&gt;
&lt;p&gt;你可以优化你的算法到 O(k) 空间复杂度吗？&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>SOCKET编程</title>
    <link href="http://yorxika.github.io/2019/11/28/SOCKET%E7%BC%96%E7%A8%8B/"/>
    <id>http://yorxika.github.io/2019/11/28/SOCKET%E7%BC%96%E7%A8%8B/</id>
    <published>2019-11-27T17:35:33.000Z</published>
    <updated>2019-12-12T12:49:47.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Socket套接字介绍"><a href="#Socket套接字介绍" class="headerlink" title="Socket套接字介绍"></a>Socket套接字介绍</h3><p>网络应用程序是由通信进程对组成，每对互相通信的应用程序进程互相发送报文，他们之间的通信必须通过下面的网络来进行。为了将应用程序和底层的网络通信协议屏蔽开来，采用套接字（Socket）这样一个抽象概念来作为应用程序和底层网络之间的应用程序编程接口（API）。<a id="more"></a><br>因为网络应用程序是进程之间的通信，为了唯一的标识通信对等方的通信进程，套接字必须包含2种信息：(1) 通信对等方的网络地址。(2) 通信对等方的进程号，通常叫端口号。<br>就像Unix操作系统下有一套实现TCP/IP网络通信协议的开发接口：BSD Sockets一样，在Windows操作系统下，也提供了一套网络通信协议的开发接口，称为Windows Sockets或简称Winsock。<br>Winsock 是通过动态链接库的方式提供给软件开发者，而且从Windows 95以后已经被集成到了Windows操作系统中。<br>Winsock主要经历了2个版本：Winsock 1.1和Winsock 2.0。Winsock 2.0是Winsock 1.1的扩展，它向下完全兼容。<br>Winsock同时包括了16位和32位的编程接口，16位的Windows Socket 2应用程序使用的动态链接库是WINSOCK.DLL，而32位的Windows Socket应用程序使用WSOCK32.DLL（Winsock 1.1版）和WS2_32.DLL（Winsock 2.0版）。另外，使用Winsock API时要包含头文件winsock.h（Winsock 1.1版）或winsock2.h（Winsock 2.0版）。</p><h3 id="Socket套接字编程原理"><a href="#Socket套接字编程原理" class="headerlink" title="Socket套接字编程原理"></a>Socket套接字编程原理</h3><h4 id="Socket的2种类型"><a href="#Socket的2种类型" class="headerlink" title="Socket的2种类型"></a>Socket的2种类型</h4><p>Socket是一个抽象概念，代表了通信双方的端点（Endpoint），通信双方通过Socket发送或接收数据。<br>在Winsock里，用数据类型SOCKET作为Windows Sockets对象的句柄，就好像一个窗口的句柄HWND、一个打开的文件的文件指针一样。下面我们会看到，在Winsock API的许多函数里，都会用到SOCKET类型的参数。<br>Socket有2种类型：</p><ul><li>流类型（Stream Sockets）。<br>流式套接字提供了一种可靠的、面向连接的数据传输方法，使用传输控制协议TCP。</li><li>数据报类型（Datagram Sockets）。<br>数据报套接字提供了一种不可靠的、非连接的数据包传输方式，使用用户数据报协议UDP。</li></ul><h4 id="Socket-I-O的2种模式"><a href="#Socket-I-O的2种模式" class="headerlink" title="Socket I/O的2种模式"></a>Socket I/O的2种模式</h4><p>一个SOCKET句柄可以看成代表了一个I/O设备。在Windows Sockets里，有2种I/O模式：</p><ul><li>阻塞式I/O（blocking I/O）<br>在阻塞方式下，收发数据的函数在调用后一直要到传送完毕或者出错才能完成，在阻塞期间，除了等待网络操作的完成不能进行任何操作。阻塞式I/O是一个Winsock API函数的缺省行为。</li><li>非阻塞式I/O（non-blocking I/O）<br>对于非阻塞方式，Winsock API函数被调用后立即返回；当网络操作完成后，由Winsock给应用程序发送消息（Socket Notifications）通知操作完成，这时应用程序可以根据发送的消息中的参数对消息做出响应。Winsock提供了2种异步接受数据的方法：一种方法是使用BSD类型的函数select（），另外一种方法是使用Winsock提供的专用函数WSAAsyncSelect（）。</li></ul><h4 id="使用数据报套接字"><a href="#使用数据报套接字" class="headerlink" title="使用数据报套接字"></a>使用数据报套接字</h4><p>首先，客户机和服务器都要创建一个数据报套接字。接着，服务器调用bind（）函数给套接字分配一个公认的端口。一旦服务器将公认的端口分配给了套接字，客户机和服务器都能使用sendto（）和revfron（）来传递数据报。通信完毕调用closesocket（）来关闭套接字。流程如图2.1所示：</p><div align="center"><img width="600" src="/2019/11/28/SOCKET编程/1.jpg"></div><h4 id="使用流式套接字"><a href="#使用流式套接字" class="headerlink" title="使用流式套接字"></a>使用流式套接字</h4><p>由于流式套接字使用的是基于连接的协议，所以你必须首先建立连接，而后才能从数据流中读出数据，而不是从一个数据报或一个记录中读出数据，其流程如图2.2所示。</p><div align="center"><img width="600" src="/2019/11/28/SOCKET编程/2.jpg"></div><h3 id="套接字部分库函数列表"><a href="#套接字部分库函数列表" class="headerlink" title="套接字部分库函数列表"></a>套接字部分库函数列表</h3><h4 id="WSAStartup（）"><a href="#WSAStartup（）" class="headerlink" title="WSAStartup（）"></a>WSAStartup（）</h4><p><strong>函数原型</strong><br>int WSAStartup (WORD wVersionRequested,  LPWSADATA  lpWSAData  );</p><p><strong>参数</strong><br>wVersionRequested<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 表示欲使用的Windows Sockets API版本；这是个WORD类型的整数，高字节定义的是次版本号，低字节定义的是主版本号。<br>lpWSAData<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指向WSAData资料的指针。WSAData是结构数据类型，描述了关于Windows Sockecs底层实现的相关信息。<br>&nbsp;&nbsp;&nbsp;&nbsp;<br><strong>返回值</strong><br>函数执行成功返回0，失败则返回如下错误代码：<br>&nbsp;&nbsp;&nbsp;&nbsp;WSASYSNOTREADY：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 底层网络子系统没有准备好。<br>&nbsp;&nbsp;&nbsp;&nbsp;WSAVERNOTSUPPORTED：Winsock版本信息号不支持。WSAEINPROGRESS：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 阻塞式Winsock1.1存在于进程中。<br>&nbsp;&nbsp;&nbsp;&nbsp;WSAEPROCLIM：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 已经达到Winsock使用量的上限。<br>&nbsp;&nbsp;&nbsp;&nbsp;WSAEFAULT：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lpWSAData不是一个有效的指针。<br>&nbsp;&nbsp;&nbsp;&nbsp;<br><strong>函数功能</strong><br>这个函数是应用程序应该第一个调用的Winsock API函数，以完成一系列初始化的工作。</p><p><strong>相关数据结构</strong><br>WSADATA的定义如下：<br>&nbsp;&nbsp;&nbsp;&nbsp;typedef struct WSAData {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORD&nbsp;&nbsp;&nbsp;&nbsp;wVersion;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORD &nbsp;&nbsp;&nbsp;&nbsp;wHighVersion;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;szDescription[WSADESCRIPTION_LEN+1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char &nbsp;&nbsp;&nbsp;&nbsp;szSystemStatus[WSASYS_STATUS_LEN+1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned short&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iMaxSockets;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned short&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iMaxUdpDg;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char FAR * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lpVendorInfo;<br>} WSADATA, FAR * LPWSADATA;<br>其中，各结构成员的含义为:<br>wVersion<br>&nbsp;&nbsp;&nbsp;&nbsp;应用程序应该使用的Winsock版本号。<br>wHighVersion<br>&nbsp;&nbsp;&nbsp;&nbsp;DLL所支持的最高版本号。通常应该等于wVersion。<br>szDescription<br>&nbsp;&nbsp;&nbsp;&nbsp;以0结尾的ASCII字符串，关于Winsock底层实现的描述信息。<br>szSystemStatus<br>&nbsp;&nbsp;&nbsp;&nbsp;以0结尾的ASCII字符串，关于Winsock底层状态或者配置信息。<br>iMaxSockets<br>&nbsp;&nbsp;&nbsp;&nbsp;一个进程最多可使用的套接字数，仅用于Winsock1.1，Winsock 2.0应该忽略该成员。<br>iMaxUdpDg<br>&nbsp;&nbsp;&nbsp;&nbsp;最大的UDP报文大小，仅用于Winsock1.1，Winsock 2.0应该忽略该成员。对于Winsock 2.0，应该使用getsockopt函数取得SO_MAX_MSG_SIZE。<br>lpVendorInfo<br>&nbsp;&nbsp;&nbsp;&nbsp;Winsock开发厂商信息，仅用于Winsock1.1，Winsock 2.0应该忽略该成员。对于Winsock 2.0，应该使用getsockopt函数取得PVD_CONFIG。</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="comment">//对于Winsock 2, include &lt;winsock2.h&gt;</span></span><br><span class="line"></span><br><span class="line">WSADATA  wsaData;</span><br><span class="line"><span class="keyword">int</span> nRc = WSAStartup(<span class="number">0x0101</span>, &amp; wsaData);</span><br><span class="line"><span class="keyword">if</span>(nRc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Winsock初始化错误</span></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(wsaData.wVersion != <span class="number">0x0101</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//版本支持不够</span></span><br><span class="line"><span class="comment">//报告错误给用户，清除Winsock，返回</span></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WSACleanup();</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="socket（）"><a href="#socket（）" class="headerlink" title="socket（）"></a>socket（）</h4><p><strong>函数原型</strong><br>SOCKET socket(int af, int type,    int protocol);</p><p><strong>参数</strong><br>af<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指定地址族（address family），一般填AF_INET（使用Internet地址）。<br>type<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指定SOCKET的类型：SOCK_STREAM（流类型），SOCK_DGRAM（数据报类型）。<br>protocol<br>&nbsp;&nbsp;&nbsp;&nbsp;[in]    指定af参数指定的地址族所使用的具体一个协议。建议设为0，那么它就会根据地址格式和SOCKET类型，自动为你选择一个合适的协议。另外2个常用的值为：IPPROTO_UDP和IPPROTO_TCP。<br><strong>返回值</strong><br>函数执行成功返回一个新的SOCKET，失败则返回INVALID_SOCKET。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>所有的通信在建立之前都要创建一个SOCKET。</p><p>示例代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<span class="comment">//创建数据报socket</span></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SCOKET udpSock = socket(AF_INET, </span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<span class="comment">//创建流socket</span></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SCOKET tcpSock = socket(AF_INET, </span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SOCK_STREAM, IPPROTO_TCP);</span><br></pre></td></tr></table></figure><h4 id="bind（）"><a href="#bind（）" class="headerlink" title="bind（）"></a>bind（）</h4><p><strong>函数原型</strong><br>int bind(SOCKET s, const struct sockaddr FAR* name, int namelen);</p><p><strong>参数</strong><br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 一个需要绑定的SOCKET，例如用socket函数创建的SOCKET。<br>name<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指向描述通信对象地址信息的结构体sockaddr的指针。在该结构体中可以指定地址族（一般为 AF_INET）、主机的地址和端口。通常把主机地址指定为INADDR_ANY（一个主机可能有多个网卡）。<br>namelen<br>&nbsp;&nbsp;&nbsp;&nbsp;[in]    name指针指向的结构体的长度。<br><strong>返回值</strong><br>函数执行成功返回0，失败则返回SOCKET_ERROR。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>成功地创建了一个SOCKET后，用bind函数将SOCKET和主机地址绑定。</p><p><strong>相关数据结构</strong><br>struct sockaddr {<br>&nbsp;&nbsp;&nbsp;&nbsp;u_short         sa_family;<br>&nbsp;&nbsp;&nbsp;&nbsp;char         sa_data[14];<br>};<br>sa_family<br>地址族，比如AF_INET，2个字节大小。<br>sa_data<br>用来存放地址和端口，14个字节大小。<br>sockaddr结构是一个通用的结构（因为Winsock支持的协议族不只是TCP/IP）。对TCP/IP协议，用如下结构来定义地址和端口。<br>struct sockaddr_in {<br>&nbsp;&nbsp;&nbsp;&nbsp;short             sin_family;<br>&nbsp;&nbsp;&nbsp;&nbsp;u_short            sin_port;<br>&nbsp;&nbsp;&nbsp;&nbsp;struct  in_addr    sin_addr;<br>&nbsp;&nbsp;&nbsp;&nbsp;char             sin_zero[8];<br>};<br>sin_family<br>&nbsp;&nbsp;&nbsp;&nbsp;地址族，设为AF_INET。<br>sin_port<br>&nbsp;&nbsp;&nbsp;&nbsp;端口号。如果端口号为0，Winsock会自动为应用程序分配一个值在1024-5000间的一个端口号，所以客户端一般把sin_port设为0。<br>sin_addr<br>&nbsp;&nbsp;&nbsp;&nbsp;为in_addr结构类型，用来指定IP地址。通常把主机地址指定为INADDR_ANY（一个主机可能有多个网卡）。结构in_addr下面介绍。<br>sin_zero<br>&nbsp;&nbsp;&nbsp;&nbsp;8字节的数组，值全为0。这个8个字节用来填充结构sockaddr_in，使其大小等于结构sockaddr（16字节）。<br>结构in_addr用来指定IP地址，其定义为：<br>struct in_addr {<br>&nbsp;union {<br>&nbsp;&nbsp;&nbsp;&nbsp;struct { u_char s_b1,s_b2,s_b3,s_b4; } S_un_b;<br>&nbsp;&nbsp;&nbsp;&nbsp;struct { u_short s_w1,s_w2; } S_un_w;<br>&nbsp;&nbsp;&nbsp;&nbsp; u_long S_addr;<br>&nbsp;} S_un;<br>};<br>对于IP地址10.14.25.90，sockaddr_in结构中的sin_addr可以这样赋值：<br>sin_addr. S_un .S_un_b. s_b1 = 10;<br>sin_addr. S_un .S_un_b. s_b2 = 14;<br>sin_addr. S_un .S_un_b. s_b3 = 25;<br>sin_addr. S_un .S_un_b. s_b4 = 90;<br>或者<br>sin_addr. S_un . S_un_w. s_w1 = (14&lt;&lt;8)|10;<br>sin_addr. S_un . S_un_w. s_w2 = (90&lt;&lt;8)|25;<br>或者<br>sin_addr. S_un . S_addr = (90&lt;&lt;24)|(25&lt;&lt;16)|(14&lt;&lt;8)|10;<br>或者<br>sin_addr. S_un . S_addr = inet_addr(“10.14.25.90”);<br>这里的inet_addr函数可以将字符串形式的IP地址转换为unsigned long形式的值。</p><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SOCKET sServSock;</span><br><span class="line">sockaddr_in addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建socket</span></span><br><span class="line">sServSock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line"></span><br><span class="line"><span class="comment">//htons和htonl函数把主机字节顺序转换为网络字节顺序，分别用于//短整型和长整型数据</span></span><br><span class="line">addr.sin_port = htons(<span class="number">5050</span>);</span><br><span class="line">addr.sin_addr.S_un.S_addr = htonl(INADDR_ANY); </span><br><span class="line"></span><br><span class="line"><span class="comment">// LPSOCKADDR类型转换是必须的</span></span><br><span class="line"><span class="keyword">int</span> nRc = bind(sServSock, (LPSOCKADDR)&amp;addr, <span class="keyword">sizeof</span>(addr) );</span><br></pre></td></tr></table></figure><h4 id="listen（）"><a href="#listen（）" class="headerlink" title="listen（）"></a>listen（）</h4><p><strong>函数原型</strong><br>int listen (SOCKET s,  int backlog);</p><p><strong>参数</strong><br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 一个已经绑定但未连接的SOCKET。<br>backlog<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 等待连接的队列的长度，可取SOMAXCONN。如果某个客户程序要求连接的时候，服务器已经与其他客户程序连接，则后来的连接请求会放在等待队列中，等待服务器空闲时再与之连接。当等待队列达到最大长度（backlog指定的值）时，再来的连接请求都将被拒绝。<br><strong>返回值</strong><br>函数执行成功返回0，失败则返回SOCKET_ERROR。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>对于服务器的程序，当申请到SOCKET,并将通信对象指定为INADDR_ANY之后，就应该等待一个客户机的程序来要求连接，listen函数就是把一个SOCKET设置为这个状态。</p><h4 id="accept（）"><a href="#accept（）" class="headerlink" title="accept（）"></a>accept（）</h4><p><strong>函数原型</strong><br>SOCKET accept (SOCKET s, struct sockaddr FAR* addr,<br>int FAR* addrlen );</p><p><strong>参数</strong><br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 一个已经处于listen状态的SOCKET。<br>addr<br>&nbsp;&nbsp;&nbsp;&nbsp;[out] 指向sockaddr结构体的指针，里面包含了客户端的地址和端口。<br>addrlen<br>&nbsp;&nbsp;&nbsp;&nbsp;[out] int型指针，指向的内容为addr指针指向的结构体的长度。<br><strong>返回值</strong><br>如果函数执行成功，会建立并返回一个新的SOCKET来与对方通信，新建的SOCKET与原来的SOCKET（函数的第一个参数s）有相同的特性，包括端口号。原来的SOCKET继续等待其他的连接请求。而新生成的SOCKET才是与客户端通信的实际SOCKET。所以一般将参数中的SOCKET称作“监听”SOCKET，它只负责接受连接，不负责通话；而对于函数返回的SOCKET，把它称作“会话”SOCKET，它负责与客户端通话。<br>如果失败则返回INVALID_SOCKET。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>accept函数从等待连接的队列中取第一个连接请求，并且创建一个新的SOCKET来负责与客户端会话。</p><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">SOCKET sServSock;<span class="comment">//服务器监听socket</span></span><br><span class="line">sockaddr_in addr;</span><br><span class="line"><span class="keyword">int</span> nSockErr;</span><br><span class="line"><span class="keyword">int</span> nNumConns = <span class="number">0</span>;<span class="comment">//当前请求连接数</span></span><br><span class="line">SOCKET sConns[<span class="number">5</span>];<span class="comment">//会话SOCKET数组</span></span><br><span class="line">sockaddr ConnAddrs[<span class="number">5</span>];<span class="comment">//请求连接的客户端地址</span></span><br><span class="line"><span class="keyword">int</span> nAddrLen;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务器监听socket</span></span><br><span class="line">sServSock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = htons(<span class="number">5050</span>);</span><br><span class="line">addr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( bind(sServSock,(LPSOCKADDR)&amp;addr,<span class="keyword">sizeof</span>(addr)) == </span><br><span class="line">SOCKET_ERROR )</span><br><span class="line">&#123;</span><br><span class="line">nSockErr = WSAGetLastError();</span><br><span class="line"><span class="comment">//绑定出错处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//监听客户端请求连接</span></span><br><span class="line"><span class="keyword">if</span>( listen(sServSock, <span class="number">2</span>)  ==  SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">nSockErr = WSAGetLastError();</span><br><span class="line"><span class="comment">//出错处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( nNumConns &lt; <span class="number">5</span>)&#123;</span><br><span class="line"><span class="comment">//每当收到客户端连接请求，创建新的会话SOCKET，保存在///sConns数组中</span></span><br><span class="line"><span class="comment">//客户端地址保存在ConnAddrs数组中</span></span><br><span class="line">sConns[nNumConns] = accept(sServSock, </span><br><span class="line">ConnAddrs[nNumConns], &amp;nAddrLen);</span><br><span class="line"><span class="keyword">if</span>(sConns[nNumConns] == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">nSockErr = WSAGetLastError();</span><br><span class="line"><span class="comment">//创建会话SOCKET出错处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建会话SOCKET成功，启动新的线程与客户端会话</span></span><br><span class="line">StartNewHandlerThread(sConns[nNumConns]);</span><br><span class="line"><span class="comment">//当前请求连接数+1</span></span><br><span class="line">nNumConns ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="connect（）"><a href="#connect（）" class="headerlink" title="connect（）"></a>connect（）</h4><p><strong>函数原型</strong><br>int connect (SOCKET s, const struct sockaddr FAR* name,<br> int  namelen );</p><p><strong>参数</strong><br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 一个未连接SOCKET，一般是由socket函数建立的。<br>name<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 同bind函数。<br>namelen<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 同bind函数。<br><strong>返回值</strong><br>函数执行成功返回0，失败则返回SOCKET_ERROR。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>向对方主动提出连接请求。</p><h4 id="send（）"><a href="#send（）" class="headerlink" title="send（）"></a>send（）</h4><p><strong>函数原型</strong><br>int send (SOCKET s, char * buf, int len ,int flags);<br>【参数】<br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 一个已经连接的SOCKET。<br>buf<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指向要传输的数据的缓冲区的指针。<br>len<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] buf的长度。<br>flags<br>&nbsp;&nbsp;&nbsp;&nbsp;[in]指定函数调用的方式。一般取0。<br><strong>返回值</strong><br>函数执行成功返回发送的字节数（可能小于len），失败则返回SOCKET_ERROR。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>通过已经连接的SOCKET发送数据。</p><h4 id="recv（）"><a href="#recv（）" class="headerlink" title="recv（）"></a>recv（）</h4><p><strong>函数原型</strong><br>int recv (SOCKET s, char * buf, int len ,int flags);</p><p><strong>参数</strong><br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 一个已经连接的SOCKET。<br>buf<br>&nbsp;&nbsp;&nbsp;&nbsp;[out] 指向接收数据的缓冲区的指针。<br>len<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] buf的长度。<br>flags<br>&nbsp;&nbsp;&nbsp;&nbsp;[in]指定函数调用的方式。一般取0。<br><strong>返回值</strong><br>函数执行成功返回接收到数据的字节数。如果失败则返回SOCKET_ERROR。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>通过已经连接的SOCKET接收数据。当读到的数据字节少于规定接受的数目（len）时，就把数据全部接收，并返回实际接收到的字节数；当读到的数据多于规定的值时，在流方式下剩余的数据由下个recv读出，在数据报方式下多余的数据被丢弃。</p><h4 id="sendto（）"><a href="#sendto（）" class="headerlink" title="sendto（）"></a>sendto（）</h4><p><strong>函数原型</strong><br>int sendto (SOCKET s, char * buf, int len ,int flags,<br>struct sockaddr_in * to, int tolen);</p><p><strong>参数</strong><br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 一个SOCKET(可能已连接)。<br>buf<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指向要传输的数据的缓冲区的指针。<br>len<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] buf的长度。<br>flags<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指定函数调用的方式。一般取0。<br>to<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指向目标地址结构体的指针。<br>tolen<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 目标地址结构体的长度。<br><strong>返回值</strong><br>函数执行成功返回发送的字节数（可能小于len），失败则返回SOCKET_ERROR。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>该函数一般用于通过无连接的SOCKET发送数据报文，报文的接受者由to参数指定。</p><h4 id="recvfrom（）"><a href="#recvfrom（）" class="headerlink" title="recvfrom（）"></a>recvfrom（）</h4><p><strong>函数原型</strong><br>int recvfrom (SOCKET s, char * buf, int len ,int flags,<br>struct sockaddr_in * from, int * fromlen);<br><strong>参数</strong><br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 一个已经绑定的SOCKET。<br>buf<br>&nbsp;&nbsp;&nbsp;&nbsp;[out] 指向接收数据的缓冲区的指针。<br>len<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] buf的长度。<br>flags<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 指定函数调用的方式。一般取0。<br>from<br>&nbsp;&nbsp;&nbsp;&nbsp;[out] 指向源地址结构体的指针。<br>fromlen<br>&nbsp;&nbsp;&nbsp;&nbsp;[in/out] 源地址结构体的长度。<br><strong>返回值</strong><br>函数执行成功返回发送的字节数（可能小于len），失败则返回SOCKET_ERROR。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>该函数一般用于通过无连接的SOCKET接收数据报文，报文的发送者由from参数指定。</p><h4 id="closesocket（）"><a href="#closesocket（）" class="headerlink" title="closesocket（）"></a>closesocket（）</h4><p><strong>函数原型</strong><br>int closesocket (SOCKET s,);</p><p><strong>参数</strong><br>s<br>&nbsp;&nbsp;&nbsp;&nbsp;[in] 要关闭的SOCKET。<br><strong>返回值</strong><br>函数执行成功返回0，失败则返回SOCKET_ERROR。这时可以调用WSAGetLastError函数取得具体的错误代码。<br><strong>函数功能</strong><br>关闭指定的SOCKET。</p><h3 id="Windows-Socket-2的扩展特性"><a href="#Windows-Socket-2的扩展特性" class="headerlink" title="Windows Socket 2的扩展特性"></a>Windows Socket 2的扩展特性</h3><h4 id="Winsock-2-0简介"><a href="#Winsock-2-0简介" class="headerlink" title="Winsock 2.0简介"></a>Winsock 2.0简介</h4><p>Winsock 1.1原先设计的时候把API限定在TCP/IP的范畴里，它不象Berkerly模型那样支持多种协议。而Winsock 2.0正规化了一些其它的协议（如ATM、IPX/SPX和DECNet协议）的API。<br>Winsock 2.0之所以能支持多种协议，是因为Winsock 2.0在Windows Sockets DLL和底层协议栈之间定义了一个SPI（Service Provider Interface）接口，这样，通过一个Windows Sockets DLL可以同时访问底层不同厂商的协议栈。<br>Winsock 2.0不仅允许多种协议栈的并存，而且从理论上讲，它还允许创造一个与网络协议无关的应用程序。Winsock 2.0可以基于服务的需要透明地选择协议，应用程序可以适用于不同的网络名和网络地址。<br>Winsock 2.0还扩展了它的API函数集，当然Winsock 2.0是向下兼容的，可以把Winsock 1.1的代码原封不动地用在Winsock 2.0中。</p><h4 id="Winsock-2-0新特性"><a href="#Winsock-2-0新特性" class="headerlink" title="Winsock 2.0新特性"></a>Winsock 2.0新特性</h4><p>下面列出了一些Winsock 2.0的重要新特性：</p><ul><li>多重协议支持：SPI接口使得新的协议可以被支持。</li><li>传输协议独立：根据服务提供不同的协议。</li><li>多重命名空间：根据需要的服务和解析的主机名选择协议。</li><li>分散和聚集：  从多个缓冲区接受和发送数据。</li><li>重叠I/O和事件对象：增强吞吐量。</li><li>服务质量（Qos）：协商和跟踪网络带宽。</li><li>条件接受：可以选择性地决定是否接受连接。</li><li>Socket共享：多个进程可以共享一个SOKCKET句柄。</li></ul><h4 id="Winsock-2-0新增函数"><a href="#Winsock-2-0新增函数" class="headerlink" title="Winsock 2.0新增函数"></a>Winsock 2.0新增函数</h4><p>下面列出了一些Winsock 2.0的重要新增函数：</p><ul><li>WSAAccept（）：accept（）函数的扩展版本，支持条件接受和套接字分组。</li><li>WASCloseEvent（）：释放一个时间对象。</li><li>WSAConnect（）：connect（）函数的扩展版本，支持连接数据交换和Qos规范。</li><li>WSACreatEvent（）：创建一个事件对象。</li><li>WSADuplicateSocket（）：为一个共享套接字创建一个新的套接字。</li><li>WSAEnumNetworkEvents（）：检查是否有网络事件发生。</li><li>WSAEnumProtocols（）：得到每个可用的协议的信息。</li><li>WSAEventSelect（）：把一个网络事件和一个事件对象连接。</li><li>WSAGetOverlappedResu（）：得到重叠操作的完成状态。</li><li>WSAHtonl（）：htonl（）函数的扩展版本。</li><li>WSAHtons（）：htons（）函数的扩展版本。</li><li>WSAIoctl（）：ioctlsocket（）函数允许重叠操作的扩展版本。</li><li>WSANtohl（）：ntohl（）函数的扩展版本。</li><li>WSANtohs（）：ntohs（）函数的扩展版本。</li><li>WSARecv（）：recv（）的扩展版本，支持分散/聚集/重叠I/O。</li><li>WSARecvDisconnect（）：终止套接字的接受操作。</li><li>WSARecvFrom（）：recvfrom（）的扩展版本，支持分散/聚集/重叠I/O。</li><li>WSAResetEvent（）：重新初始化事件对象。</li><li>WSASend（）：send（）的扩展版本，支持分散/聚集/重叠I/O。</li><li>WSARecvDisconnect（）：终止套接字的接受操作。</li><li>WSASendDisconnect（）：终止套接字的发送操作。</li><li>WSASendTo（）：sendto（）的扩展版本，支持分散/聚集/重叠I/O。</li><li>WSASetEvent（）：设置事件对象。</li><li>WSASocket（）：socket（）函数的扩展版本。它以一个PROTOCOL_INFO结构作为输入参数，并且允许创建重叠套接字，还允许创建套接字组。</li><li>WSAWaitForMultipleEvents（）：阻塞多个事件对象。<br>关于这些函数的具体细节，请查阅MSDN。 </li></ul><h3 id="基于SOCKET实现的小型web服务器"><a href="#基于SOCKET实现的小型web服务器" class="headerlink" title="基于SOCKET实现的小型web服务器"></a>基于SOCKET实现的小型web服务器</h3><p>项目划分为启动，配置，服务器收发3个模块。</p><h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><p>start部分用于启动服务器，并在启动后可关闭服务器。</p><p>start.cpp代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"server.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭服务器线程</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">closeServer</span><span class="params">(Server *server)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"If you want to close server, please input exit"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> Exit;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Exit;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Exit == <span class="string">"exit"</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//到这里意味着要关闭服务器</span></span><br><span class="line">(*server).~Server();</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Server server;</span><br><span class="line"><span class="keyword">if</span> (server.WinsockStartup() == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (server.ServerStartup() == <span class="number">-1</span> ) <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">if</span> (server.ListenStartup() == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line"><span class="function">thread <span class="title">closeThread</span><span class="params">(closeServer, &amp;server)</span></span>;</span><br><span class="line">closeThread.detach();</span><br><span class="line"><span class="keyword">if</span> (server.ServerWork() == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务器收发"><a href="#服务器收发" class="headerlink" title="服务器收发"></a>服务器收发</h4><p>server部分实现了服务器绑定IP端口,监听并接收HTTP请求，并建立连接，传送文件的功能。</p><p>server.h代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">SOCKET ServerSocket;  <span class="comment">//服务器socket</span></span><br><span class="line">sockaddr_in ServerAddr;<span class="comment">//服务器端IP地址</span></span><br><span class="line"><span class="keyword">char</span>* RecvBuf;  <span class="comment">//接受缓冲区</span></span><br><span class="line"><span class="keyword">char</span>* SendBuf;  <span class="comment">//发送缓冲区</span></span><br><span class="line"><span class="keyword">int</span> SocketNums;<span class="comment">//socket总数</span></span><br><span class="line"></span><br><span class="line">fd_set rfds;<span class="comment">//用于检查socket是否有数据到来的的文件描述符</span></span><br><span class="line">fd_set wfds;<span class="comment">//用于检查socket是否可以发送的文件描述符</span></span><br><span class="line"></span><br><span class="line">mutex lockRecBuf;  <span class="comment">//写接收缓冲区信号灯</span></span><br><span class="line">mutex lockRecBuf2;  <span class="comment">//读接收缓冲区信号灯</span></span><br><span class="line">mutex sendHeader;  <span class="comment">//发送报文头部信号灯</span></span><br><span class="line">mutex sendMessage;  <span class="comment">//发送报文主体信号灯</span></span><br><span class="line">mutex ClosedList;  <span class="comment">//失效队列信号灯</span></span><br><span class="line">mutex ClosedList2;  <span class="comment">//失效队列信号灯</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;SOCKET&gt;* threadsessions; <span class="comment">//线程队列</span></span><br><span class="line"><span class="built_in">list</span>&lt;SOCKET&gt;* SocketList;  <span class="comment">//当前的会话socket队列</span></span><br><span class="line"><span class="built_in">list</span>&lt;SOCKET&gt;* ClosedSocketList; <span class="comment">//所有已失效的会话socket队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">Server(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">virtual</span> ~Server(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">closeServer</span><span class="params">()</span></span>; <span class="comment">//关闭服务器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RecvMessage</span><span class="params">(SOCKET socket)</span></span>;  <span class="comment">//从SOCKET接受消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(SOCKET socket, <span class="built_in">string</span> msg)</span></span>;  <span class="comment">//向SOCKET发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">endWith</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; fullStr, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; endStr)</span></span>; <span class="comment">//判断是否以特定格式结尾</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WinsockStartup</span><span class="params">()</span></span>;  <span class="comment">//初始化Winsock</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ServerStartup</span><span class="params">()</span></span>;  <span class="comment">//初始化Server，包括创建SOCKET，绑定到IP和PORT</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListenStartup</span><span class="params">()</span></span>;  <span class="comment">//开始监听客户端请求</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ServerWork</span><span class="params">()</span></span>;  <span class="comment">//收客户机请求 连接并生成会话socket</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddSocket</span><span class="params">(SOCKET socket)</span></span>;  <span class="comment">//将新的会话SOCKET加入队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddClosedSocket</span><span class="params">(SOCKET socket)</span></span>; <span class="comment">//将失效的会话SOCKET加入失效队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveClosedSocket</span><span class="params">(SOCKET socket)</span></span>;  <span class="comment">//将失效的SOCKET从会话SOCKET队列删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveClosedSocket</span><span class="params">()</span></span>;  <span class="comment">//将所有失效的SOCKET从会话SOCKET队列删除</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>server.cpp代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"server.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"config.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Ws2_32.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Server::Server(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;RecvBuf = <span class="keyword">new</span> <span class="keyword">char</span>[Config::BufferLength]; <span class="comment">//初始化接受缓冲区</span></span><br><span class="line"><span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;RecvBuf, <span class="string">'\0'</span>, Config::BufferLength); <span class="comment">// 并设置为0</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SendBuf = <span class="keyword">new</span> <span class="keyword">char</span>[Config::BufferLength]; <span class="comment">//初始化发送缓冲区</span></span><br><span class="line"><span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;SendBuf, <span class="string">'\0'</span>, Config::BufferLength); <span class="comment">// 并设置为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;SocketList = <span class="keyword">new</span> <span class="built_in">list</span>&lt;SOCKET&gt;();  <span class="comment">//初始化有关List和Map</span></span><br><span class="line"><span class="keyword">this</span>-&gt;ClosedSocketList = <span class="keyword">new</span> <span class="built_in">list</span>&lt;SOCKET&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Server::~Server(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;RecvBuf != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//释放接收缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(<span class="keyword">this</span>-&gt;RecvBuf);</span><br><span class="line"><span class="keyword">this</span>-&gt;RecvBuf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"RecvBuf has been free!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;SendBuf != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//释放接收缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(<span class="keyword">this</span>-&gt;SendBuf);</span><br><span class="line"><span class="keyword">this</span>-&gt;SendBuf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"SendBuf has been free!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭服务器端socket</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ServerSocket != <span class="literal">NULL</span>) &#123;</span><br><span class="line">closesocket(<span class="keyword">this</span>-&gt;ServerSocket);</span><br><span class="line"><span class="keyword">this</span>-&gt;ServerSocket = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ServerSocket has been closed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭所有会话socket并释放会话队列</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;SocketList != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;SOCKET&gt;::iterator it = <span class="keyword">this</span>-&gt;SocketList-&gt;begin(); it != <span class="keyword">this</span>-&gt;SocketList-&gt;end(); it++)</span><br><span class="line">closesocket(*it); <span class="comment">//关闭会话</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;SocketList;  <span class="comment">//释放队列</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SocketList = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"SocketList has been deleted!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放失效会话队列</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ClosedSocketList != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;SOCKET&gt;::iterator it = <span class="keyword">this</span>-&gt;ClosedSocketList-&gt;begin(); it != <span class="keyword">this</span>-&gt;ClosedSocketList-&gt;end(); it++)</span><br><span class="line">closesocket(*it);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;ClosedSocketList;</span><br><span class="line"><span class="keyword">this</span>-&gt;ClosedSocketList = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ClosedSocketList has been deleted!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WSACleanup(); <span class="comment">//清理winsock 运行环境</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否以某一特定后缀名结尾</span></span><br><span class="line"><span class="keyword">bool</span> Server::endWith(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; fullStr, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; endStr) &#123;</span><br><span class="line"><span class="keyword">if</span> (endStr.size() &gt; fullStr.size())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> indexFull = fullStr.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> indexEnd = endStr.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (indexEnd &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fullStr[indexFull] != endStr[indexEnd])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">indexFull--;</span><br><span class="line">indexEnd--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化Winsock</span></span><br><span class="line"><span class="keyword">int</span> Server::WinsockStartup() &#123;</span><br><span class="line"></span><br><span class="line">WSADATA wsaData;<span class="comment">//用于返回Winsock的环境信息   </span></span><br><span class="line"><span class="keyword">int</span> nRc = WSAStartup(<span class="number">0x0202</span>, &amp;wsaData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nRc) &#123;</span><br><span class="line"><span class="comment">//Winsock初始化失败</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"WSAstartup error!\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断返回的Winsock版本号</span></span><br><span class="line"><span class="keyword">if</span> (wsaData.wVersion != <span class="number">0x0202</span>) &#123; <span class="comment">//如果版本不对</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server's winsock version error!"</span>;</span><br><span class="line">WSACleanup();  <span class="comment">//清除Winsock</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server's winsock startup success!\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化Server</span></span><br><span class="line"><span class="keyword">int</span> Server::ServerStartup() &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the ServerAddr: "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Config::ServerAddr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\rPlease input the ServerPort: "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Config::ServerPort;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server mainpath is:"</span> &lt;&lt;Config::mainPath &lt;&lt; <span class="string">" now"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Do you want to change it: y/n "</span>;</span><br><span class="line"><span class="keyword">char</span> changePath;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; changePath;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (changePath == <span class="string">'Y'</span> || changePath == <span class="string">'y'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the new server mainpath:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Config::mainPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 TCP socket</span></span><br><span class="line"><span class="keyword">this</span>-&gt;ServerSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ServerSocket == INVALID_SOCKET) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server create socket error!!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server TCP socket create OK!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Bind socket to Server's IP and port 5050</span></span><br><span class="line"><span class="keyword">this</span>-&gt;ServerAddr.sin_family = AF_INET;</span><br><span class="line"><span class="keyword">this</span>-&gt;ServerAddr.sin_port = htons(Config::ServerPort);</span><br><span class="line"><span class="keyword">this</span>-&gt;ServerAddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);</span><br><span class="line"><span class="keyword">int</span> nRC = bind(<span class="keyword">this</span>-&gt;ServerSocket, (LPSOCKADDR) &amp; (<span class="keyword">this</span>-&gt;ServerAddr), <span class="keyword">sizeof</span>(<span class="keyword">this</span>-&gt;ServerAddr));</span><br><span class="line"><span class="keyword">if</span> (nRC == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server socket bind error!\n"</span>;</span><br><span class="line">closesocket(<span class="keyword">this</span>-&gt;ServerSocket);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server socket bind ok!\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///关闭服务器线程</span></span><br><span class="line"><span class="keyword">int</span> Server::closeServer() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"If you want to close server, please input exit"</span> &lt;&lt;<span class="built_in">endl</span> ;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> Exit;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Exit;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Exit == <span class="string">"exit"</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//到这里意味着要关闭服务器</span></span><br><span class="line"><span class="keyword">this</span>-&gt;~Server();</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始监听过程，等待客户的连接</span></span><br><span class="line"><span class="keyword">int</span> Server::ListenStartup() &#123;</span><br><span class="line"><span class="keyword">int</span> nRC = listen(<span class="keyword">this</span>-&gt;ServerSocket, Config::MaxConnetion);</span><br><span class="line"><span class="keyword">if</span> (nRC == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server socket listen error!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">closesocket(<span class="keyword">this</span>-&gt;ServerSocket);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server socket listen ok!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将新的会话socket加入队列</span></span><br><span class="line"><span class="keyword">void</span> Server::AddSocket(SOCKET socket) &#123;</span><br><span class="line"><span class="keyword">if</span> (socket != INVALID_SOCKET) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;SocketList-&gt;insert(<span class="keyword">this</span>-&gt;SocketList-&gt;end(), socket);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将失效的会话socket加入失效队列</span></span><br><span class="line"><span class="keyword">void</span> Server::AddClosedSocket(SOCKET socket) &#123;</span><br><span class="line"><span class="keyword">if</span> (socket != INVALID_SOCKET) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;ClosedSocketList-&gt;insert(<span class="keyword">this</span>-&gt;ClosedSocketList-&gt;end(), socket);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将失效的socket从会话socket队列删除</span></span><br><span class="line"><span class="keyword">void</span> Server::RemoveClosedSocket(SOCKET socket) &#123;</span><br><span class="line"><span class="keyword">if</span> (socket != INVALID_SOCKET) &#123;</span><br><span class="line"><span class="built_in">list</span>&lt;SOCKET&gt;::iterator it = find(<span class="keyword">this</span>-&gt;SocketList-&gt;begin(), <span class="keyword">this</span>-&gt;SocketList-&gt;end(), socket);</span><br><span class="line"><span class="keyword">if</span> (it != <span class="keyword">this</span>-&gt;SocketList-&gt;end()) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;SocketList-&gt;erase(it);</span><br><span class="line"><span class="comment">//closesocket(*it);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将所有失效的socket从会话socket队列删除</span></span><br><span class="line"><span class="keyword">void</span> Server::RemoveClosedSocket() &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;SOCKET&gt;::iterator it = <span class="keyword">this</span>-&gt;ClosedSocketList-&gt;begin(); it != <span class="keyword">this</span>-&gt;ClosedSocketList-&gt;end(); it++) &#123;</span><br><span class="line"><span class="comment">/*if ((*it) != INVALID_SOCKET) &#123;</span></span><br><span class="line"><span class="comment">if (it != this-&gt;SocketList-&gt;end())</span></span><br><span class="line"><span class="comment">this-&gt;SocketList-&gt;erase(it);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">this</span>-&gt;RemoveClosedSocket(*it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向socket发送消息</span></span><br><span class="line"><span class="keyword">void</span> Server::SendMessage(SOCKET socket, <span class="built_in">string</span> msg) &#123;</span><br><span class="line"><span class="keyword">int</span> rtn = send(socket, msg.c_str(), msg.length(), <span class="number">0</span>);</span><br><span class="line">unique_lock&lt;mutex&gt;closedList(<span class="keyword">this</span>-&gt;ClosedList2, defer_lock);</span><br><span class="line"><span class="keyword">if</span> (rtn == SOCKET_ERROR) &#123;<span class="comment">//发送数据错误</span></span><br><span class="line">closedList.lock();</span><br><span class="line"><span class="keyword">this</span>-&gt;AddClosedSocket(socket);</span><br><span class="line">closedList.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从socket接受消息</span></span><br><span class="line"><span class="keyword">void</span> Server::RecvMessage(SOCKET socket) &#123;</span><br><span class="line"></span><br><span class="line">unique_lock&lt;mutex&gt;writeRecBuf(<span class="keyword">this</span>-&gt;lockRecBuf, defer_lock);  <span class="comment">//接收资源写信号灯</span></span><br><span class="line">unique_lock&lt;mutex&gt;readRecBuf(<span class="keyword">this</span>-&gt;lockRecBuf2, defer_lock);  <span class="comment">//接收资源读信号灯</span></span><br><span class="line">unique_lock&lt;mutex&gt;sendHeader(<span class="keyword">this</span>-&gt;sendHeader, defer_lock);  <span class="comment">//发送报文头部信号灯</span></span><br><span class="line">unique_lock&lt;mutex&gt;sendMessage(<span class="keyword">this</span>-&gt;sendMessage, defer_lock);  <span class="comment">//发送报文主体信号灯</span></span><br><span class="line">unique_lock&lt;mutex&gt;closedList(<span class="keyword">this</span>-&gt;ClosedList, defer_lock);  <span class="comment">//发送报文主体信号灯</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//writeRecBuf.lock();   //写RecBuf时需要上锁</span></span><br><span class="line"><span class="keyword">char</span>* RecvBufn = <span class="keyword">new</span> <span class="keyword">char</span>[Config::BufferLength];</span><br><span class="line"><span class="built_in">memset</span>(RecvBufn, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(RecvBufn)); <span class="comment">//缓存清零</span></span><br><span class="line"><span class="keyword">int</span> receivedBytes = recv(socket, RecvBufn, Config::BufferLength, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//writeRecBuf.unlock();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果会话SOCKET有数据到来，则接受客户的数据</span></span><br><span class="line"><span class="keyword">if</span> (receivedBytes == SOCKET_ERROR) &#123;    <span class="comment">//接受数据错误</span></span><br><span class="line"><span class="comment">/*receivedBytes = WSAGetLastError();</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "Thread falied!" &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">return;*/</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "ReceiveBytes == -1,Receive Error!" &lt;&lt; endl;</span></span><br><span class="line">closedList.lock();</span><br><span class="line"><span class="keyword">this</span>-&gt;AddClosedSocket(socket);</span><br><span class="line">closedList.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (receivedBytes == <span class="number">0</span>) &#123; <span class="comment">//对方断开连接</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "ReceiveBytes ==0,Server disconnected!" &lt;&lt; std::endl;</span></span><br><span class="line">closedList.lock();</span><br><span class="line"><span class="keyword">this</span>-&gt;AddClosedSocket(socket);</span><br><span class="line">closedList.unlock();</span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "\r\n" &lt;&lt; RecvBuf;</span></span><br><span class="line"><span class="comment">//找到报文头部</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> fullPath;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> respondHttpHeader, clientHttpHeader;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> statusCode, firstHeader, typeStr, lengthStr;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">regex <span class="title">regRequest</span><span class="params">(<span class="string">R"(([A-Z]+) (.*?) HTTP/\d\.\d)"</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::smatch matchRst;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> strRecv, strSend;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> method;</span><br><span class="line">    <span class="built_in">std</span>:<span class="built_in">string</span> url;</span><br><span class="line"></span><br><span class="line">respondHttpHeader = <span class="string">""</span>;</span><br><span class="line">statusCode = Config::Ok;</span><br><span class="line">firstHeader = <span class="string">"HTTP/1.1 200 OK\r\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到HTTP报文头部</span></span><br><span class="line"><span class="comment">//readRecBuf.lock();  //读RecBuf时需要上锁</span></span><br><span class="line">strRecv.assign(RecvBufn);</span><br><span class="line"><span class="keyword">size_t</span> headerEnd = strRecv.find(<span class="string">"\r\n\r\n"</span>);</span><br><span class="line">clientHttpHeader = strRecv.substr(<span class="number">0</span>, headerEnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则表达式提取关键字method(GET,POST),url</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">std</span>::regex_search(clientHttpHeader, matchRst, regRequest)) &#123;</span><br><span class="line">method = matchRst[<span class="number">1</span>].str();</span><br><span class="line">url = matchRst[<span class="number">2</span>].str();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; url.size(); i++) &#123;</span><br><span class="line"><span class="comment">//替换成windows路径</span></span><br><span class="line"><span class="keyword">if</span> (url[i] == <span class="string">'/'</span>)</span><br><span class="line">url[i] = <span class="string">'\\'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fullPath = Config::mainPath + url; <span class="comment">//完整路径</span></span><br><span class="line"><span class="comment">//writeRecBuf.unlock();</span></span><br><span class="line"><span class="comment">//readRecBuf.unlock();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Client http header:\r\n"</span> &lt;&lt; clientHttpHeader.c_str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\r\nmethod:"</span> &lt;&lt; method.c_str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"url:"</span> &lt;&lt; url.c_str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sendHeader.lock();  //发送报文头部信号灯</span></span><br><span class="line"></span><br><span class="line">DWORD ftyp;</span><br><span class="line">ftyp = GetFileAttributesA(fullPath.c_str());</span><br><span class="line"><span class="keyword">if</span> ((ftyp &amp; FILE_ATTRIBUTE_DIRECTORY) &amp;&amp; (!INVALID_FILE_ATTRIBUTES)) &#123;</span><br><span class="line"><span class="comment">//如果是一个目录，打开该目录下的索引index.html</span></span><br><span class="line">fullPath = fullPath + <span class="string">"\\index.html"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FILE* infile = fopen(fullPath.c_str(), <span class="string">"rb"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!infile) &#123;</span><br><span class="line"><span class="comment">//文件不存在</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>发送自定义404页面</span></span><br><span class="line">infile = fopen((Config::mainPath + <span class="string">"\\404.html"</span>).c_str(), <span class="string">"rb"</span>);</span><br><span class="line">statusCode = Config::Error;</span><br><span class="line">firstHeader = <span class="string">"HTTP/1.1 404 Not Found\r\n"</span>;</span><br><span class="line">typeStr = <span class="string">"Content-Type: text/html\r\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".html"</span>) || endWith(url, <span class="string">"htm"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: text/html\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".txt"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: text /plain\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".jpg"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: image/jpeg\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".jpeg"</span>) || endWith(url, <span class="string">".png"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: image/"</span> + (url.substr(url.rfind(<span class="string">'.'</span>) + <span class="number">1</span>)) + <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".ico"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: image/x-icon\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".css"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: text/css\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".gif"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: image/gif\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".png"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: image/png\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".js"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: application/javascript\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (endWith(url, <span class="string">".eot"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: application/vnd.ms-fontobject\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(endWith(url,<span class="string">".mp3"</span>))</span><br><span class="line">typeStr = <span class="string">"Content-Type: audio/mpeg\r\n"</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (infile != <span class="literal">NULL</span>)  <span class="comment">//文件存在，但是不支持解析</span></span><br><span class="line">fclose(infile);</span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>发送自定义501页面</span></span><br><span class="line">infile = fopen((Config::mainPath + <span class="string">"\\501.html"</span>).c_str(), <span class="string">"rb"</span>);</span><br><span class="line">statusCode = Config::Error;</span><br><span class="line">firstHeader = <span class="string">"HTTP/1.1 501 Not Implemented\r\n"</span>;</span><br><span class="line">typeStr = <span class="string">"Content-Type: text/html\r\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line">fseek(infile, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">fseek(infile, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="keyword">int</span> fileLength = ftell(infile);</span><br><span class="line"><span class="comment">//文件指针归位</span></span><br><span class="line">fseek(infile, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">respondHttpHeader = firstHeader + typeStr + <span class="string">"Content-Length: "</span> + <span class="built_in">std</span>::to_string(fileLength) + <span class="string">"\r\n"</span> + <span class="string">"Server: CServer_HTTP1.1\r\n"</span> + <span class="string">"Connection: close\r\n"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line"><span class="comment">//发送报文头部</span></span><br><span class="line">   <span class="comment">//send(socket, respondHttpHeader.c_str, respondHttpHeader.length(), 0);</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SendMessage(socket, respondHttpHeader);</span><br><span class="line"><span class="comment">//sendHeader.unlock();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"respond http header:"</span> &lt;&lt; respondHttpHeader.c_str();</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送请求的文件</span></span><br><span class="line"><span class="comment">//sendMessage.lock();</span></span><br><span class="line"><span class="keyword">int</span> bufReadNum;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//缓存清零</span></span><br><span class="line"><span class="built_in">memset</span>(RecvBufn, <span class="number">0</span>, <span class="keyword">sizeof</span>(RecvBufn));</span><br><span class="line">bufReadNum = fread(RecvBufn, <span class="number">1</span>, Config::BufferLength, infile);</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == (send(socket, RecvBufn, bufReadNum, <span class="number">0</span>)))</span><br><span class="line">&#123;<span class="comment">//发送失败</span></span><br><span class="line"><span class="comment">//rtn = SOCKET_ERROR;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"File: "</span> &lt;&lt; url &lt;&lt; <span class="string">" transfer error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (feof(infile))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fclose(infile);</span><br><span class="line"><span class="comment">//memset(RecvBufn, '\0', Config::BufferLength);//清除接受缓冲区</span></span><br><span class="line"><span class="comment">//sendMessage.unlock();</span></span><br><span class="line"><span class="keyword">if</span> (RecvBufn != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">delete</span>(RecvBufn);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"File: "</span> &lt;&lt; fullPath &lt;&lt; <span class="string">" transfer successful!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//writeRecBuf.unlock();</span></span><br><span class="line"><span class="comment">//closesocket(socket);</span></span><br><span class="line"><span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">100</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受客户端发来的请求连接并生成会话socket</span></span><br><span class="line"><span class="keyword">int</span> Server::ServerWork() &#123;</span><br><span class="line"></span><br><span class="line">u_long blockMode = Config::uNonBlock;</span><br><span class="line"><span class="keyword">int</span> rtn;</span><br><span class="line"><span class="comment">//nThread.MemberProc = &amp;Server::RecvMessage;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将ServerSocket设为非阻塞模式以监听客户连接请求</span></span><br><span class="line"><span class="keyword">if</span> ((rtn = ioctlsocket(<span class="keyword">this</span>-&gt;ServerSocket, FIONBIO, &amp;blockMode) == SOCKET_ERROR)) &#123; <span class="comment">//FIONBIO：允许或禁止套接口s的非阻塞模式。</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Set Server unblockMode error!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//等到客户端的连接请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置socket集</span></span><br><span class="line"><span class="comment">//FD_ZERO(fd_set *fdset);将指定的文件描述符集清空，在对文件描述符集合进行设置前，必须对其进行初始化，</span></span><br><span class="line"><span class="comment">//如果不清空，由于在系统分配内存空间后，通常并不作清空处理，所以结果是不可知的。</span></span><br><span class="line">FD_ZERO(&amp;<span class="keyword">this</span>-&gt;rfds);  </span><br><span class="line">FD_ZERO(&amp;<span class="keyword">this</span>-&gt;wfds);</span><br><span class="line"></span><br><span class="line"><span class="comment">//FD_SET(fd_set *fdset);用于在文件描述符集合中增加一个新的文件描述符。</span></span><br><span class="line"><span class="comment">//把serverSocket加入到rfds，等待用户连接请求</span></span><br><span class="line">FD_SET(<span class="keyword">this</span>-&gt;ServerSocket, &amp;<span class="keyword">this</span>-&gt;rfds);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把当前的会话socket加入到rfds,等待用户数据的到来;加到wfds，等待socket可发送数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;SOCKET&gt;::iterator it = <span class="keyword">this</span>-&gt;SocketList-&gt;begin(); it != <span class="keyword">this</span>-&gt;SocketList-&gt;end(); it++) &#123;</span><br><span class="line">FD_SET(*it, &amp;rfds);</span><br><span class="line">FD_SET(*it, &amp;wfds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待用户连接请求或用户数据到来或会话socke可发送数据</span></span><br><span class="line"><span class="comment">//返回有可读或可写的socket的总数</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>-&gt;SocketNums = select(<span class="number">0</span>, &amp;<span class="keyword">this</span>-&gt;rfds, &amp;<span class="keyword">this</span>-&gt;wfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) == SOCKET_ERROR)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Select socket nums error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时有客户端请求到来</span></span><br><span class="line">sockaddr_in ClientAddr;  <span class="comment">//客户端IP地址</span></span><br><span class="line"><span class="keyword">int</span> AddrLen = <span class="keyword">sizeof</span>(ClientAddr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查srvSocket是否收到用户连接请求</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;SocketNums &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FD_ISSET(<span class="keyword">this</span>-&gt;ServerSocket, &amp;rfds)) &#123;  <span class="comment">//检查有socket就绪</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SocketNums--;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生会话socket</span></span><br><span class="line">SOCKET sockket = accept(<span class="keyword">this</span>-&gt;ServerSocket, (LPSOCKADDR) &amp; (ClientAddr), &amp;AddrLen);</span><br><span class="line"><span class="keyword">if</span> (sockket == INVALID_SOCKET) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server accept error!\n"</span>;</span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span></span></span><br><span class="line"><span class="comment">/*closesocket(this-&gt;ServerSocket);</span></span><br><span class="line"><span class="comment">WSACleanup();</span></span><br><span class="line"><span class="comment">return -1;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将socket设为非阻塞模式以监听客户连接请求</span></span><br><span class="line"><span class="keyword">if</span> (ioctlsocket(sockket, FIONBIO, &amp;blockMode) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Set accept socket unbolockmode error!\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将产生的会话SOCKET保存在SocketList中</span></span><br><span class="line">getpeername(sockket, (struct sockaddr*) &amp; ClientAddr, &amp;AddrLen);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Receive Ip:"</span> &lt;&lt; inet_ntoa(ClientAddr.sin_addr) &lt;&lt; <span class="string">" from Port:"</span> &lt;&lt; ntohs(ClientAddr.sin_port) &lt;&lt; <span class="string">" request"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">""</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;AddSocket(sockket);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Server accept success!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收用户请求</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;SocketNums &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//遍历socket队列，检查是否有数据到来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;SOCKET&gt;::iterator it = <span class="keyword">this</span>-&gt;SocketList-&gt;begin(); it != <span class="keyword">this</span>-&gt;SocketList-&gt;end(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it != INVALID_SOCKET) &#123;</span><br><span class="line"><span class="comment">//FD_ISSET(int fd,fd_set *fdset);用于测试指定的文件描述符是否在该集合中。</span></span><br><span class="line"><span class="keyword">if</span> (FD_ISSET(*it, &amp;rfds)) &#123;  <span class="comment">//某会话socket有数据到来</span></span><br><span class="line">SOCKADDR_IN RequestSocket;</span><br><span class="line"><span class="keyword">int</span> socketAddrLen = <span class="keyword">sizeof</span>(RequestSocket);</span><br><span class="line">getpeername(*it, (struct sockaddr*) &amp; RequestSocket, &amp;socketAddrLen);</span><br><span class="line"><span class="comment">/*cout &lt;&lt; "Receive Ip:" &lt;&lt; inet_ntoa(RequestSocket.sin_addr) &lt;&lt; " from Port:" &lt;&lt; ntohs(RequestSocket.sin_port) &lt;&lt; " request";</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "" &lt;&lt; endl;*/</span></span><br><span class="line"><span class="function">thread <span class="title">talkThread</span><span class="params">(&amp;Server::RecvMessage, <span class="built_in">std</span>::ref(*<span class="keyword">this</span>), *it)</span></span>;  <span class="comment">//开启一个新的线程来处理这一个客户的请求</span></span><br><span class="line">talkThread.detach();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从socketList里删掉已经关闭的socket</span></span><br><span class="line"><span class="keyword">this</span>-&gt;RemoveClosedSocket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>config 配置了一些常用变量</p><p>config.h代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> ServerPort;  <span class="comment">//服务器端口号</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> ClientPort;   <span class="comment">//客户端端口</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">string</span> ServerAddr;   <span class="comment">//服务器IP地址</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MaxConnetion;  <span class="comment">//最大连接数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> BufferLength;   <span class="comment">//缓冲区大小</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">string</span> mainPath; <span class="comment">//虚拟主路径</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">string</span> Ok;  <span class="comment">//客户端请求成功</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">string</span> Error;   <span class="comment">//客户端语法错误，服务端尚未实现</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">string</span> NotFound;   <span class="comment">//文件不存在</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">string</span> HttpVersion;   <span class="comment">//HTTP版本</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> u_long uNonBlock;  <span class="comment">//SOCKET阻塞模式</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Config();</span><br><span class="line">~Config();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>config.cpp代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"config.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Config::Config()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Config::~Config()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> Config::ServerPort = <span class="number">5050</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Config::ClientPort = <span class="number">8080</span>;</span><br><span class="line"><span class="built_in">string</span> Config::ServerAddr = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Config::MaxConnetion = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Config::BufferLength = <span class="number">65535</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> Config::Ok= <span class="string">"200 OK"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> Config::Error = <span class="string">"501 Not Implemented"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> Config::NotFound = <span class="string">"404 Not Found"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> Config::HttpVersion = <span class="string">"HTTP/1.1 "</span>;</span><br><span class="line"><span class="keyword">const</span> u_long Config::uNonBlock = <span class="number">1</span>;  <span class="comment">//SOCKET为非阻塞模式</span></span><br><span class="line"><span class="built_in">string</span> Config::mainPath = <span class="string">"D:\\html\\"</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Socket套接字介绍&quot;&gt;&lt;a href=&quot;#Socket套接字介绍&quot; class=&quot;headerlink&quot; title=&quot;Socket套接字介绍&quot;&gt;&lt;/a&gt;Socket套接字介绍&lt;/h3&gt;&lt;p&gt;网络应用程序是由通信进程对组成，每对互相通信的应用程序进程互相发送报文，他们之间的通信必须通过下面的网络来进行。为了将应用程序和底层的网络通信协议屏蔽开来，采用套接字（Socket）这样一个抽象概念来作为应用程序和底层网络之间的应用程序编程接口（API）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="http://yorxika.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://yorxika.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>只出现一次的数字II</title>
    <link href="http://yorxika.github.io/2019/11/27/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97II/"/>
    <id>http://yorxika.github.io/2019/11/27/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97II/</id>
    <published>2019-11-27T15:37:58.000Z</published>
    <updated>2019-12-12T12:52:17.067Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第137题只出现一次的数字II</p><blockquote><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><a id="more"></a><p>示例 1:</p><p>输入: [2,2,3,2]<br>输出: 3</p></blockquote><hr><h4 id="排序后遍历"><a href="#排序后遍历" class="headerlink" title="排序后遍历"></a>排序后遍历</h4><p>思路同136题，排序后遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">int</span> len = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length ;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == len)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == nums[i + <span class="number">1</span>] &amp;&amp; nums[i + <span class="number">1</span>] == nums[i + <span class="number">2</span>]) &#123;</span><br><span class="line">            i += <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] != nums[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>来源<a href="https://leetcode-cn.com/problems/single-number-ii/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--31/" target="_blank" rel="noopener">题解</a></p><p><strong>将问题一般化</strong></p><p>给一个数组，每个元素都出现 k ( k &gt; 1) 次，除了一个数字只出现 p 次(p &gt;= 1, p % k !=0)，找到出现 p 次的那个数。<br>考虑其中的一个 bit<br>为了计数 k 次，我们必须要 m 个比特，其中 2^m &gt;=k，也就是 m &gt;= log2k。<br>假设我们 m 个比特依次是 x_mx_{m-1}…x_2x_1x 。<br>开始全部初始化为 0。00…00。<br>然后扫描所有数字的当前 bit 位，用 i 表示当前的 bit。</p><p>假如例子是 1 2 6 1 1 2 2 3 3 3, 3 个 1, 3 个 2, 3 个 3,1 个 6<br>1 0 0 1<br>2 0 1 0<br>6 1 1 0<br>1 0 0 1<br>1 0 0 1<br>2 0 1 0<br>2 0 1 0<br>3 0 1 1<br>3 0 1 1<br>3 0 1 1<br>初始 状态 00…00。<br>第一次遇到 1 , m 个比特依次是 00…01。<br>第二次遇到 1 , m 个比特依次是 00…10。<br>第三次遇到 1 , m 个比特依次是 00…11。<br>第四次遇到 1 , m 个比特依次是 00..100。</p><p>x1 的变化规律就是遇到 1 变成 1 ，再遇到 1 变回 0。遇到 0 的话就不变。<br>所以 x1 = x1 ^ i，可以用异或来求出 x1 。<br>那么 x2…xm 怎么办呢？<br>x2 的话，当遇到 1 的时候，如果之前 x1 是 0，x2 就不变。如果之前 x1 是 1，对应于上边的第二次遇到 1 和第四次遇到 1。 x2 从 0 变成 1 和 从 1 变成 0。<br>所以 x2 的变化规律就是遇到 1 同时 x1 是 1 就变成 1，再遇到 1 同时 x1 是 1 就变回 0。遇到 0 的话就不变。和 x1 的变化规律很像，所以同样可以使用异或。<br>x2 = x2 ^ (i &amp; x1)，多判断了 x1 是不是 1。<br>x3，x4 … xm 就是同理了，xm = xm ^ (xm-1 &amp; … &amp; x1 &amp; i) 。<br>再说直接点，上边其实就是模拟了每次加 1 的时候，各个比特位的变化。所以高位 xm 只有当低位全部为 1 的时候才会得到进位 1 。</p><p>00 -&gt; 01 -&gt; 10 -&gt; 11 -&gt; 00</p><p>上边有个问题，假设我们的 k = 3，那么我们应该在 10 之后就变成 00，而不是到 11。<br>所以我们需要一个 mask ，当没有到达 k 的时候和 mask进行与操作是它本身，当到达 k 的时候和 mask 相与就回到 00…000。<br>根据上边的要求构造 mask，假设 k 写成二进制以后是 km…k2k1。<br>mask = ~(y1 &amp; y2 &amp; … &amp; ym),<br>如果kj = 1，那么yj = xj<br>如果 kj = 0，yj = ~xj 。</p><p>举两个例子。</p><p>k = 3: 写成二进制，k1 = 1, k2 = 1, mask = ~(x1 &amp; x2);</p><p>k = 5: 写成二进制，k1 = 1, k2 = 0, k3 = 1, mask = ~(x1 &amp; ~x2 &amp; x3);</p><p>很容易想明白，当 x1x2…xm 达到 k1k2…km 的时候因为我们要把 x1x2…xm 归零。我们只需要用 0 和每一位进行与操作就回到了 0。<br>所以我们只需要把等于 0 的比特位取反，然后再和其他所有位相与就得到 1 ，然后再取反就是 0 了。<br>如果 x1x2…xm 没有达到 k1k2…km ，那么求出来的结果一定是 1，这样和原来的 bit 位进行与操作的话就保持了原来的数。<br>总之，最后我们的代码就是下边的框架。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">    xm ^= (xm-<span class="number">1</span> &amp; ... &amp; x1 &amp; i);</span><br><span class="line">    xm-<span class="number">1</span> ^= (xm-<span class="number">2</span> &amp; ... &amp; x1 &amp; i);</span><br><span class="line">    .....</span><br><span class="line">    x1 ^= i;</span><br><span class="line">    </span><br><span class="line">    mask = ~(y1 &amp; y2 &amp; ... &amp; ym) where yj = xj <span class="keyword">if</span> kj = <span class="number">1</span>, and yj = ~xj <span class="keyword">if</span> kj = <span class="number">0</span> (j = <span class="number">1</span> to m).</span><br><span class="line"></span><br><span class="line">    xm &amp;= mask;</span><br><span class="line">    ......</span><br><span class="line">    x1 &amp;= mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>考虑全部 bit</strong></p><p>假如例子是 1 2 6 1 1 2 2 3 3 3, 3 个 1, 3 个 2, 3 个 3,1 个 6<br>1 0 0 1<br>2 0 1 0<br>6 1 1 0<br>1 0 0 1<br>1 0 0 1<br>2 0 1 0<br>2 0 1 0<br>3 0 1 1<br>3 0 1 1<br>3 0 1 1<br>之前是完成了一个 bit 位，也就是每一列的操作。因为我们给的数是 int 类型，所以有 32 位。所以我们需要对每一位都进行计数。有了上边的分析，我们不需要再向解法三那样依次考虑每一位，我们可以同时对 32 位进行计数。<br>对于 k 等于 3 ，也就是这道题。我们可以用两个 int，x1 和 x2。x1 表示对于 32 位每一位计数的低位，x2 表示对于 32 位每一位计数的高位。通过之前的公式，我们利用位操作就可以同时完成计数了。</p><p><strong>返回什么</strong><br>最后一个问题，我们需要返回什么？<br>因为所有的数字都出现了 k 次，只有一个数字出现了 p 次。<br>因为 xm…x2x1 组合起来就是对于每一列 1 的计数。<br>如果 p = 1，那么如果出现一次的数字的某一位是 1 ，一定会使得 x1 ，也就是计数的最低位置的对应位为 1，所以我们把 x1 返回即可。对于上边的例子，就是 110 ，所以返回 6。<br>如果 p = 2，二进制就是 10，那么如果出现 2次的数字的某一位是 1 ，一定会使得 x2 的对应位变为 1，所以我们把 x2 返回即可。<br>如果 p = 3，二进制就是 11，那么如果出现 3次的数字的某一位是 1 ，一定会使得 x1 和x2的对应位都变为1，所以我们把 x1 或者 x2 返回即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1 = <span class="number">0</span>, x2 = <span class="number">0</span>, mask = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">        x2 ^= x1 &amp; i;</span><br><span class="line">        x1 ^= i;</span><br><span class="line">        mask = ~(x1 &amp; x2);</span><br><span class="line">        x2 &amp;= mask;</span><br><span class="line">        x1 &amp;= mask;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三进制运算"><a href="#三进制运算" class="headerlink" title="三进制运算"></a>三进制运算</h4><p>摸了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            ones = (ones ^ A[i]) &amp; ~twos;</span><br><span class="line">            twos = (twos ^ A[i]) &amp; ~ones;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ones;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第137题只出现一次的数字II&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="位运算" scheme="http://yorxika.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>环形链表II</title>
    <link href="http://yorxika.github.io/2019/11/26/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/"/>
    <id>http://yorxika.github.io/2019/11/26/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/</id>
    <published>2019-11-26T15:22:14.000Z</published>
    <updated>2019-12-12T12:52:43.951Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第142题环形链表II</p><blockquote><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p>说明：不允许修改给定的链表。<br>示例 1：</p><a id="more"></a><p>输入：head = [3,2,0,-4], pos = 1<br>输出：tail connects to node index 1<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><hr><h4 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h4><p>思路同141环形链表，用一个set来判断，如果有重复的，直接返回该元素即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    Set&lt;ListNode&gt; map = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.contains(head))</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            map.add(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><p>这题有个坑，和上一题不一样。<br>上一题条件宽松，在环里相遇即可，并且对初始步数无要求。<br>我在复用上一题代码时，因为初始步数的不一致，导致了最终在死循环里出不来。代码块里注释部分就是导致死循环的地方，尽管两个都能判断相遇成环，但是相遇点不一样，就为后来的找环入口算法带来了障碍。<br>或者注释部分用最开始的双指针代替也可。</p><p>数学解释：</p><blockquote><p>从 head 到入口点的距离设为 x，入口点到相遇点的距离设为 y，环的的长度设为 n。<br>假设 slow 指针走过的距离为 t，那么 fast 指针走过的一定是 slow 指针的 2 倍，也就是 2t。<br>slow 指针从 head 出发走了 x 的距离到达入口点，然后可能走了 k1 圈，然后再次回到入口点，再走了 y 的距离到达相遇点和 fast 指针相遇。<br>t = x + k1 * n + y<br>fast 指针同理，fast 指针从 head 出发走了 x 的距离到达入口点，然后可能走了 k2 圈，然后再次回到入口点，再走了 y 的距离到达相遇点和 slow 指针相遇。<br>2t = x + k2 * n + y<br>上边两个等式做一个差，可以得到<br>t = (k2 - k1) * n<br>设 k = k2 - k1 ，那么 t = k * n。<br>把 t = k * n 代入到第一个式子 t = x + k1 * n + y 中。<br>k * n = x + k1 * n + y<br>移项，x = (k - k1) * n - y<br>取出一个 n 和 y 结合，x = (k - k1 - 1) * n + (n - y)<br>左边的含义就是从 head 到达入口点。<br>右边的含义， n - y 就是从相遇点到入口点的距离，(k - k1 - 1) * n 就是转 (k - k1 - 1) 圈。<br>左边右边的含义结合起来就是，从相遇点走到入口点，然后转 (k - k1 - 1) 圈后再次回到入口点的这段时间，刚好就等于从 head 走向入口点的时间。<br>所以代码的话，我们只需要 meet 指针从相遇点出发的同时，让 head 指针也出发， head 指针和 meet 指针相遇的位置就是入口点了。</p></blockquote><p>通过上面的数学解释，在回顾最开始的代码，就知道了原因所在。最开始就异步，两个指针的步数不一致，也就破坏了后续的推导证明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*ListNode slow = head;</span></span><br><span class="line"><span class="comment">    ListNode fast = head.next;</span></span><br><span class="line"><span class="comment">    while (slow != fast) &#123;</span></span><br><span class="line"><span class="comment">        if (fast == null || fast.next == null) &#123;</span></span><br><span class="line"><span class="comment">            return null;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        slow = slow.next;</span></span><br><span class="line"><span class="comment">        fast = fast.next.next;</span></span><br><span class="line"><span class="comment">        if(fast == slow)</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    ListNode fast = head, slow = head;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span> (fast == slow) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这时候已经相遇</span></span><br><span class="line">    fast = head;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第142题环形链表II&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。&lt;/p&gt;
&lt;p&gt;为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。&lt;/p&gt;
&lt;p&gt;说明：不允许修改给定的链表。&lt;br&gt;示例 1：&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="双指针" scheme="http://yorxika.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>环形链表</title>
    <link href="http://yorxika.github.io/2019/11/26/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <id>http://yorxika.github.io/2019/11/26/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</id>
    <published>2019-11-26T14:40:38.000Z</published>
    <updated>2019-12-12T12:52:51.330Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第141题环形链表</p><blockquote><p>给定一个链表，判断链表中是否有环。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><a id="more"></a><p>示例 1：</p><p>输入：head = [3,2,0,-4], pos = 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。</p></blockquote><hr><h4 id="丑陋的双指针"><a href="#丑陋的双指针" class="headerlink" title="丑陋的双指针"></a>丑陋的双指针</h4><p>用一个快指针，一个慢指针，快指针每次比慢指针多走1步，这样，如果有环的话两者迟早相遇。<br>但是写的时候循环条件选择不当，导致出现了3次空指针异常，最终加了几个if判断才过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    ListNode p1 = head,p2 = head;</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span> &amp;&amp; p2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        <span class="keyword">if</span>(p1 == <span class="keyword">null</span> || p2.next == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        p2 = p2.next.next;</span><br><span class="line">        <span class="keyword">if</span> (p2 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(p1.val == p2.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>通过向哈希表里添加结点，每次询问是否包含此节点来判断是否成环.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Set&lt;ListNode&gt; map = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(head !=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.contains(head))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            map.add(head);</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><p>来自<a href="https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode/" target="_blank" rel="noopener">题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head.next;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第141题环形链表&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个链表，判断链表中是否有环。&lt;/p&gt;
&lt;p&gt;为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="双指针" scheme="http://yorxika.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="http://yorxika.github.io/2019/11/26/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yorxika.github.io/2019/11/26/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2019-11-26T14:15:49.000Z</published>
    <updated>2019-12-12T12:53:00.319Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第一题两数之和</p><blockquote><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><a id="more"></a><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p></blockquote><hr><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><p>暴力解法来自于2个半月之前，两轮循环遍历数组，找到目标元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* res = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; numsSize; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums [j] == target) &#123;</span><br><span class="line">                res[<span class="number">0</span>] = i;</span><br><span class="line">                res[<span class="number">1</span>] = j;</span><br><span class="line">                *returnSize = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>来自于<a href="https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-2/" target="_blank" rel="noopener">题解</a></p><p>建立哈希表存放元素值以及位置值，每次查找target - nums[i]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(complement))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;map.get(complement),i&#125;;</span><br><span class="line">        map.put(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="POJ上的两数之和"><a href="#POJ上的两数之和" class="headerlink" title="POJ上的两数之和"></a>POJ上的两数之和</h4><p>来自POJ2366题，提交WA，问题未知。</p><p>问题代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> len1 = in.nextInt();</span><br><span class="line">    <span class="keyword">int</span> [] A = <span class="keyword">new</span> <span class="keyword">int</span>[len1];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">    A[i] = in.nextInt();  <span class="comment">//数组A升序</span></span><br><span class="line">    <span class="keyword">int</span> len2 = in.nextInt();</span><br><span class="line">    <span class="keyword">int</span> [] B = <span class="keyword">new</span> <span class="keyword">int</span>[len2];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len2;i++)</span><br><span class="line">    B[i] = in.nextInt();  <span class="comment">//数组B降序</span></span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1 + len2 ; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> complement;</span><br><span class="line"><span class="keyword">if</span>(i &gt;= len1)&#123;</span><br><span class="line">temp = B[i - len1];</span><br><span class="line">complement = <span class="number">10000</span> - temp;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp = A[i];</span><br><span class="line">complement = <span class="number">10000</span> - A[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(map.containsKey(complement))&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">map.put(temp,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">System.out.println(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第一题两数之和&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="哈希表" scheme="http://yorxika.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>买股票的最佳时机II</title>
    <link href="http://yorxika.github.io/2019/11/25/%E4%B9%B0%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/"/>
    <id>http://yorxika.github.io/2019/11/25/%E4%B9%B0%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/</id>
    <published>2019-11-25T12:37:03.000Z</published>
    <updated>2019-12-12T12:53:15.767Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第122题买股票的最佳时机II</p><blockquote><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><a id="more"></a><p>示例 1:</p><p>输入: [7,1,5,3,6,4]<br>输出: 7<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>       随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</p></blockquote><hr><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>同<a href="https://yorxika.github.io/2019/11/18/%E4%B9%B0%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/">买股票的最佳时机III</a>，采用状态机模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一次遍历"><a href="#一次遍历" class="headerlink" title="一次遍历"></a>一次遍历</h4><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-ii-by-leetcode/" target="_blank" rel="noopener">题解</a></p><blockquote><p>在这种情况下，我们可以简单地继续在斜坡上爬升并持续增加从连续交易中获得的利润，而不是在谷之后寻找每个峰值。最后，我们将有效地使用峰值和谷值，但我们不需要跟踪峰值和谷值对应的成本以及最大利润，但我们可以直接继续增加加数组的连续数字之间的差值，如果第二个数字大于第一个数字，我们获得的总和将是最大利润。</p></blockquote><p>即遍历整个股票交易日价格列表 price，策略是所有上涨交易日都买卖（赚到所有利润），所有下降交易日都不买卖（永不亏钱）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt; prices[i - <span class="number">1</span>])</span><br><span class="line">            maxprofit += prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxprofit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第122题买股票的最佳时机II&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;/p&gt;
&lt;p&gt;设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。&lt;/p&gt;
&lt;p&gt;注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数组" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的深度</title>
    <link href="http://yorxika.github.io/2019/11/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
    <id>http://yorxika.github.io/2019/11/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</id>
    <published>2019-11-25T08:44:02.000Z</published>
    <updated>2019-12-13T15:26:11.601Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第104题二叉树的深度</p><blockquote><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p></blockquote><h4 id="递归I"><a href="#递归I" class="headerlink" title="递归I"></a>递归I</h4><a id="more"></a><p>如果根结点不为空，递归遍历左右子树，并且深度+1，最后返回最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    backOrder(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backOrder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        depth++;</span><br><span class="line">        max = Math.max(max, depth);</span><br><span class="line">        backOrder(root.left);</span><br><span class="line">        backOrder(root.right);</span><br><span class="line">        depth--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归II"><a href="#递归II" class="headerlink" title="递归II"></a>递归II</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="built_in">int</span> max<span class="constructor">Depth(TreeNode <span class="params">root</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (root<span class="operator"> == </span>null) &#123;</span><br><span class="line">     return <span class="number">0</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="built_in">int</span> left_height = max<span class="constructor">Depth(<span class="params">root</span>.<span class="params">left</span>)</span>;</span><br><span class="line">     <span class="built_in">int</span> right_height = max<span class="constructor">Depth(<span class="params">root</span>.<span class="params">right</span>)</span>;</span><br><span class="line">     return java.lang.<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(left_height, right_height) + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>来自<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/er-cha-shu-de-zui-da-shen-du-by-leetcode/" target="_blank" rel="noopener">题解</a>的评论区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        TreeNode node;</span><br><span class="line">        <span class="keyword">int</span> height;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(TreeNode node,<span class="keyword">int</span> height)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.node = node;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        Stack&lt;Pair&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.add(<span class="keyword">new</span> Pair(root,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            Pair pair = stack.pop();</span><br><span class="line">            TreeNode pop = pair.node;</span><br><span class="line">            depth = depth&gt;pair.height?depth:pair.height;</span><br><span class="line">            <span class="keyword">if</span>(pop.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.add(<span class="keyword">new</span> Pair(pop.right,pair.height+<span class="number">1</span>)); <span class="comment">//right先一步进入栈中</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pop.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.add(<span class="keyword">new</span> Pair(pop.left,pair.height+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第104题二叉树的深度&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;递归I&quot;&gt;&lt;a href=&quot;#递归I&quot; class=&quot;headerlink&quot; title=&quot;递归I&quot;&gt;&lt;/a&gt;递归I&lt;/h4&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的层次遍历II</title>
    <link href="http://yorxika.github.io/2019/11/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86II/"/>
    <id>http://yorxika.github.io/2019/11/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86II/</id>
    <published>2019-11-24T16:15:13.000Z</published>
    <updated>2019-12-12T12:53:36.821Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第107题二叉树的层次遍历II</p><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><h4 id="Collections-reverse"><a href="#Collections-reverse" class="headerlink" title="Collections.reverse()"></a>Collections.reverse()<a id="more"></a></h4><p>最简单的是按照上一次的写法，加上Collections.reverse()即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">                  List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">          <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">          Queue&lt;TreeNode&gt; tree = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">          tree.add(root);</span><br><span class="line">          <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> ( !tree.isEmpty() ) &#123;</span><br><span class="line">              ans.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">              <span class="keyword">int</span> level_length = tree.size();</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level_length; ++i) &#123;</span><br><span class="line">                  TreeNode p1 = tree.remove();</span><br><span class="line">                  ans.get(level).add(p1.val);</span><br><span class="line">                  <span class="keyword">if</span> (p1.left != <span class="keyword">null</span>) tree.add(p1.left);</span><br><span class="line">                  <span class="keyword">if</span> (p1.right != <span class="keyword">null</span>) tree.add(p1.right);</span><br><span class="line">              &#125;</span><br><span class="line">              level++;</span><br><span class="line">          &#125;</span><br><span class="line">          Collections.reverse(ans);</span><br><span class="line">          <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><p>来自<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--23/" target="_blank" rel="noopener">题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    DFS(root, <span class="number">0</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode root, <span class="keyword">int</span> level, List&lt;List&lt;Integer&gt;&gt; ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当前层数还没有元素，先 new 一个空的列表</span></span><br><span class="line">    <span class="keyword">if</span> (ans.size() &lt;= level) &#123;</span><br><span class="line">        ans.add(<span class="number">0</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当前值加入</span></span><br><span class="line">    ans.get(ans.size() - <span class="number">1</span> - level).add(root.val);</span><br><span class="line"></span><br><span class="line">    DFS(root.left, level + <span class="number">1</span>, ans);</span><br><span class="line">    DFS(root.right, level + <span class="number">1</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><p>这个写法和102题没啥区别，就是把结点插在了头部，但是为啥用LinkedList的addfirst不行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> levelNum = queue.size(); <span class="comment">// 当前层元素的个数</span></span><br><span class="line">        List&lt;Integer&gt; subList = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelNum; i++) &#123;</span><br><span class="line">            TreeNode curNode = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (curNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                subList.add(curNode.val);</span><br><span class="line">                queue.offer(curNode.left);</span><br><span class="line">                queue.offer(curNode.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (subList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans.add(<span class="number">0</span>, subList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第107题二叉树的层次遍历II&lt;/p&gt;
&lt;p&gt;给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）&lt;/p&gt;
&lt;h4 id=&quot;Collections-reverse&quot;&gt;&lt;a href=&quot;#Collections-reverse&quot; class=&quot;headerlink&quot; title=&quot;Collections.reverse()&quot;&gt;&lt;/a&gt;Collections.reverse()&lt;/h4&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的层次遍历</title>
    <link href="http://yorxika.github.io/2019/11/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
    <id>http://yorxika.github.io/2019/11/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</id>
    <published>2019-11-24T15:55:03.000Z</published>
    <updated>2019-12-12T12:53:28.861Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第102题二叉树的层次遍历</p><blockquote><p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</p></blockquote><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>习惯用栈写，出错了，遍历给出的顺序错了，应该改成队列的。<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; tree = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    tree.add(root);</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( !tree.isEmpty() ) &#123;</span><br><span class="line">        ans.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">int</span> level_length = tree.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level_length; ++i) &#123;</span><br><span class="line">            TreeNode p1 = tree.remove();</span><br><span class="line">            ans.get(level).add(p1.val);</span><br><span class="line">            <span class="keyword">if</span> (p1.left != <span class="keyword">null</span>) tree.add(p1.left);</span><br><span class="line">            <span class="keyword">if</span> (p1.right != <span class="keyword">null</span>) tree.add(p1.right);</span><br><span class="line">        &#125;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>摸了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    levelHelper(res, root, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelHelper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, TreeNode root, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (height &gt;= res.size()) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    res.get(height).add(root.val);</span><br><span class="line">    levelHelper(res, root.left, height+<span class="number">1</span>);</span><br><span class="line">    levelHelper(res, root.right, height+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第102题二叉树的层次遍历&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;迭代&quot;&gt;&lt;a href=&quot;#迭代&quot; class=&quot;headerlink&quot; title=&quot;迭代&quot;&gt;&lt;/a&gt;迭代&lt;/h4&gt;&lt;p&gt;习惯用栈写，出错了，遍历给出的顺序错了，应该改成队列的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>对称二叉树</title>
    <link href="http://yorxika.github.io/2019/11/24/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yorxika.github.io/2019/11/24/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2019-11-24T15:18:53.000Z</published>
    <updated>2019-12-12T12:53:54.056Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第101题对称二叉树</p><blockquote><p>给定一个二叉树，检查它是否是镜像对称的。</p></blockquote><hr><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isMirror(root, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMirror</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (t1.val == t2.val)</span><br><span class="line">            &amp;&amp; isMirror(t1.right, t2.left)</span><br><span class="line">            &amp;&amp; isMirror(t1.left, t2.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>来源<a href="https://leetcode-cn.com/problems/symmetric-tree/solution/dui-cheng-er-cha-shu-by-leetcode/" target="_blank" rel="noopener">题解</a></p><p>除了递归的方法外，我们也可以利用队列进行迭代。队列中每两个连续的结点应该是相等的，而且它们的子树互为镜像。最初，队列中包含的是 root 以及 root。该算法的工作原理类似于 BFS，但存在一些关键差异。每次提取两个结点并比较它们的值。然后，将两个结点的左右子结点按相反的顺序插入队列中。当队列为空时，或者我们检测到树不对称（即从队列中取出两个不相等的连续结点）时，该算法结束。</p><p>业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.add(root);</span><br><span class="line">    q.add(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        TreeNode t1 = q.poll();</span><br><span class="line">        TreeNode t2 = q.poll();</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1.val != t2.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        q.add(t1.left);</span><br><span class="line">        q.add(t2.right);</span><br><span class="line">        q.add(t1.right);</span><br><span class="line">        q.add(t2.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>按自己思路写了一个，用栈的结构，效率低了好多。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    stack.push(root);  <span class="comment">//根结点两次入栈，方便后续比较</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        TreeNode t1 = stack.pop();  <span class="comment">//出栈</span></span><br><span class="line">        TreeNode t2 = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> &amp;&amp; t2 == <span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span> || t2 == <span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1.val != t2.val) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        stack.push(t1.left);  <span class="comment">//入栈</span></span><br><span class="line">        stack.push(t2.right);</span><br><span class="line">        stack.push(t1.right);</span><br><span class="line">        stack.push(t2.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第101题对称二叉树&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉树，检查它是否是镜像对称的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h4 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h4&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%A0%91/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="树" scheme="http://yorxika.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>复原IP地址</title>
    <link href="http://yorxika.github.io/2019/11/23/%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/"/>
    <id>http://yorxika.github.io/2019/11/23/%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/</id>
    <published>2019-11-23T15:24:13.000Z</published>
    <updated>2019-12-12T12:54:06.503Z</updated>
    
    <content type="html"><![CDATA[<p>来自Leetcode第93题复原IP地址</p><blockquote><p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p><p>示例:</p><p>输入: “25525511135”<br>输出: [“255.255.11.135”, “255.255.111.35”]<a id="more"></a></p></blockquote><hr><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><p>4层循环遍历解决所有情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    StringBuilder ip = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">1</span> ; a &lt; <span class="number">4</span> ; ++ a)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b = <span class="number">1</span> ; b &lt; <span class="number">4</span> ; ++ b)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span> ; c &lt; <span class="number">4</span> ; ++ c)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">1</span> ; d &lt; <span class="number">4</span> ; ++ d)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a + b + c + d == s.length() )</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">int</span> n1 = Integer.parseInt(s.substring(<span class="number">0</span>, a));</span><br><span class="line">                        <span class="keyword">int</span> n2 = Integer.parseInt(s.substring(a, a+b));</span><br><span class="line">                        <span class="keyword">int</span> n3 = Integer.parseInt(s.substring(a+b, a+b+c));</span><br><span class="line">                        <span class="keyword">int</span> n4 = Integer.parseInt(s.substring(a+b+c));</span><br><span class="line">                        <span class="keyword">if</span>(n1 &lt;= <span class="number">255</span> &amp;&amp; n2 &lt;= <span class="number">255</span> &amp;&amp; n3 &lt;= <span class="number">255</span> &amp;&amp; n4 &lt;= <span class="number">255</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            ip.append(n1).append(<span class="string">'.'</span>).append(n2)</span><br><span class="line">                                    .append(<span class="string">'.'</span>).append(n3).append(<span class="string">'.'</span>).append(n4);</span><br><span class="line">                            <span class="keyword">if</span>(ip.length() == s.length() + <span class="number">3</span>) ret.add(ip.toString());</span><br><span class="line">                            ip.delete(<span class="number">0</span>, ip.length());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h4><p>来自<a href="https://leetcode-cn.com/problems/restore-ip-addresses/solution/fu-yuan-ipdi-zhi-by-leetcode/" target="_blank" rel="noopener">题解</a></p><ul><li>遍历三个有效位置curr_pos 以放置点。<ul><li>检查从上一个点到现在点中间的部分是否有效 :</li><li>是 :<ul><li>放置该点。</li><li>检查全部 3个点是否放好:<ul><li>是 :<ul><li>将结果添加到输出列表中。</li></ul></li><li>否 :<ul><li>继续放下一个点 backtrack(curr_pos, dots - 1)。</li></ul></li></ul></li><li>回溯，移除最后一个点。</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> String s;</span><br><span class="line"> LinkedList&lt;String&gt; segments = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"> ArrayList&lt;String&gt; output = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String segment)</span> </span>&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   Check if the current segment is valid :</span></span><br><span class="line"><span class="comment">   1. less or equal to 255      </span></span><br><span class="line"><span class="comment">   2. the first character could be '0' </span></span><br><span class="line"><span class="comment">   only if the segment is equal to '0'</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">int</span> m = segment.length();</span><br><span class="line">   <span class="keyword">if</span> (m &gt; <span class="number">3</span>)</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">return</span> (segment.charAt(<span class="number">0</span>) != <span class="string">'0'</span>) ? (Integer.valueOf(segment) &lt;= <span class="number">255</span>) : (m == <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update_output</span><span class="params">(<span class="keyword">int</span> curr_pos)</span> </span>&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   Append the current list of segments </span></span><br><span class="line"><span class="comment">   to the list of solutions</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   String segment = s.substring(curr_pos + <span class="number">1</span>, n);</span><br><span class="line">   <span class="keyword">if</span> (valid(segment)) &#123;</span><br><span class="line">     segments.add(segment);</span><br><span class="line">     output.add(String.join(<span class="string">"."</span>, segments));</span><br><span class="line">     segments.removeLast();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> prev_pos, <span class="keyword">int</span> dots)</span> </span>&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   prev_pos : the position of the previously placed dot</span></span><br><span class="line"><span class="comment">   dots : number of dots to place</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="comment">// The current dot curr_pos could be placed </span></span><br><span class="line">   <span class="comment">// in a range from prev_pos + 1 to prev_pos + 4.</span></span><br><span class="line">   <span class="comment">// The dot couldn't be placed </span></span><br><span class="line">   <span class="comment">// after the last character in the string.</span></span><br><span class="line">   <span class="keyword">int</span> max_pos = Math.min(n - <span class="number">1</span>, prev_pos + <span class="number">4</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> curr_pos = prev_pos + <span class="number">1</span>; curr_pos &lt; max_pos; curr_pos++) &#123;</span><br><span class="line">     String segment = s.substring(prev_pos + <span class="number">1</span>, curr_pos + <span class="number">1</span>);</span><br><span class="line">     <span class="keyword">if</span> (valid(segment)) &#123;</span><br><span class="line">       segments.add(segment);  <span class="comment">// place dot</span></span><br><span class="line">       <span class="keyword">if</span> (dots - <span class="number">1</span> == <span class="number">0</span>)      <span class="comment">// if all 3 dots are placed</span></span><br><span class="line">         update_output(curr_pos);  <span class="comment">// add the solution to output</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">         backtrack(curr_pos, dots - <span class="number">1</span>);  <span class="comment">// continue to place dots</span></span><br><span class="line">       segments.removeLast();  <span class="comment">// remove the last placed dot </span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="摸"><a href="#摸" class="headerlink" title="摸"></a>摸</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;String&gt; restoreIpAddresses(String s) &#123;</span><br><span class="line">    List&lt;String&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">    int n = s.<span class="built_in">length</span>();</span><br><span class="line">    backtrack(<span class="number">0</span>, <span class="string">""</span>, <span class="number">4</span>, s, res, n);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void backtrack(int <span class="built_in">i</span>, String tmp, int flag, String s, List&lt;String&gt; res, int n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">i</span> == n &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line">        res.add(tmp.substring(<span class="number">0</span>, tmp.<span class="built_in">length</span>() - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="built_in">i</span>; <span class="built_in">j</span> &lt; <span class="built_in">i</span> + <span class="number">3</span>; <span class="built_in">j</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">j</span> &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">i</span> == <span class="built_in">j</span> &amp;&amp; s.charAt(<span class="built_in">j</span>) == <span class="string">'0'</span>) &#123;</span><br><span class="line">                backtrack(<span class="built_in">j</span> + <span class="number">1</span>, tmp + s.charAt(<span class="built_in">j</span>) + <span class="string">"."</span>, flag - <span class="number">1</span>, s, res, n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Integer.parseInt(s.substring(<span class="built_in">i</span>, <span class="built_in">j</span> + <span class="number">1</span>)) &lt;= <span class="number">255</span>)</span><br><span class="line">                backtrack(<span class="built_in">j</span> + <span class="number">1</span>, tmp + s.substring(<span class="built_in">i</span>, <span class="built_in">j</span> + <span class="number">1</span>) + <span class="string">"."</span>, flag - <span class="number">1</span>, s, res, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Leetcode第93题复原IP地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: “25525511135”&lt;br&gt;输出: [“255.255.11.135”, “255.255.111.35”]&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="字符串" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="回溯" scheme="http://yorxika.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>反转链表II</title>
    <link href="http://yorxika.github.io/2019/11/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/"/>
    <id>http://yorxika.github.io/2019/11/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/</id>
    <published>2019-11-22T13:21:11.000Z</published>
    <updated>2019-12-12T12:54:44.283Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第92题反转链表II</p><blockquote><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p><p>说明:<br>1 ≤ m ≤ n ≤ 链表长度。</p><p>示例:</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4<br>输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL <a id="more"></a></p></blockquote><hr><h4 id="憨批写法"><a href="#憨批写法" class="headerlink" title="憨批写法"></a>憨批写法</h4><p>写的时候没考虑到一些特殊条件，用了太多的if了判断特殊情况，但是用时0ms，击败了100% hhh</p><p>思路就是找到要交换的部分，然后切开，交换那部分链表，在重新连接即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || m ==<span class="number">1</span> &amp;&amp; n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; m - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//找到前一个结点</span></span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode p2 = p1.next;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">        <span class="comment">//找到末尾结点</span></span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead,newCur;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>)</span><br><span class="line">        newHead = head;</span><br><span class="line">    <span class="keyword">else</span> newHead = p1.next;</span><br><span class="line">    newCur = p2;</span><br><span class="line">    p2 = p2.next;</span><br><span class="line">    newCur.next = <span class="keyword">null</span>;</span><br><span class="line">    newCur = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(m != <span class="number">1</span>)</span><br><span class="line">    p1.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(newHead != <span class="keyword">null</span>)&#123;</span><br><span class="line">        ListNode temp = newHead.next;</span><br><span class="line">        newHead.next = newCur;</span><br><span class="line">        newCur = newHead;</span><br><span class="line">        newHead = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>)</span><br><span class="line">        p1 = newCur;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        p1.next = newCur;</span><br><span class="line">    <span class="keyword">while</span>(newCur.next != <span class="keyword">null</span>)</span><br><span class="line">        newCur = newCur.next;</span><br><span class="line">    newCur.next = p2;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h4><p>在<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/zhao-dao-mhao-jie-dian-de-qian-yi-ge-jie-dian-zai-/" target="_blank" rel="noopener">题解</a>里找到了一个写的相对比较简洁的代码，思路大概是差不多的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode tail = head;  <span class="comment">// tail 记录首个需要翻转的节点</span></span><br><span class="line">        ListNode pre = head;   <span class="comment">// pre 记录首个需要翻转的节点的前一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m; ++i) <span class="comment">// 用 pre 记录翻转序列的前一个节点, tail 记录翻转序列的头一个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            pre = tail;</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n -= m; <span class="comment">// 新的 n 记录需要翻转的次数</span></span><br><span class="line">        ListNode sub_head = tail;  <span class="comment">// 记录需翻转的字串的头节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(n-- != <span class="number">0</span>)&#123; <span class="comment">// 翻转子串</span></span><br><span class="line">            ListNode h = tail.next;</span><br><span class="line">            tail.next = h.next;</span><br><span class="line">            h.next = sub_head;</span><br><span class="line">            sub_head = h;</span><br><span class="line">            <span class="keyword">if</span>(m != <span class="number">1</span>) <span class="comment">// 若不是从第一个节点就开始翻转,则进行子串头节点的拼接操作</span></span><br><span class="line">                pre.next = sub_head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(m != <span class="number">1</span>) <span class="comment">// 若不是从首节点开始翻转,直接返回原头结点</span></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">return</span> sub_head; <span class="comment">// 否则表示从首节点开始翻转,返回新的头结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第92题反转链表II&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。&lt;/p&gt;
&lt;p&gt;说明:&lt;br&gt;1 ≤ m ≤ n ≤ 链表长度。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, m = 2, n = 4&lt;br&gt;输出: 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;NULL&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="http://yorxika.github.io/2019/11/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yorxika.github.io/2019/11/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2019-11-22T13:05:18.000Z</published>
    <updated>2019-12-12T12:54:49.428Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第206题反转链表</p><blockquote><p>反转一个单链表。</p><p>示例:</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<a id="more"></a><br>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p></blockquote><hr><h4 id="初次提交"><a href="#初次提交" class="headerlink" title="初次提交"></a>初次提交</h4><p>一开始做的时候直接想着把链表形成一个闭环，然后通过这个闭环从最后一个结点逐一找到前一个结点，提交后用时击败了5.75%的用户，在二重循环里浪费了太多的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    ListNode p2;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    p1.next = head;</span><br><span class="line">    ListNode newHead = p1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len; i ++)&#123;</span><br><span class="line">        p2 = p1;</span><br><span class="line">        <span class="keyword">for</span>(;p2.next != p1;p2 = p2.next);</span><br><span class="line">        p2.next = head;</span><br><span class="line">        p1.next = p2;</span><br><span class="line">        <span class="keyword">if</span>(p2.next.next == p2)&#123;</span><br><span class="line">            p2.next.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>在遍历列表时，将当前节点的 next 指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode p1 = <span class="keyword">null</span>;</span><br><span class="line">    ListNode P2 = head;</span><br><span class="line">    <span class="keyword">while</span> (P2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode nextTemp = P2.next;</span><br><span class="line">        P2.next = p1;</span><br><span class="line">        p1 = P2;</span><br><span class="line">        P2 = nextTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>来源<a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode/" target="_blank" rel="noopener">题解</a></p><p>假设链表是[1, 2, 3, 4, 5]从最底层最后一个reverseList(5)来看</p><ul><li>返回了5这个节点</li><li>reverseList(4)中</li><li>p为5</li><li>head.next.next = head 相当于 5 -&gt; 4</li><li>现在节点情况为 4 -&gt; 5 -&gt; 4</li><li>head.next = null,切断4 -&gt; 5 这一条，现在只有 5 -&gt; 4</li><li>返回（return）p为5，5 -&gt; 4</li><li>返回上一层reverseList(3)</li><li>处理完后返回的是4 -&gt; 3</li><li>依次向上</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ListNode reverseList(ListNode<span class="built_in"> head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">(head</span> == null ||<span class="built_in"> head</span>.<span class="keyword">next</span> == null) <span class="keyword">return</span><span class="built_in"> head</span>;</span><br><span class="line">    ListNode p = reverseList<span class="built_in">(head</span>.<span class="keyword">next</span>);</span><br><span class="line">   <span class="built_in"> head</span>.<span class="keyword">next</span>.<span class="keyword">next</span> =<span class="built_in"> head</span>;</span><br><span class="line">   <span class="built_in"> head</span>.<span class="keyword">next</span> = null;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第206题反转链表&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;反转一个单链表。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL&lt;br&gt;输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="链表" scheme="http://yorxika.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>格雷编码</title>
    <link href="http://yorxika.github.io/2019/11/22/%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81/"/>
    <id>http://yorxika.github.io/2019/11/22/%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81/</id>
    <published>2019-11-22T12:28:48.000Z</published>
    <updated>2019-12-12T12:55:04.741Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第89题格雷编码</p><blockquote><p>格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。</p><p>给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。<a id="more"></a></p></blockquote><hr><h4 id="套公式"><a href="#套公式" class="headerlink" title="套公式"></a>套公式</h4><p>其实看题目描述会吐槽这是什么玩意，但是格雷码是数电里出现过的。<br>数电第一章1.4.2节格雷码公式：<br>设二进制数B = Bn-1 Bn-2 …… B1 B0<br>则其格雷码 G = Gn-1 Gn-2 …… G1 G0<br>且 Gn-1 = Bn-1<br>   Gi = Bi+1 ^ Bi<br>即最高位保留，其它位是当前位和它的高一位进行异或操作。<br>而在这题中，题目是输入 n 代表n位二进制位，输出其编码系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">grayCode</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>&lt;&lt;n; ++i)</span><br><span class="line">        ret.add(i ^ i&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第89题格雷编码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。&lt;/p&gt;
&lt;p&gt;给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="数学" scheme="http://yorxika.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>解码方法</title>
    <link href="http://yorxika.github.io/2019/11/21/%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/"/>
    <id>http://yorxika.github.io/2019/11/21/%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/</id>
    <published>2019-11-21T14:48:39.000Z</published>
    <updated>2019-12-12T12:55:13.590Z</updated>
    
    <content type="html"><![CDATA[<p>来源Leetcode第91题解码方法</p><blockquote><p>一条包含字母 A-Z 的消息通过以下方式进行了编码：</p><p>‘A’ -&gt; 1<br>‘B’ -&gt; 2<br>…<br>‘Z’ -&gt; 26<br>给定一个只包含数字的非空字符串，请计算解码方法的总数。<a id="more"></a></p><p>示例 1:</p><p>输入: “12”<br>输出: 2<br>解释: 它可以解码为 “AB”（1 2）或者 “L”（12）。</p></blockquote><hr><h4 id="自顶向下动态规划"><a href="#自顶向下动态规划" class="headerlink" title="自顶向下动态规划"></a>自顶向下动态规划</h4><p>一开始从前往后推的动态规划写错了，在处理当前位为“0”时没处理好，现在想想，如果当前位为“0”，那么dp[i] = dp[i - 2] 即可。<br>利用动态规划,dp[i]表示当前位置至往前的字符串共有多少种表示方式。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">int</span> [] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">    dp[len] = <span class="number">1</span> ; <span class="comment">//</span></span><br><span class="line">    <span class="comment">//如果最后一个数字不等于0，就初始化为1</span></span><br><span class="line">    <span class="keyword">if</span>(s.charAt(len - <span class="number">1</span>) != <span class="string">'0'</span>)</span><br><span class="line">        dp[len - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">2</span> ; i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i) == <span class="string">'0'</span> )</span><br><span class="line">            <span class="comment">//当前数字为0，构成不了任何字母，跳过</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> ans1 = dp[i + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//保存后一串字符串的解码个数</span></span><br><span class="line">        <span class="keyword">int</span> ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ten = (s.charAt(i) - <span class="string">'0'</span>) * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> one = s.charAt(i + <span class="number">1</span>) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(ten + one &lt;= <span class="number">26</span>)</span><br><span class="line">            ans2 = dp[i + <span class="number">2</span>];</span><br><span class="line">        dp[i] = ans1 + ans2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自底向上动态规划"><a href="#自底向上动态规划" class="headerlink" title="自底向上动态规划"></a>自底向上动态规划</h4><p>这题的测试用例什么奇葩，给我整了那么多的边界条件，我人都傻了。<br>101 输出2<br>100 输出0<br>00 输出0<br>这题就是在疯狂测试边界条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">int</span> [] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)&#123;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i) == <span class="string">'0'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((s.charAt(i - <span class="number">1</span>) == <span class="string">'2'</span> || s.charAt(i - <span class="number">1</span>) == <span class="string">'1'</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">                    dp[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i] = dp[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i - <span class="number">1</span>) == <span class="string">'0'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans1 = dp[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ten = (s.charAt(i - <span class="number">1</span>) - <span class="string">'0'</span>) * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> one = s.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>( ten &gt; <span class="number">0</span> &amp;&amp; ten + one &lt;= <span class="number">26</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">                ans2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> ans2 = dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = ans1 + ans2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[len - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态规划优化"><a href="#动态规划优化" class="headerlink" title="动态规划优化"></a>动态规划优化</h4><p>来源<a href="https://leetcode-cn.com/problems/decode-ways/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-2-3/" target="_blank" rel="noopener">题解</a></p><p>只需要 2 空间个就够了，更新的时候，指针移动一下即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">int</span> end = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span> (s.charAt(len - <span class="number">1</span>) != <span class="string">'0'</span>) &#123;</span><br><span class="line">        cur = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">'0'</span>) &#123;</span><br><span class="line">            end = cur;<span class="comment">//end 前移</span></span><br><span class="line">            cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans1 = cur;</span><br><span class="line">        <span class="keyword">int</span> ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ten = (s.charAt(i) - <span class="string">'0'</span>) * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> one = s.charAt(i + <span class="number">1</span>) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> (ten + one &lt;= <span class="number">26</span>) &#123;</span><br><span class="line">            ans2 = end;</span><br><span class="line">        &#125;</span><br><span class="line">        end = cur; <span class="comment">//end 前移</span></span><br><span class="line">        cur = ans1 + ans2;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源Leetcode第91题解码方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一条包含字母 A-Z 的消息通过以下方式进行了编码：&lt;/p&gt;
&lt;p&gt;‘A’ -&amp;gt; 1&lt;br&gt;‘B’ -&amp;gt; 2&lt;br&gt;…&lt;br&gt;‘Z’ -&amp;gt; 26&lt;br&gt;给定一个只包含数字的非空字符串，请计算解码方法的总数。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
      <category term="字符串" scheme="http://yorxika.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="Leetcode" scheme="http://yorxika.github.io/tags/Leetcode/"/>
    
      <category term="动态规划" scheme="http://yorxika.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
